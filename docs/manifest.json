{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.3", "generated_at": "2025-03-27T15:12:33.524455Z", "invocation_id": "599bf02d-fce5-442b-9ff3-e3ca17a73257", "env": {}, "project_name": "data_transform", "project_id": "19b5e738a6bcf91fa1c05b00f13bed68", "user_id": null, "send_anonymous_usage_stats": true, "adapter_type": "duckdb"}, "nodes": {"model.data_transform.fct_citibike_rides_by_year": {"database": "dev", "schema": "main", "name": "fct_citibike_rides_by_year", "resource_type": "model", "package_name": "data_transform", "path": "marts/fct_citibike_rides_by_year.sql", "original_file_path": "models/marts/fct_citibike_rides_by_year.sql", "unique_id": "model.data_transform.fct_citibike_rides_by_year", "fqn": ["data_transform", "marts", "fct_citibike_rides_by_year"], "alias": "fct_citibike_rides_by_year", "checksum": {"name": "sha256", "checksum": "9c3da6e32326df01c70a4a2daa0a33a791bcba37e7c7666b8670b961cb861590"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Pivoted data from all years, grouping number of rides by start_station_id and year.", "columns": {"start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "2019": {"name": "2019", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "2020": {"name": "2020", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "2021": {"name": "2021", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "2022": {"name": "2022", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "2023": {"name": "2023", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "2024": {"name": "2024", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "2025": {"name": "2025", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/marts/_marts__schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1743088110.3984482, "relation_name": "\"dev\".\"main\".\"fct_citibike_rides_by_year\"", "raw_code": "with cte as (\n    pivot combined_years\n    on year(started_at)\n    using count(*)\n    group by start_station_id, start_station_name\n)\nselect * from cte \norder by start_station_id", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.data_transform.dim_citibike_stations": {"database": "dev", "schema": "main", "name": "dim_citibike_stations", "resource_type": "model", "package_name": "data_transform", "path": "marts/dim_citibike_stations.sql", "original_file_path": "models/marts/dim_citibike_stations.sql", "unique_id": "model.data_transform.dim_citibike_stations", "fqn": ["data_transform", "marts", "dim_citibike_stations"], "alias": "dim_citibike_stations", "checksum": {"name": "sha256", "checksum": "4cfa7fb927ef600b312b772f3046cdabd2ed182ea79edbff103234281b05c47d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1743088109.896502, "relation_name": "\"dev\".\"main\".\"dim_citibike_stations\"", "raw_code": "with start_station_groups as (\n    {{ create_station_groups('combined_years', 'start') }}\n),\nend_station_groups as (\n    {{ create_station_groups('combined_years', 'end') }}\n),\nall_station_groups as (\n    select * from start_station_groups\n    UNION ALL\n    select * from end_station_groups\n),\nunique_stations as (\n    select \n        distinct citibike_station_name, \n        citibike_station_id, \n        station_latitude, \n        station_longitude \n    from all_station_groups\n)\nselect \n    row_number() over (order by citibike_station_id) as station_id, \n    * \nfrom unique_stations \norder by citibike_station_id", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.create_station_groups"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.data_transform.fct_citibike_rides": {"database": "dev", "schema": "main", "name": "fct_citibike_rides", "resource_type": "model", "package_name": "data_transform", "path": "marts/fct_citibike_rides.sql", "original_file_path": "models/marts/fct_citibike_rides.sql", "unique_id": "model.data_transform.fct_citibike_rides", "fqn": ["data_transform", "marts", "fct_citibike_rides"], "alias": "fct_citibike_rides", "checksum": {"name": "sha256", "checksum": "ff863f177bc3dcd6fdcac3df13408df5d9b935cb1a4927b872789ec03e24d7a9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "All records from all years.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/marts/_marts__schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1743088110.398147, "relation_name": "\"dev\".\"main\".\"fct_citibike_rides\"", "raw_code": "select * from {{ ref (\"combined_years\") }}", "language": "sql", "refs": [{"name": "combined_years", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.data_transform.combined_years"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.combined_years": {"database": "dev", "schema": "main", "name": "combined_years", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/combined_years/combined_years.sql", "original_file_path": "models/intermediate/combined_years/combined_years.sql", "unique_id": "model.data_transform.combined_years", "fqn": ["data_transform", "intermediate", "combined_years", "combined_years"], "alias": "combined_years", "checksum": {"name": "sha256", "checksum": "3a6664ead04a71f738ae9cf27e74c8b313a04b7339af00f056b55b71c10a6bc7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Ridership data from all years", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/combined_years/_combined_years__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view"}, "created_at": 1743088110.415145, "relation_name": "\"dev\".\"main\".\"combined_years\"", "raw_code": "select * from {{ref (\"yr_2020\")}}\nUNION ALL\nselect * from {{ref (\"yr_2021\")}}\nUNION ALL\nselect * from {{ref (\"yr_2022\")}}\nUNION ALL\nselect * from {{ref (\"yr_2023\")}}\nUNION ALL\nselect * from {{ref (\"yr_2024\")}}\nUNION ALL\nselect * from {{ref (\"yr_2025\")}}", "language": "sql", "refs": [{"name": "yr_2020", "package": null, "version": null}, {"name": "yr_2021", "package": null, "version": null}, {"name": "yr_2022", "package": null, "version": null}, {"name": "yr_2023", "package": null, "version": null}, {"name": "yr_2024", "package": null, "version": null}, {"name": "yr_2025", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.data_transform.yr_2020", "model.data_transform.yr_2021", "model.data_transform.yr_2022", "model.data_transform.yr_2023", "model.data_transform.yr_2024", "model.data_transform.yr_2025"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.feb_2025": {"database": "dev", "schema": "main", "name": "feb_2025", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2025/feb_2025.sql", "original_file_path": "models/intermediate/yr_2025/feb_2025.sql", "unique_id": "model.data_transform.feb_2025", "fqn": ["data_transform", "intermediate", "yr_2025", "feb_2025"], "alias": "feb_2025", "checksum": {"name": "sha256", "checksum": "f4dcf197a0db8618b13e9683ef8a6d7e24aca124223429a76ac5821888f20f93"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2025/_yr_2025__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.425087, "relation_name": "\"dev\".\"main\".\"feb_2025\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2025', '202502_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2025', '202502_citibike_tripdata_2') }} \n    UNION ALL\n    select * from {{ source('staging_2025', '202502_citibike_tripdata_3') }} \n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2025", "202502_citibike_tripdata_1"], ["staging_2025", "202502_citibike_tripdata_2"], ["staging_2025", "202502_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2025.202502_citibike_tripdata_1", "source.data_transform.staging_2025.202502_citibike_tripdata_2", "source.data_transform.staging_2025.202502_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.jan_2025": {"database": "dev", "schema": "main", "name": "jan_2025", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2025/jan_2025.sql", "original_file_path": "models/intermediate/yr_2025/jan_2025.sql", "unique_id": "model.data_transform.jan_2025", "fqn": ["data_transform", "intermediate", "yr_2025", "jan_2025"], "alias": "jan_2025", "checksum": {"name": "sha256", "checksum": "ca36db28a3243c0dce14dd817710d7d7fd62a58a51ade015f6c7119e63016498"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2025/_yr_2025__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.4237728, "relation_name": "\"dev\".\"main\".\"jan_2025\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2025', '202501_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2025', '202501_citibike_tripdata_2') }} \n    UNION ALL\n    select * from {{ source('staging_2025', '202501_citibike_tripdata_3') }} \n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2025", "202501_citibike_tripdata_1"], ["staging_2025", "202501_citibike_tripdata_2"], ["staging_2025", "202501_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2025.202501_citibike_tripdata_1", "source.data_transform.staging_2025.202501_citibike_tripdata_2", "source.data_transform.staging_2025.202501_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.yr_2025": {"database": "dev", "schema": "main", "name": "yr_2025", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2025/yr_2025.sql", "original_file_path": "models/intermediate/yr_2025/yr_2025.sql", "unique_id": "model.data_transform.yr_2025", "fqn": ["data_transform", "intermediate", "yr_2025", "yr_2025"], "alias": "yr_2025", "checksum": {"name": "sha256", "checksum": "03541f8ec759961296362b924da2c40744b579bb62de1fee00d443433a67f9cf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["year"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["year"], "description": "Combines data from all relevant month tables. For example `yr_2020` contains data from all tables matching `mmm_2020`. Year tables also use the macro `remove_unwanted_station_ids`. Read the macro documentation for more info.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2025/_yr_2025__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["year"]}, "created_at": 1743088110.426477, "relation_name": "\"dev\".\"main\".\"yr_2025\"", "raw_code": "with cte as (\n    select * from {{ref (\"jan_2025\")}}\n    UNION ALL\n    select * from {{ref (\"feb_2025\")}}\n)\nselect * from cte\n{{ remove_unwanted_station_ids('start_station_id')}}", "language": "sql", "refs": [{"name": "jan_2025", "package": null, "version": null}, {"name": "feb_2025", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.remove_unwanted_station_ids"], "nodes": ["model.data_transform.jan_2025", "model.data_transform.feb_2025"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.feb_2022": {"database": "dev", "schema": "main", "name": "feb_2022", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2022/feb_2022.sql", "original_file_path": "models/intermediate/yr_2022/feb_2022.sql", "unique_id": "model.data_transform.feb_2022", "fqn": ["data_transform", "intermediate", "yr_2022", "feb_2022"], "alias": "feb_2022", "checksum": {"name": "sha256", "checksum": "837036da53a2fe6c50e9280466974df0d40d1d0488d9def674820972d9753842"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2022/_yr_2022__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.4519382, "relation_name": "\"dev\".\"main\".\"feb_2022\"", "raw_code": "with cte as (\n        select * from \n    {{ source('staging_2022', '202202_citibike_tripdata_1') }} \n    UNION ALL\n    select * from \n    {{ source('staging_2022', '202202_citibike_tripdata_2') }} \n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2022", "202202_citibike_tripdata_1"], ["staging_2022", "202202_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2022.202202_citibike_tripdata_1", "source.data_transform.staging_2022.202202_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.oct_2022": {"database": "dev", "schema": "main", "name": "oct_2022", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2022/oct_2022.sql", "original_file_path": "models/intermediate/yr_2022/oct_2022.sql", "unique_id": "model.data_transform.oct_2022", "fqn": ["data_transform", "intermediate", "yr_2022", "oct_2022"], "alias": "oct_2022", "checksum": {"name": "sha256", "checksum": "38c5b52fc0b63c40136da23ab95cdf21693715b0bc26f5bbed6818b1e9a39cbe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2022/_yr_2022__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.462667, "relation_name": "\"dev\".\"main\".\"oct_2022\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2022', '202210_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2022', '202210_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2022', '202210_citibike_tripdata_3') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2022", "202210_citibike_tripdata_1"], ["staging_2022", "202210_citibike_tripdata_2"], ["staging_2022", "202210_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2022.202210_citibike_tripdata_1", "source.data_transform.staging_2022.202210_citibike_tripdata_2", "source.data_transform.staging_2022.202210_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.jun_2022": {"database": "dev", "schema": "main", "name": "jun_2022", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2022/jun_2022.sql", "original_file_path": "models/intermediate/yr_2022/jun_2022.sql", "unique_id": "model.data_transform.jun_2022", "fqn": ["data_transform", "intermediate", "yr_2022", "jun_2022"], "alias": "jun_2022", "checksum": {"name": "sha256", "checksum": "d7037b281b82b37e78195aae5458e761bc9dc083f662f713f0dbe9d4dab4de13"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2022/_yr_2022__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.457398, "relation_name": "\"dev\".\"main\".\"jun_2022\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2022', '202206_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2022', '202206_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2022', '202206_citibike_tripdata_3') }}\n    UNION ALL \n    select * from {{ source('staging_2022', '202206_citibike_tripdata_4') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2022", "202206_citibike_tripdata_1"], ["staging_2022", "202206_citibike_tripdata_2"], ["staging_2022", "202206_citibike_tripdata_3"], ["staging_2022", "202206_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2022.202206_citibike_tripdata_1", "source.data_transform.staging_2022.202206_citibike_tripdata_2", "source.data_transform.staging_2022.202206_citibike_tripdata_3", "source.data_transform.staging_2022.202206_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.yr_2022": {"database": "dev", "schema": "main", "name": "yr_2022", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2022/yr_2022.sql", "original_file_path": "models/intermediate/yr_2022/yr_2022.sql", "unique_id": "model.data_transform.yr_2022", "fqn": ["data_transform", "intermediate", "yr_2022", "yr_2022"], "alias": "yr_2022", "checksum": {"name": "sha256", "checksum": "75d776e639f6cc09f7821af0664acf09af8298d8cd707081b68c34e27a669314"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["year"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["year"], "description": "Combines data from all relevant month tables. For example `yr_2020` contains data from all tables matching `mmm_2020`. Year tables also use the macro `remove_unwanted_station_ids`. Read the macro documentation for more info.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2022/_yr_2022__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["year"]}, "created_at": 1743088110.466584, "relation_name": "\"dev\".\"main\".\"yr_2022\"", "raw_code": "with cte as (\n    select * from {{ref (\"jan_2022\")}}\n    UNION ALL\n    select * from {{ref (\"feb_2022\")}}\n    UNION ALL\n    select * from {{ref (\"mar_2022\")}}\n    UNION ALL\n    select * from {{ref (\"apr_2022\")}}\n    UNION ALL\n    select * from {{ref (\"may_2022\")}}\n    UNION ALL\n    select * from {{ref (\"jun_2022\")}}\n    UNION ALL\n    select * from {{ref (\"jul_2022\")}}\n    UNION ALL\n    select * from {{ref (\"aug_2022\")}}\n    UNION ALL\n    select * from {{ref (\"sep_2022\")}}\n    UNION ALL\n    select * from {{ref (\"oct_2022\")}}\n    UNION ALL\n    select * from {{ref (\"nov_2022\")}}\n    UNION ALL\n    select * from {{ref (\"dec_2022\")}}\n)\nselect * from cte\n{{ remove_unwanted_station_ids('start_station_id')}}", "language": "sql", "refs": [{"name": "jan_2022", "package": null, "version": null}, {"name": "feb_2022", "package": null, "version": null}, {"name": "mar_2022", "package": null, "version": null}, {"name": "apr_2022", "package": null, "version": null}, {"name": "may_2022", "package": null, "version": null}, {"name": "jun_2022", "package": null, "version": null}, {"name": "jul_2022", "package": null, "version": null}, {"name": "aug_2022", "package": null, "version": null}, {"name": "sep_2022", "package": null, "version": null}, {"name": "oct_2022", "package": null, "version": null}, {"name": "nov_2022", "package": null, "version": null}, {"name": "dec_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.remove_unwanted_station_ids"], "nodes": ["model.data_transform.jan_2022", "model.data_transform.feb_2022", "model.data_transform.mar_2022", "model.data_transform.apr_2022", "model.data_transform.may_2022", "model.data_transform.jun_2022", "model.data_transform.jul_2022", "model.data_transform.aug_2022", "model.data_transform.sep_2022", "model.data_transform.oct_2022", "model.data_transform.nov_2022", "model.data_transform.dec_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.dec_2022": {"database": "dev", "schema": "main", "name": "dec_2022", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2022/dec_2022.sql", "original_file_path": "models/intermediate/yr_2022/dec_2022.sql", "unique_id": "model.data_transform.dec_2022", "fqn": ["data_transform", "intermediate", "yr_2022", "dec_2022"], "alias": "dec_2022", "checksum": {"name": "sha256", "checksum": "e04f2595499536c2e9d8d3a5a47e4ff8bf87a7ed311b8be1a9006add4992afdc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2022/_yr_2022__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.465312, "relation_name": "\"dev\".\"main\".\"dec_2022\"", "raw_code": "with cte as (\n        select * from \n    {{ source('staging_2022', '202212_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2022', '202212_citibike_tripdata_2') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2022", "202212_citibike_tripdata_1"], ["staging_2022", "202212_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2022.202212_citibike_tripdata_1", "source.data_transform.staging_2022.202212_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.aug_2022": {"database": "dev", "schema": "main", "name": "aug_2022", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2022/aug_2022.sql", "original_file_path": "models/intermediate/yr_2022/aug_2022.sql", "unique_id": "model.data_transform.aug_2022", "fqn": ["data_transform", "intermediate", "yr_2022", "aug_2022"], "alias": "aug_2022", "checksum": {"name": "sha256", "checksum": "6d58cd4414ca1f2c0209a9d79fe5dd6c3e3cdc851b91c6fbe6c2f2d08e68cb9d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2022/_yr_2022__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.460059, "relation_name": "\"dev\".\"main\".\"aug_2022\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2022', '202208_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2022', '202208_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2022', '202208_citibike_tripdata_3') }}\n    UNION ALL \n    select * from {{ source('staging_2022', '202208_citibike_tripdata_4') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2022", "202208_citibike_tripdata_1"], ["staging_2022", "202208_citibike_tripdata_2"], ["staging_2022", "202208_citibike_tripdata_3"], ["staging_2022", "202208_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2022.202208_citibike_tripdata_1", "source.data_transform.staging_2022.202208_citibike_tripdata_2", "source.data_transform.staging_2022.202208_citibike_tripdata_3", "source.data_transform.staging_2022.202208_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.nov_2022": {"database": "dev", "schema": "main", "name": "nov_2022", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2022/nov_2022.sql", "original_file_path": "models/intermediate/yr_2022/nov_2022.sql", "unique_id": "model.data_transform.nov_2022", "fqn": ["data_transform", "intermediate", "yr_2022", "nov_2022"], "alias": "nov_2022", "checksum": {"name": "sha256", "checksum": "b6651b19f78412a0a5905950460a3ad5e662c21291b67e360fc5312193415eed"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2022/_yr_2022__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.464019, "relation_name": "\"dev\".\"main\".\"nov_2022\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2022', '202211_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2022', '202211_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2022', '202211_citibike_tripdata_3') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2022", "202211_citibike_tripdata_1"], ["staging_2022", "202211_citibike_tripdata_2"], ["staging_2022", "202211_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2022.202211_citibike_tripdata_1", "source.data_transform.staging_2022.202211_citibike_tripdata_2", "source.data_transform.staging_2022.202211_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.jan_2022": {"database": "dev", "schema": "main", "name": "jan_2022", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2022/jan_2022.sql", "original_file_path": "models/intermediate/yr_2022/jan_2022.sql", "unique_id": "model.data_transform.jan_2022", "fqn": ["data_transform", "intermediate", "yr_2022", "jan_2022"], "alias": "jan_2022", "checksum": {"name": "sha256", "checksum": "89d6c336ae5270b6f80cc7a00b07a23267db2ba274898925bca362171176e6d2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2022/_yr_2022__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.450606, "relation_name": "\"dev\".\"main\".\"jan_2022\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2022', '202201_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2022', '202201_citibike_tripdata_2') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2022", "202201_citibike_tripdata_1"], ["staging_2022", "202201_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2022.202201_citibike_tripdata_1", "source.data_transform.staging_2022.202201_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.jul_2022": {"database": "dev", "schema": "main", "name": "jul_2022", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2022/jul_2022.sql", "original_file_path": "models/intermediate/yr_2022/jul_2022.sql", "unique_id": "model.data_transform.jul_2022", "fqn": ["data_transform", "intermediate", "yr_2022", "jul_2022"], "alias": "jul_2022", "checksum": {"name": "sha256", "checksum": "99a1e446b01a6589bd72b9d597c80b1d689e6893ee3f21e033ca51e18649925b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2022/_yr_2022__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.45871, "relation_name": "\"dev\".\"main\".\"jul_2022\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2022', '202207_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2022', '202207_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2022', '202207_citibike_tripdata_3') }}\n    UNION ALL \n    select * from {{ source('staging_2022', '202207_citibike_tripdata_4') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2022", "202207_citibike_tripdata_1"], ["staging_2022", "202207_citibike_tripdata_2"], ["staging_2022", "202207_citibike_tripdata_3"], ["staging_2022", "202207_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2022.202207_citibike_tripdata_1", "source.data_transform.staging_2022.202207_citibike_tripdata_2", "source.data_transform.staging_2022.202207_citibike_tripdata_3", "source.data_transform.staging_2022.202207_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.mar_2022": {"database": "dev", "schema": "main", "name": "mar_2022", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2022/mar_2022.sql", "original_file_path": "models/intermediate/yr_2022/mar_2022.sql", "unique_id": "model.data_transform.mar_2022", "fqn": ["data_transform", "intermediate", "yr_2022", "mar_2022"], "alias": "mar_2022", "checksum": {"name": "sha256", "checksum": "206e4d701dfd8b605bf99dd4323a794b7708c1ea23dc7fbcd38dfe012da3055b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2022/_yr_2022__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.453407, "relation_name": "\"dev\".\"main\".\"mar_2022\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2022', '202203_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2022', '202203_citibike_tripdata_2') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2022", "202203_citibike_tripdata_1"], ["staging_2022", "202203_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2022.202203_citibike_tripdata_1", "source.data_transform.staging_2022.202203_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.sep_2022": {"database": "dev", "schema": "main", "name": "sep_2022", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2022/sep_2022.sql", "original_file_path": "models/intermediate/yr_2022/sep_2022.sql", "unique_id": "model.data_transform.sep_2022", "fqn": ["data_transform", "intermediate", "yr_2022", "sep_2022"], "alias": "sep_2022", "checksum": {"name": "sha256", "checksum": "eca786340ec8d015cf9fe7d5d3f0b069a309dfff52e2c95898d5d66dda672eb4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2022/_yr_2022__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.461358, "relation_name": "\"dev\".\"main\".\"sep_2022\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2022', '202209_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2022', '202209_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2022', '202209_citibike_tripdata_3') }}\n    UNION ALL \n    select * from {{ source('staging_2022', '202209_citibike_tripdata_4') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2022", "202209_citibike_tripdata_1"], ["staging_2022", "202209_citibike_tripdata_2"], ["staging_2022", "202209_citibike_tripdata_3"], ["staging_2022", "202209_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2022.202209_citibike_tripdata_1", "source.data_transform.staging_2022.202209_citibike_tripdata_2", "source.data_transform.staging_2022.202209_citibike_tripdata_3", "source.data_transform.staging_2022.202209_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.apr_2022": {"database": "dev", "schema": "main", "name": "apr_2022", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2022/apr_2022.sql", "original_file_path": "models/intermediate/yr_2022/apr_2022.sql", "unique_id": "model.data_transform.apr_2022", "fqn": ["data_transform", "intermediate", "yr_2022", "apr_2022"], "alias": "apr_2022", "checksum": {"name": "sha256", "checksum": "b1304a8677630d0b902fe752403c154441922b4a6a8e609de5129c8f1f49dc72"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2022/_yr_2022__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.4547122, "relation_name": "\"dev\".\"main\".\"apr_2022\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2022', '202204_citibike_tripdata_1') }} \n    UNION ALL\n    select * from \n    {{ source('staging_2022', '202204_citibike_tripdata_2') }} \n    UNION ALL\n    select * from \n    {{ source('staging_2022', '202204_citibike_tripdata_3') }} \n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2022", "202204_citibike_tripdata_1"], ["staging_2022", "202204_citibike_tripdata_2"], ["staging_2022", "202204_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2022.202204_citibike_tripdata_1", "source.data_transform.staging_2022.202204_citibike_tripdata_2", "source.data_transform.staging_2022.202204_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.may_2022": {"database": "dev", "schema": "main", "name": "may_2022", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2022/may_2022.sql", "original_file_path": "models/intermediate/yr_2022/may_2022.sql", "unique_id": "model.data_transform.may_2022", "fqn": ["data_transform", "intermediate", "yr_2022", "may_2022"], "alias": "may_2022", "checksum": {"name": "sha256", "checksum": "502747b75fcf8b7a3c0701d98b70d35604d66ada930ed8a2a06c0774a4f2db7f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2022/_yr_2022__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.456078, "relation_name": "\"dev\".\"main\".\"may_2022\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2022', '202205_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2022', '202205_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2022', '202205_citibike_tripdata_3') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2022", "202205_citibike_tripdata_1"], ["staging_2022", "202205_citibike_tripdata_2"], ["staging_2022", "202205_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2022.202205_citibike_tripdata_1", "source.data_transform.staging_2022.202205_citibike_tripdata_2", "source.data_transform.staging_2022.202205_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.feb_2023": {"database": "dev", "schema": "main", "name": "feb_2023", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2023/feb_2023.sql", "original_file_path": "models/intermediate/yr_2023/feb_2023.sql", "unique_id": "model.data_transform.feb_2023", "fqn": ["data_transform", "intermediate", "yr_2023", "feb_2023"], "alias": "feb_2023", "checksum": {"name": "sha256", "checksum": "d360a31d6e594de719571931b0e638c7e1459d3e65056506fff779fab6540f35"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2023/_yr_2023__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.612492, "relation_name": "\"dev\".\"main\".\"feb_2023\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2023', '202302_citibike_tripdata_1') }} \n    UNION ALL\n    select * from \n    {{ source('staging_2023', '202302_citibike_tripdata_2') }} \n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2023", "202302_citibike_tripdata_1"], ["staging_2023", "202302_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2023.202302_citibike_tripdata_1", "source.data_transform.staging_2023.202302_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.oct_2023": {"database": "dev", "schema": "main", "name": "oct_2023", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2023/oct_2023.sql", "original_file_path": "models/intermediate/yr_2023/oct_2023.sql", "unique_id": "model.data_transform.oct_2023", "fqn": ["data_transform", "intermediate", "yr_2023", "oct_2023"], "alias": "oct_2023", "checksum": {"name": "sha256", "checksum": "b297fed33ba18b58a9602d374853edb8f7738a6b78e3281fcd8b8c1af9fe8ac6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2023/_yr_2023__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.623101, "relation_name": "\"dev\".\"main\".\"oct_2023\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2023', '202310_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2023', '202310_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2023', '202310_citibike_tripdata_3') }}\n    UNION ALL \n    select * from {{ source('staging_2023', '202310_citibike_tripdata_4') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2023", "202310_citibike_tripdata_1"], ["staging_2023", "202310_citibike_tripdata_2"], ["staging_2023", "202310_citibike_tripdata_3"], ["staging_2023", "202310_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2023.202310_citibike_tripdata_1", "source.data_transform.staging_2023.202310_citibike_tripdata_2", "source.data_transform.staging_2023.202310_citibike_tripdata_3", "source.data_transform.staging_2023.202310_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.jun_2023": {"database": "dev", "schema": "main", "name": "jun_2023", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2023/jun_2023.sql", "original_file_path": "models/intermediate/yr_2023/jun_2023.sql", "unique_id": "model.data_transform.jun_2023", "fqn": ["data_transform", "intermediate", "yr_2023", "jun_2023"], "alias": "jun_2023", "checksum": {"name": "sha256", "checksum": "16d9e2b4632b655fc6ab92fa52e54478ca7e198e23be343bc8dbeae66579b917"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2023/_yr_2023__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.617874, "relation_name": "\"dev\".\"main\".\"jun_2023\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2023', '202306_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2023', '202306_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2023', '202306_citibike_tripdata_3') }}\n    UNION ALL \n    select * from {{ source('staging_2023', '202306_citibike_tripdata_4') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2023", "202306_citibike_tripdata_1"], ["staging_2023", "202306_citibike_tripdata_2"], ["staging_2023", "202306_citibike_tripdata_3"], ["staging_2023", "202306_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2023.202306_citibike_tripdata_1", "source.data_transform.staging_2023.202306_citibike_tripdata_2", "source.data_transform.staging_2023.202306_citibike_tripdata_3", "source.data_transform.staging_2023.202306_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.yr_2023": {"database": "dev", "schema": "main", "name": "yr_2023", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2023/yr_2023.sql", "original_file_path": "models/intermediate/yr_2023/yr_2023.sql", "unique_id": "model.data_transform.yr_2023", "fqn": ["data_transform", "intermediate", "yr_2023", "yr_2023"], "alias": "yr_2023", "checksum": {"name": "sha256", "checksum": "531e40c60612550f7a02a065a6776e3fad284009c5c3fd3b6276749b5a1d2941"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["year"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["year"], "description": "Combines data from all relevant month tables. For example `yr_2020` contains data from all tables matching `mmm_2020`. Year tables also use the macro `remove_unwanted_station_ids`. Read the macro documentation for more info.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2023/_yr_2023__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["year"]}, "created_at": 1743088110.62699, "relation_name": "\"dev\".\"main\".\"yr_2023\"", "raw_code": "with cte as (\n    select * from {{ref (\"jan_2023\")}}\n    UNION ALL\n    select * from {{ref (\"feb_2023\")}}\n    UNION ALL\n    select * from {{ref (\"mar_2023\")}}\n    UNION ALL\n    select * from {{ref (\"apr_2023\")}}\n    UNION ALL\n    select * from {{ref (\"may_2023\")}}\n    UNION ALL\n    select * from {{ref (\"jun_2023\")}}\n    UNION ALL\n    select * from {{ref (\"jul_2023\")}}\n    UNION ALL\n    select * from {{ref (\"aug_2023\")}}\n    UNION ALL\n    select * from {{ref (\"sep_2023\")}}\n    UNION ALL\n    select * from {{ref (\"oct_2023\")}}\n    UNION ALL\n    select * from {{ref (\"nov_2023\")}}\n    UNION ALL\n    select * from {{ref (\"dec_2023\")}}\n)\nselect * from cte\n{{ remove_unwanted_station_ids('start_station_id')}}", "language": "sql", "refs": [{"name": "jan_2023", "package": null, "version": null}, {"name": "feb_2023", "package": null, "version": null}, {"name": "mar_2023", "package": null, "version": null}, {"name": "apr_2023", "package": null, "version": null}, {"name": "may_2023", "package": null, "version": null}, {"name": "jun_2023", "package": null, "version": null}, {"name": "jul_2023", "package": null, "version": null}, {"name": "aug_2023", "package": null, "version": null}, {"name": "sep_2023", "package": null, "version": null}, {"name": "oct_2023", "package": null, "version": null}, {"name": "nov_2023", "package": null, "version": null}, {"name": "dec_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.remove_unwanted_station_ids"], "nodes": ["model.data_transform.jan_2023", "model.data_transform.feb_2023", "model.data_transform.mar_2023", "model.data_transform.apr_2023", "model.data_transform.may_2023", "model.data_transform.jun_2023", "model.data_transform.jul_2023", "model.data_transform.aug_2023", "model.data_transform.sep_2023", "model.data_transform.oct_2023", "model.data_transform.nov_2023", "model.data_transform.dec_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.aug_2023": {"database": "dev", "schema": "main", "name": "aug_2023", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2023/aug_2023.sql", "original_file_path": "models/intermediate/yr_2023/aug_2023.sql", "unique_id": "model.data_transform.aug_2023", "fqn": ["data_transform", "intermediate", "yr_2023", "aug_2023"], "alias": "aug_2023", "checksum": {"name": "sha256", "checksum": "df17e25b7e1af93dd8e752bf6e5cb387586df95203cd34f9f8573c7dbf226b7f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2023/_yr_2023__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.620474, "relation_name": "\"dev\".\"main\".\"aug_2023\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2023', '202308_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2023', '202308_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2023', '202308_citibike_tripdata_3') }}\n    UNION ALL \n    select * from {{ source('staging_2023', '202308_citibike_tripdata_4') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2023", "202308_citibike_tripdata_1"], ["staging_2023", "202308_citibike_tripdata_2"], ["staging_2023", "202308_citibike_tripdata_3"], ["staging_2023", "202308_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2023.202308_citibike_tripdata_1", "source.data_transform.staging_2023.202308_citibike_tripdata_2", "source.data_transform.staging_2023.202308_citibike_tripdata_3", "source.data_transform.staging_2023.202308_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.dec_2023": {"database": "dev", "schema": "main", "name": "dec_2023", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2023/dec_2023.sql", "original_file_path": "models/intermediate/yr_2023/dec_2023.sql", "unique_id": "model.data_transform.dec_2023", "fqn": ["data_transform", "intermediate", "yr_2023", "dec_2023"], "alias": "dec_2023", "checksum": {"name": "sha256", "checksum": "dde99d131c579a5e5f874445978a6dbe362a46588ff501696603d920df812630"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2023/_yr_2023__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.6257348, "relation_name": "\"dev\".\"main\".\"dec_2023\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2023', '202312_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2023', '202312_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2023', '202312_citibike_tripdata_3') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2023", "202312_citibike_tripdata_1"], ["staging_2023", "202312_citibike_tripdata_2"], ["staging_2023", "202312_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2023.202312_citibike_tripdata_1", "source.data_transform.staging_2023.202312_citibike_tripdata_2", "source.data_transform.staging_2023.202312_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.nov_2023": {"database": "dev", "schema": "main", "name": "nov_2023", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2023/nov_2023.sql", "original_file_path": "models/intermediate/yr_2023/nov_2023.sql", "unique_id": "model.data_transform.nov_2023", "fqn": ["data_transform", "intermediate", "yr_2023", "nov_2023"], "alias": "nov_2023", "checksum": {"name": "sha256", "checksum": "cdd4c5567822e316234f0302cd72934c5eccb0d5a10d1813221685880e6167e1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2023/_yr_2023__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.624383, "relation_name": "\"dev\".\"main\".\"nov_2023\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2023', '202311_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2023', '202311_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2023', '202311_citibike_tripdata_3') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2023", "202311_citibike_tripdata_1"], ["staging_2023", "202311_citibike_tripdata_2"], ["staging_2023", "202311_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2023.202311_citibike_tripdata_1", "source.data_transform.staging_2023.202311_citibike_tripdata_2", "source.data_transform.staging_2023.202311_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.jan_2023": {"database": "dev", "schema": "main", "name": "jan_2023", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2023/jan_2023.sql", "original_file_path": "models/intermediate/yr_2023/jan_2023.sql", "unique_id": "model.data_transform.jan_2023", "fqn": ["data_transform", "intermediate", "yr_2023", "jan_2023"], "alias": "jan_2023", "checksum": {"name": "sha256", "checksum": "8e2abdc49c43144995837e927bcf09e5a64bdec4c0b97b5ceb3c7f85c5ac529c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2023/_yr_2023__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.6111639, "relation_name": "\"dev\".\"main\".\"jan_2023\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2023', '202301_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2023', '202301_citibike_tripdata_2') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2023", "202301_citibike_tripdata_1"], ["staging_2023", "202301_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2023.202301_citibike_tripdata_1", "source.data_transform.staging_2023.202301_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.mar_2023": {"database": "dev", "schema": "main", "name": "mar_2023", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2023/mar_2023.sql", "original_file_path": "models/intermediate/yr_2023/mar_2023.sql", "unique_id": "model.data_transform.mar_2023", "fqn": ["data_transform", "intermediate", "yr_2023", "mar_2023"], "alias": "mar_2023", "checksum": {"name": "sha256", "checksum": "035c9e3864538722670ce35b64cf6f0d8e654f6b890bc96940a5d75bbee58425"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2023/_yr_2023__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.613914, "relation_name": "\"dev\".\"main\".\"mar_2023\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2023', '202303_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2023', '202303_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2023', '202303_citibike_tripdata_3') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2023", "202303_citibike_tripdata_1"], ["staging_2023", "202303_citibike_tripdata_2"], ["staging_2023", "202303_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2023.202303_citibike_tripdata_1", "source.data_transform.staging_2023.202303_citibike_tripdata_2", "source.data_transform.staging_2023.202303_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.jul_2023": {"database": "dev", "schema": "main", "name": "jul_2023", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2023/jul_2023.sql", "original_file_path": "models/intermediate/yr_2023/jul_2023.sql", "unique_id": "model.data_transform.jul_2023", "fqn": ["data_transform", "intermediate", "yr_2023", "jul_2023"], "alias": "jul_2023", "checksum": {"name": "sha256", "checksum": "794454c3ead8904bdc9602094ecbbc6a9debf4a7f92a0b826c2284572b48abb7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2023/_yr_2023__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.6191711, "relation_name": "\"dev\".\"main\".\"jul_2023\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2023', '202307_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2023', '202307_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2023', '202307_citibike_tripdata_3') }}\n    UNION ALL \n    select * from {{ source('staging_2023', '202307_citibike_tripdata_4') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2023", "202307_citibike_tripdata_1"], ["staging_2023", "202307_citibike_tripdata_2"], ["staging_2023", "202307_citibike_tripdata_3"], ["staging_2023", "202307_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2023.202307_citibike_tripdata_1", "source.data_transform.staging_2023.202307_citibike_tripdata_2", "source.data_transform.staging_2023.202307_citibike_tripdata_3", "source.data_transform.staging_2023.202307_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.may_2023": {"database": "dev", "schema": "main", "name": "may_2023", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2023/may_2023.sql", "original_file_path": "models/intermediate/yr_2023/may_2023.sql", "unique_id": "model.data_transform.may_2023", "fqn": ["data_transform", "intermediate", "yr_2023", "may_2023"], "alias": "may_2023", "checksum": {"name": "sha256", "checksum": "11998796643ebbd34f1c25342771fd32a27244a5d1fa21b5585962ce3d625eb3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2023/_yr_2023__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.616517, "relation_name": "\"dev\".\"main\".\"may_2023\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2023', '202305_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2023', '202305_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2023', '202305_citibike_tripdata_3') }}\n    UNION ALL \n    select * from {{ source('staging_2023', '202305_citibike_tripdata_4') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2023", "202305_citibike_tripdata_1"], ["staging_2023", "202305_citibike_tripdata_2"], ["staging_2023", "202305_citibike_tripdata_3"], ["staging_2023", "202305_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2023.202305_citibike_tripdata_1", "source.data_transform.staging_2023.202305_citibike_tripdata_2", "source.data_transform.staging_2023.202305_citibike_tripdata_3", "source.data_transform.staging_2023.202305_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.apr_2023": {"database": "dev", "schema": "main", "name": "apr_2023", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2023/apr_2023.sql", "original_file_path": "models/intermediate/yr_2023/apr_2023.sql", "unique_id": "model.data_transform.apr_2023", "fqn": ["data_transform", "intermediate", "yr_2023", "apr_2023"], "alias": "apr_2023", "checksum": {"name": "sha256", "checksum": "e828248d78156dcf5d505d32078cb35ea6ae2c8575e0279925c9beb9172dbba3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2023/_yr_2023__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.615223, "relation_name": "\"dev\".\"main\".\"apr_2023\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2023', '202304_citibike_tripdata_1') }} \n    UNION ALL\n    select * from \n    {{ source('staging_2023', '202304_citibike_tripdata_2') }} \n    UNION ALL\n    select * from \n    {{ source('staging_2023', '202304_citibike_tripdata_3') }} \n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2023", "202304_citibike_tripdata_1"], ["staging_2023", "202304_citibike_tripdata_2"], ["staging_2023", "202304_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2023.202304_citibike_tripdata_1", "source.data_transform.staging_2023.202304_citibike_tripdata_2", "source.data_transform.staging_2023.202304_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.sep_2023": {"database": "dev", "schema": "main", "name": "sep_2023", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2023/sep_2023.sql", "original_file_path": "models/intermediate/yr_2023/sep_2023.sql", "unique_id": "model.data_transform.sep_2023", "fqn": ["data_transform", "intermediate", "yr_2023", "sep_2023"], "alias": "sep_2023", "checksum": {"name": "sha256", "checksum": "9d152a975eb65809dce3ef9097f465be14ae48652142f951298c6357b24de937"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2023/_yr_2023__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.6218188, "relation_name": "\"dev\".\"main\".\"sep_2023\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2023', '202309_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2023', '202309_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2023', '202309_citibike_tripdata_3') }}\n    UNION ALL \n    select * from {{ source('staging_2023', '202309_citibike_tripdata_4') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2023", "202309_citibike_tripdata_1"], ["staging_2023", "202309_citibike_tripdata_2"], ["staging_2023", "202309_citibike_tripdata_3"], ["staging_2023", "202309_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2023.202309_citibike_tripdata_1", "source.data_transform.staging_2023.202309_citibike_tripdata_2", "source.data_transform.staging_2023.202309_citibike_tripdata_3", "source.data_transform.staging_2023.202309_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.oct_2024": {"database": "dev", "schema": "main", "name": "oct_2024", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2024/oct_2024.sql", "original_file_path": "models/intermediate/yr_2024/oct_2024.sql", "unique_id": "model.data_transform.oct_2024", "fqn": ["data_transform", "intermediate", "yr_2024", "oct_2024"], "alias": "oct_2024", "checksum": {"name": "sha256", "checksum": "c7c6818f775a24fd52a874db882ba19f0a0c935156ca887535b83efa7285eac1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2024/_yr_2024__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.782488, "relation_name": "\"dev\".\"main\".\"oct_2024\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2024', '202410_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2024', '202410_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2024', '202410_citibike_tripdata_3') }}\n    UNION ALL \n    select * from {{ source('staging_2024', '202410_citibike_tripdata_4') }}\n    UNION ALL \n    select * from {{ source('staging_2024', '202410_citibike_tripdata_5') }}\n    UNION ALL \n    select * from {{ source('staging_2024', '202410_citibike_tripdata_6') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2024", "202410_citibike_tripdata_1"], ["staging_2024", "202410_citibike_tripdata_2"], ["staging_2024", "202410_citibike_tripdata_3"], ["staging_2024", "202410_citibike_tripdata_4"], ["staging_2024", "202410_citibike_tripdata_5"], ["staging_2024", "202410_citibike_tripdata_6"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2024.202410_citibike_tripdata_1", "source.data_transform.staging_2024.202410_citibike_tripdata_2", "source.data_transform.staging_2024.202410_citibike_tripdata_3", "source.data_transform.staging_2024.202410_citibike_tripdata_4", "source.data_transform.staging_2024.202410_citibike_tripdata_5", "source.data_transform.staging_2024.202410_citibike_tripdata_6"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.jun_2024": {"database": "dev", "schema": "main", "name": "jun_2024", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2024/jun_2024.sql", "original_file_path": "models/intermediate/yr_2024/jun_2024.sql", "unique_id": "model.data_transform.jun_2024", "fqn": ["data_transform", "intermediate", "yr_2024", "jun_2024"], "alias": "jun_2024", "checksum": {"name": "sha256", "checksum": "bdaa44d8ee5d03b85ada5a181cfbe715d6c184cf43888cb371267364124138f9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2024/_yr_2024__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.777218, "relation_name": "\"dev\".\"main\".\"jun_2024\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2024', '202406_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2024', '202406_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2024', '202406_citibike_tripdata_3') }}\n    UNION ALL \n    select * from {{ source('staging_2024', '202406_citibike_tripdata_4') }}\n    UNION ALL \n    select * from {{ source('staging_2024', '202406_citibike_tripdata_5') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2024", "202406_citibike_tripdata_1"], ["staging_2024", "202406_citibike_tripdata_2"], ["staging_2024", "202406_citibike_tripdata_3"], ["staging_2024", "202406_citibike_tripdata_4"], ["staging_2024", "202406_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2024.202406_citibike_tripdata_1", "source.data_transform.staging_2024.202406_citibike_tripdata_2", "source.data_transform.staging_2024.202406_citibike_tripdata_3", "source.data_transform.staging_2024.202406_citibike_tripdata_4", "source.data_transform.staging_2024.202406_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.feb_2024": {"database": "dev", "schema": "main", "name": "feb_2024", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2024/feb_2024.sql", "original_file_path": "models/intermediate/yr_2024/feb_2024.sql", "unique_id": "model.data_transform.feb_2024", "fqn": ["data_transform", "intermediate", "yr_2024", "feb_2024"], "alias": "feb_2024", "checksum": {"name": "sha256", "checksum": "6a468b02f684fd3638cc56b9b68b98219212cf4a07dca1fd51fc3e80516f32c8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2024/_yr_2024__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.768777, "relation_name": "\"dev\".\"main\".\"feb_2024\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2024', '202402_citibike_tripdata') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2024", "202402_citibike_tripdata"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2024.202402_citibike_tripdata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.nov_2024": {"database": "dev", "schema": "main", "name": "nov_2024", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2024/nov_2024.sql", "original_file_path": "models/intermediate/yr_2024/nov_2024.sql", "unique_id": "model.data_transform.nov_2024", "fqn": ["data_transform", "intermediate", "yr_2024", "nov_2024"], "alias": "nov_2024", "checksum": {"name": "sha256", "checksum": "5c9832c2202379b13d3ce4348ab9d6260f72216ea953b6d3ec416b1598d6b2b4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2024/_yr_2024__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.783804, "relation_name": "\"dev\".\"main\".\"nov_2024\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2024', '202411_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2024', '202411_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2024', '202411_citibike_tripdata_3') }}\n    UNION ALL \n    select * from {{ source('staging_2024', '202411_citibike_tripdata_4') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2024", "202411_citibike_tripdata_1"], ["staging_2024", "202411_citibike_tripdata_2"], ["staging_2024", "202411_citibike_tripdata_3"], ["staging_2024", "202411_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2024.202411_citibike_tripdata_1", "source.data_transform.staging_2024.202411_citibike_tripdata_2", "source.data_transform.staging_2024.202411_citibike_tripdata_3", "source.data_transform.staging_2024.202411_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.jan_2024": {"database": "dev", "schema": "main", "name": "jan_2024", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2024/jan_2024.sql", "original_file_path": "models/intermediate/yr_2024/jan_2024.sql", "unique_id": "model.data_transform.jan_2024", "fqn": ["data_transform", "intermediate", "yr_2024", "jan_2024"], "alias": "jan_2024", "checksum": {"name": "sha256", "checksum": "fea72f275b7e5c0fa10c29f3742f25bed6fb0a9cdf43e0ad3e7d58c1f3fdfcc1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2024/_yr_2024__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.763215, "relation_name": "\"dev\".\"main\".\"jan_2024\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2024', '202401_citibike_tripdata') }} \n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2024", "202401_citibike_tripdata"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2024.202401_citibike_tripdata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.yr_2024": {"database": "dev", "schema": "main", "name": "yr_2024", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2024/yr_2024.sql", "original_file_path": "models/intermediate/yr_2024/yr_2024.sql", "unique_id": "model.data_transform.yr_2024", "fqn": ["data_transform", "intermediate", "yr_2024", "yr_2024"], "alias": "yr_2024", "checksum": {"name": "sha256", "checksum": "4189fc71661d3a03042d40aeadeb06cf166e999ef5e62350332c266f88f013a3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["year"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["year"], "description": "Combines data from all relevant month tables. For example `yr_2020` contains data from all tables matching `mmm_2020`. Year tables also use the macro `remove_unwanted_station_ids`. Read the macro documentation for more info.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2024/_yr_2024__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["year"]}, "created_at": 1743088110.786633, "relation_name": "\"dev\".\"main\".\"yr_2024\"", "raw_code": "with cte as (\n    select * from {{ref (\"jan_2024\")}}\n    UNION ALL\n    select * from {{ref (\"feb_2024\")}}\n    UNION ALL\n    select * from {{ref (\"mar_2024\")}}\n    UNION ALL\n    select * from {{ref (\"apr_2024\")}}\n    UNION ALL\n    select * from {{ref (\"may_2024\")}}\n    UNION ALL\n    select * from {{ref (\"jun_2024\")}}\n    UNION ALL\n    select * from {{ref (\"jul_2024\")}}\n    UNION ALL\n    select * from {{ref (\"aug_2024\")}}\n    UNION ALL\n    select * from {{ref (\"sep_2024\")}}\n    UNION ALL\n    select * from {{ref (\"oct_2024\")}}\n    UNION ALL\n    select * from {{ref (\"nov_2024\")}}\n    UNION ALL\n    select * from {{ref (\"dec_2024\")}}\n)\nselect * from cte\n{{ remove_unwanted_station_ids('start_station_id')}}", "language": "sql", "refs": [{"name": "jan_2024", "package": null, "version": null}, {"name": "feb_2024", "package": null, "version": null}, {"name": "mar_2024", "package": null, "version": null}, {"name": "apr_2024", "package": null, "version": null}, {"name": "may_2024", "package": null, "version": null}, {"name": "jun_2024", "package": null, "version": null}, {"name": "jul_2024", "package": null, "version": null}, {"name": "aug_2024", "package": null, "version": null}, {"name": "sep_2024", "package": null, "version": null}, {"name": "oct_2024", "package": null, "version": null}, {"name": "nov_2024", "package": null, "version": null}, {"name": "dec_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.remove_unwanted_station_ids"], "nodes": ["model.data_transform.jan_2024", "model.data_transform.feb_2024", "model.data_transform.mar_2024", "model.data_transform.apr_2024", "model.data_transform.may_2024", "model.data_transform.jun_2024", "model.data_transform.jul_2024", "model.data_transform.aug_2024", "model.data_transform.sep_2024", "model.data_transform.oct_2024", "model.data_transform.nov_2024", "model.data_transform.dec_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.dec_2024": {"database": "dev", "schema": "main", "name": "dec_2024", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2024/dec_2024.sql", "original_file_path": "models/intermediate/yr_2024/dec_2024.sql", "unique_id": "model.data_transform.dec_2024", "fqn": ["data_transform", "intermediate", "yr_2024", "dec_2024"], "alias": "dec_2024", "checksum": {"name": "sha256", "checksum": "9f708045662483f73aa9ac024f92005672329bd46ddc2c8c74514030aa3eecc6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2024/_yr_2024__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.785364, "relation_name": "\"dev\".\"main\".\"dec_2024\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2024', '202412_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2024', '202412_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2024', '202412_citibike_tripdata_3') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2024", "202412_citibike_tripdata_1"], ["staging_2024", "202412_citibike_tripdata_2"], ["staging_2024", "202412_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2024.202412_citibike_tripdata_1", "source.data_transform.staging_2024.202412_citibike_tripdata_2", "source.data_transform.staging_2024.202412_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.aug_2024": {"database": "dev", "schema": "main", "name": "aug_2024", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2024/aug_2024.sql", "original_file_path": "models/intermediate/yr_2024/aug_2024.sql", "unique_id": "model.data_transform.aug_2024", "fqn": ["data_transform", "intermediate", "yr_2024", "aug_2024"], "alias": "aug_2024", "checksum": {"name": "sha256", "checksum": "a0a192aad8dec1dd1f001df58acae59e4afcb2081c87c251c537cbdbd53fe453"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2024/_yr_2024__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.779828, "relation_name": "\"dev\".\"main\".\"aug_2024\"", "raw_code": "with cte as (\n    select * EXCLUDE(rideable_type_duplicate_column_name_1) from {{ source('staging_2024', '202408_citibike_tripdata_1') }} \n    UNION ALL \n    select * EXCLUDE(rideable_type_duplicate_column_name_1) from {{ source('staging_2024', '202408_citibike_tripdata_2') }}\n    UNION ALL \n    select * EXCLUDE(rideable_type_duplicate_column_name_1) from {{ source('staging_2024', '202408_citibike_tripdata_3') }}\n    UNION ALL \n    select * EXCLUDE(rideable_type_duplicate_column_name_1) from {{ source('staging_2024', '202408_citibike_tripdata_4') }}\n    UNION ALL \n    select * EXCLUDE(rideable_type_duplicate_column_name_1) from {{ source('staging_2024', '202408_citibike_tripdata_5') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2024", "202408_citibike_tripdata_1"], ["staging_2024", "202408_citibike_tripdata_2"], ["staging_2024", "202408_citibike_tripdata_3"], ["staging_2024", "202408_citibike_tripdata_4"], ["staging_2024", "202408_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2024.202408_citibike_tripdata_1", "source.data_transform.staging_2024.202408_citibike_tripdata_2", "source.data_transform.staging_2024.202408_citibike_tripdata_3", "source.data_transform.staging_2024.202408_citibike_tripdata_4", "source.data_transform.staging_2024.202408_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.jul_2024": {"database": "dev", "schema": "main", "name": "jul_2024", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2024/jul_2024.sql", "original_file_path": "models/intermediate/yr_2024/jul_2024.sql", "unique_id": "model.data_transform.jul_2024", "fqn": ["data_transform", "intermediate", "yr_2024", "jul_2024"], "alias": "jul_2024", "checksum": {"name": "sha256", "checksum": "b990cf1ef344f888d4a8a019dfc134552a249842ff447ad526382e58f91b4b00"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2024/_yr_2024__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.778534, "relation_name": "\"dev\".\"main\".\"jul_2024\"", "raw_code": "with cte as (\n    select * exclude(\"Unnamed: 0\") from {{ source('staging_2024', '202407_citibike_tripdata_1') }} \n    UNION ALL \n    select * exclude(\"Unnamed: 0\") from {{ source('staging_2024', '202407_citibike_tripdata_2') }}\n    UNION ALL \n    select * exclude(\"Unnamed: 0\") from {{ source('staging_2024', '202407_citibike_tripdata_3') }}\n    UNION ALL \n    select * exclude(\"Unnamed: 0\") from {{ source('staging_2024', '202407_citibike_tripdata_4') }}\n    UNION ALL \n    select * exclude(\"Unnamed: 0\") from {{ source('staging_2024', '202407_citibike_tripdata_5') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2024", "202407_citibike_tripdata_1"], ["staging_2024", "202407_citibike_tripdata_2"], ["staging_2024", "202407_citibike_tripdata_3"], ["staging_2024", "202407_citibike_tripdata_4"], ["staging_2024", "202407_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2024.202407_citibike_tripdata_1", "source.data_transform.staging_2024.202407_citibike_tripdata_2", "source.data_transform.staging_2024.202407_citibike_tripdata_3", "source.data_transform.staging_2024.202407_citibike_tripdata_4", "source.data_transform.staging_2024.202407_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.mar_2024": {"database": "dev", "schema": "main", "name": "mar_2024", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2024/mar_2024.sql", "original_file_path": "models/intermediate/yr_2024/mar_2024.sql", "unique_id": "model.data_transform.mar_2024", "fqn": ["data_transform", "intermediate", "yr_2024", "mar_2024"], "alias": "mar_2024", "checksum": {"name": "sha256", "checksum": "b5112033f7d82a3a38b64e31944d7dc2d8232202c0f4d8ab25abeef0db584be9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2024/_yr_2024__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.7730932, "relation_name": "\"dev\".\"main\".\"mar_2024\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2024', '202403_citibike_tripdata') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2024", "202403_citibike_tripdata"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2024.202403_citibike_tripdata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.sep_2024": {"database": "dev", "schema": "main", "name": "sep_2024", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2024/sep_2024.sql", "original_file_path": "models/intermediate/yr_2024/sep_2024.sql", "unique_id": "model.data_transform.sep_2024", "fqn": ["data_transform", "intermediate", "yr_2024", "sep_2024"], "alias": "sep_2024", "checksum": {"name": "sha256", "checksum": "8bcdcf584b48a47890651880fc20e5d49ca604de54f8bdc07a04920fac3479e5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2024/_yr_2024__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.78119, "relation_name": "\"dev\".\"main\".\"sep_2024\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2024', '202409_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2024', '202409_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2024', '202409_citibike_tripdata_3') }}\n    UNION ALL \n    select * from {{ source('staging_2024', '202409_citibike_tripdata_4') }}\n    UNION ALL \n    select * from {{ source('staging_2024', '202409_citibike_tripdata_5') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2024", "202409_citibike_tripdata_1"], ["staging_2024", "202409_citibike_tripdata_2"], ["staging_2024", "202409_citibike_tripdata_3"], ["staging_2024", "202409_citibike_tripdata_4"], ["staging_2024", "202409_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2024.202409_citibike_tripdata_1", "source.data_transform.staging_2024.202409_citibike_tripdata_2", "source.data_transform.staging_2024.202409_citibike_tripdata_3", "source.data_transform.staging_2024.202409_citibike_tripdata_4", "source.data_transform.staging_2024.202409_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.apr_2024": {"database": "dev", "schema": "main", "name": "apr_2024", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2024/apr_2024.sql", "original_file_path": "models/intermediate/yr_2024/apr_2024.sql", "unique_id": "model.data_transform.apr_2024", "fqn": ["data_transform", "intermediate", "yr_2024", "apr_2024"], "alias": "apr_2024", "checksum": {"name": "sha256", "checksum": "83d5405ac8a883dfb588ea41537c887e5af50aa6072a292b0a25825fcd233041"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2024/_yr_2024__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.77449, "relation_name": "\"dev\".\"main\".\"apr_2024\"", "raw_code": "with cte as (\nselect * from {{ source('staging_2024', '202404_citibike_tripdata') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2024", "202404_citibike_tripdata"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2024.202404_citibike_tripdata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.may_2024": {"database": "dev", "schema": "main", "name": "may_2024", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2024/may_2024.sql", "original_file_path": "models/intermediate/yr_2024/may_2024.sql", "unique_id": "model.data_transform.may_2024", "fqn": ["data_transform", "intermediate", "yr_2024", "may_2024"], "alias": "may_2024", "checksum": {"name": "sha256", "checksum": "e87b159c0f0babde6e6cfba2563d9e3c8d533896b756ffc651d42a3ed40a42c5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "`may_2024` and `june_2024` have several duplicate records (`ride_id` is repeated). All those records have a `month(started_at) = 5` and `month(ended_at) = 6`. This table has filtered for `month(started_at) = 5` and `month(ended_at) = 5`. This transformation is not necessary on other month-specific tables, as they do not contain duplicate records.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2024/_yr_2024__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.7758348, "relation_name": "\"dev\".\"main\".\"may_2024\"", "raw_code": "with cte as (\n    select * from {{ source('staging_2024', '202405_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2024', '202405_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2024', '202405_citibike_tripdata_3') }}\n    UNION ALL \n    select * from {{ source('staging_2024', '202405_citibike_tripdata_4') }}\n    UNION ALL \n    select * from {{ source('staging_2024', '202405_citibike_tripdata_5') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte\nwhere \n    month({{ format_date('started_at') }}) = 5 and\n    month({{ format_date('ended_at')}}) = 5", "language": "sql", "refs": [], "sources": [["staging_2024", "202405_citibike_tripdata_1"], ["staging_2024", "202405_citibike_tripdata_2"], ["staging_2024", "202405_citibike_tripdata_3"], ["staging_2024", "202405_citibike_tripdata_4"], ["staging_2024", "202405_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2024.202405_citibike_tripdata_1", "source.data_transform.staging_2024.202405_citibike_tripdata_2", "source.data_transform.staging_2024.202405_citibike_tripdata_3", "source.data_transform.staging_2024.202405_citibike_tripdata_4", "source.data_transform.staging_2024.202405_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.feb_2021": {"database": "dev", "schema": "main", "name": "feb_2021", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2021/feb_2021.sql", "original_file_path": "models/intermediate/yr_2021/feb_2021.sql", "unique_id": "model.data_transform.feb_2021", "fqn": ["data_transform", "intermediate", "yr_2021", "feb_2021"], "alias": "feb_2021", "checksum": {"name": "sha256", "checksum": "b5858d53b956456f10ad60fbf35f165beeecf9766d4a8f32d01aabd15b27b391"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2021/_yr_2021__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.89934, "relation_name": "\"dev\".\"main\".\"feb_2021\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2021', '202102_citibike_tripdata_1') }} \n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2021", "202102_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2021.202102_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.jun_2021": {"database": "dev", "schema": "main", "name": "jun_2021", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2021/jun_2021.sql", "original_file_path": "models/intermediate/yr_2021/jun_2021.sql", "unique_id": "model.data_transform.jun_2021", "fqn": ["data_transform", "intermediate", "yr_2021", "jun_2021"], "alias": "jun_2021", "checksum": {"name": "sha256", "checksum": "05921ec0b8b7987a186d6fd28a7aa6dfc1eb9c6a461a6287c7705c1bd1c7a2bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2021/_yr_2021__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.9048269, "relation_name": "\"dev\".\"main\".\"jun_2021\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2021', '202106_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2021', '202106_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2021', '202106_citibike_tripdata_3') }}\n    UNION ALL \n    select * from {{ source('staging_2021', '202106_citibike_tripdata_4') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2021", "202106_citibike_tripdata_1"], ["staging_2021", "202106_citibike_tripdata_2"], ["staging_2021", "202106_citibike_tripdata_3"], ["staging_2021", "202106_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2021.202106_citibike_tripdata_1", "source.data_transform.staging_2021.202106_citibike_tripdata_2", "source.data_transform.staging_2021.202106_citibike_tripdata_3", "source.data_transform.staging_2021.202106_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.oct_2021": {"database": "dev", "schema": "main", "name": "oct_2021", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2021/oct_2021.sql", "original_file_path": "models/intermediate/yr_2021/oct_2021.sql", "unique_id": "model.data_transform.oct_2021", "fqn": ["data_transform", "intermediate", "yr_2021", "oct_2021"], "alias": "oct_2021", "checksum": {"name": "sha256", "checksum": "f7f4ce7c3924c8a177ed40d1cd6caca0f47316d1d4f7ad7e8f29ebeca96d51e5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2021/_yr_2021__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.910073, "relation_name": "\"dev\".\"main\".\"oct_2021\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2021', '202110_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2021', '202110_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2021', '202110_citibike_tripdata_3') }}\n    UNION ALL \n    select * from {{ source('staging_2021', '202110_citibike_tripdata_4') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2021", "202110_citibike_tripdata_1"], ["staging_2021", "202110_citibike_tripdata_2"], ["staging_2021", "202110_citibike_tripdata_3"], ["staging_2021", "202110_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2021.202110_citibike_tripdata_1", "source.data_transform.staging_2021.202110_citibike_tripdata_2", "source.data_transform.staging_2021.202110_citibike_tripdata_3", "source.data_transform.staging_2021.202110_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.dec_2021": {"database": "dev", "schema": "main", "name": "dec_2021", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2021/dec_2021.sql", "original_file_path": "models/intermediate/yr_2021/dec_2021.sql", "unique_id": "model.data_transform.dec_2021", "fqn": ["data_transform", "intermediate", "yr_2021", "dec_2021"], "alias": "dec_2021", "checksum": {"name": "sha256", "checksum": "c2ae4dd72e16661b5a8d4c1b8544f66e290db6351bae2b6ae5725f32a459deb2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2021/_yr_2021__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.913224, "relation_name": "\"dev\".\"main\".\"dec_2021\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2021', '202112_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2021', '202112_citibike_tripdata_2') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2021", "202112_citibike_tripdata_1"], ["staging_2021", "202112_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2021.202112_citibike_tripdata_1", "source.data_transform.staging_2021.202112_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.aug_2021": {"database": "dev", "schema": "main", "name": "aug_2021", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2021/aug_2021.sql", "original_file_path": "models/intermediate/yr_2021/aug_2021.sql", "unique_id": "model.data_transform.aug_2021", "fqn": ["data_transform", "intermediate", "yr_2021", "aug_2021"], "alias": "aug_2021", "checksum": {"name": "sha256", "checksum": "4a7f26b60a0213c70f13f2cb01906bac9a2d92a71e889af16ab9a5909bb208a6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2021/_yr_2021__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.907426, "relation_name": "\"dev\".\"main\".\"aug_2021\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2021', '202108_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2021', '202108_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2021', '202108_citibike_tripdata_3') }}\n    UNION ALL \n    select * from {{ source('staging_2021', '202108_citibike_tripdata_4') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2021", "202108_citibike_tripdata_1"], ["staging_2021", "202108_citibike_tripdata_2"], ["staging_2021", "202108_citibike_tripdata_3"], ["staging_2021", "202108_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2021.202108_citibike_tripdata_1", "source.data_transform.staging_2021.202108_citibike_tripdata_2", "source.data_transform.staging_2021.202108_citibike_tripdata_3", "source.data_transform.staging_2021.202108_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.yr_2021": {"database": "dev", "schema": "main", "name": "yr_2021", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2021/yr_2021.sql", "original_file_path": "models/intermediate/yr_2021/yr_2021.sql", "unique_id": "model.data_transform.yr_2021", "fqn": ["data_transform", "intermediate", "yr_2021", "yr_2021"], "alias": "yr_2021", "checksum": {"name": "sha256", "checksum": "7502c80a418c5c627e3e9e0d84050679d6d7d6585242ec1d563081493f36fc49"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["year"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["year"], "description": "Combines data from all relevant month tables. For example `yr_2020` contains data from all tables matching `mmm_2020`. Year tables also use the macro `remove_unwanted_station_ids`. Read the macro documentation for more info.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2021/_yr_2021__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["year"]}, "created_at": 1743088110.91451, "relation_name": "\"dev\".\"main\".\"yr_2021\"", "raw_code": "with cte as (\n    select * from {{ref (\"jan_2021\")}}\n    UNION ALL\n    select * from {{ref (\"feb_2021\")}}\n    UNION ALL\n    select * from {{ref (\"mar_2021\")}}\n    UNION ALL\n    select * from {{ref (\"apr_2021\")}}\n    UNION ALL\n    select * from {{ref (\"may_2021\")}}\n    UNION ALL\n    select * from {{ref (\"jun_2021\")}}\n    UNION ALL\n    select * from {{ref (\"jul_2021\")}}\n    UNION ALL\n    select * from {{ref (\"aug_2021\")}}\n    UNION ALL\n    select * from {{ref (\"sep_2021\")}}\n    UNION ALL\n    select * from {{ref (\"oct_2021\")}}\n    UNION ALL\n    select * from {{ref (\"nov_2021\")}}\n    UNION ALL\n    select * from {{ref (\"dec_2021\")}}\n)\nselect * from cte\n{{ remove_unwanted_station_ids('start_station_id')}}", "language": "sql", "refs": [{"name": "jan_2021", "package": null, "version": null}, {"name": "feb_2021", "package": null, "version": null}, {"name": "mar_2021", "package": null, "version": null}, {"name": "apr_2021", "package": null, "version": null}, {"name": "may_2021", "package": null, "version": null}, {"name": "jun_2021", "package": null, "version": null}, {"name": "jul_2021", "package": null, "version": null}, {"name": "aug_2021", "package": null, "version": null}, {"name": "sep_2021", "package": null, "version": null}, {"name": "oct_2021", "package": null, "version": null}, {"name": "nov_2021", "package": null, "version": null}, {"name": "dec_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.remove_unwanted_station_ids"], "nodes": ["model.data_transform.jan_2021", "model.data_transform.feb_2021", "model.data_transform.mar_2021", "model.data_transform.apr_2021", "model.data_transform.may_2021", "model.data_transform.jun_2021", "model.data_transform.jul_2021", "model.data_transform.aug_2021", "model.data_transform.sep_2021", "model.data_transform.oct_2021", "model.data_transform.nov_2021", "model.data_transform.dec_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.jan_2021": {"database": "dev", "schema": "main", "name": "jan_2021", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2021/jan_2021.sql", "original_file_path": "models/intermediate/yr_2021/jan_2021.sql", "unique_id": "model.data_transform.jan_2021", "fqn": ["data_transform", "intermediate", "yr_2021", "jan_2021"], "alias": "jan_2021", "checksum": {"name": "sha256", "checksum": "5c16b33364ad7ec354bc6d1480ebb74a034ea964195069cd97eb8aed1e3ccef7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2021/_yr_2021__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.898014, "relation_name": "\"dev\".\"main\".\"jan_2021\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2021', '202101_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2021', '202101_citibike_tripdata_2') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2021", "202101_citibike_tripdata_1"], ["staging_2021", "202101_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2021.202101_citibike_tripdata_1", "source.data_transform.staging_2021.202101_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.nov_2021": {"database": "dev", "schema": "main", "name": "nov_2021", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2021/nov_2021.sql", "original_file_path": "models/intermediate/yr_2021/nov_2021.sql", "unique_id": "model.data_transform.nov_2021", "fqn": ["data_transform", "intermediate", "yr_2021", "nov_2021"], "alias": "nov_2021", "checksum": {"name": "sha256", "checksum": "be1ce1e9fc3a730cba7632f5560133023e5305f5dc88c68941daa27af22874be"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2021/_yr_2021__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.911368, "relation_name": "\"dev\".\"main\".\"nov_2021\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2021', '202111_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2021', '202111_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2021', '202111_citibike_tripdata_3') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2021", "202111_citibike_tripdata_1"], ["staging_2021", "202111_citibike_tripdata_2"], ["staging_2021", "202111_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2021.202111_citibike_tripdata_1", "source.data_transform.staging_2021.202111_citibike_tripdata_2", "source.data_transform.staging_2021.202111_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.sep_2021": {"database": "dev", "schema": "main", "name": "sep_2021", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2021/sep_2021.sql", "original_file_path": "models/intermediate/yr_2021/sep_2021.sql", "unique_id": "model.data_transform.sep_2021", "fqn": ["data_transform", "intermediate", "yr_2021", "sep_2021"], "alias": "sep_2021", "checksum": {"name": "sha256", "checksum": "dbe626ffac185268c9ebdbc79de8c40e6c844d358ca03328228857f06afd5626"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2021/_yr_2021__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.9087858, "relation_name": "\"dev\".\"main\".\"sep_2021\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2021', '202109_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2021', '202109_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2021', '202109_citibike_tripdata_3') }}\n    UNION ALL \n    select * from {{ source('staging_2021', '202109_citibike_tripdata_4') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2021", "202109_citibike_tripdata_1"], ["staging_2021", "202109_citibike_tripdata_2"], ["staging_2021", "202109_citibike_tripdata_3"], ["staging_2021", "202109_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2021.202109_citibike_tripdata_1", "source.data_transform.staging_2021.202109_citibike_tripdata_2", "source.data_transform.staging_2021.202109_citibike_tripdata_3", "source.data_transform.staging_2021.202109_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.apr_2021": {"database": "dev", "schema": "main", "name": "apr_2021", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2021/apr_2021.sql", "original_file_path": "models/intermediate/yr_2021/apr_2021.sql", "unique_id": "model.data_transform.apr_2021", "fqn": ["data_transform", "intermediate", "yr_2021", "apr_2021"], "alias": "apr_2021", "checksum": {"name": "sha256", "checksum": "0fba19988f5ad7d9b28ba87613f005f89ba6de6c3ad5ceffb65ad8f7da1eeece"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2021/_yr_2021__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.902165, "relation_name": "\"dev\".\"main\".\"apr_2021\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2021', '202104_citibike_tripdata_1') }} \n    UNION ALL\n    select * from \n    {{ source('staging_2021', '202104_citibike_tripdata_2') }} \n    UNION ALL\n    select * from \n    {{ source('staging_2021', '202104_citibike_tripdata_3') }} \n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2021", "202104_citibike_tripdata_1"], ["staging_2021", "202104_citibike_tripdata_2"], ["staging_2021", "202104_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2021.202104_citibike_tripdata_1", "source.data_transform.staging_2021.202104_citibike_tripdata_2", "source.data_transform.staging_2021.202104_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.may_2021": {"database": "dev", "schema": "main", "name": "may_2021", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2021/may_2021.sql", "original_file_path": "models/intermediate/yr_2021/may_2021.sql", "unique_id": "model.data_transform.may_2021", "fqn": ["data_transform", "intermediate", "yr_2021", "may_2021"], "alias": "may_2021", "checksum": {"name": "sha256", "checksum": "619bb18826f716c37eacf1b5c5abc1a767d2c415c5eba2f27fa67f3db3b68956"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2021/_yr_2021__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.903463, "relation_name": "\"dev\".\"main\".\"may_2021\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2021', '202105_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2021', '202105_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2021', '202105_citibike_tripdata_3') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2021", "202105_citibike_tripdata_1"], ["staging_2021", "202105_citibike_tripdata_2"], ["staging_2021", "202105_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2021.202105_citibike_tripdata_1", "source.data_transform.staging_2021.202105_citibike_tripdata_2", "source.data_transform.staging_2021.202105_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.jul_2021": {"database": "dev", "schema": "main", "name": "jul_2021", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2021/jul_2021.sql", "original_file_path": "models/intermediate/yr_2021/jul_2021.sql", "unique_id": "model.data_transform.jul_2021", "fqn": ["data_transform", "intermediate", "yr_2021", "jul_2021"], "alias": "jul_2021", "checksum": {"name": "sha256", "checksum": "a75d516113d629bfe688ed4e242e9dfc5b1b4ee0ba06d4e8475606b3e7ec6912"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2021/_yr_2021__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.906128, "relation_name": "\"dev\".\"main\".\"jul_2021\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2021', '202107_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2021', '202107_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2021', '202107_citibike_tripdata_3') }}\n    UNION ALL \n    select * from {{ source('staging_2021', '202107_citibike_tripdata_4') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2021", "202107_citibike_tripdata_1"], ["staging_2021", "202107_citibike_tripdata_2"], ["staging_2021", "202107_citibike_tripdata_3"], ["staging_2021", "202107_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2021.202107_citibike_tripdata_1", "source.data_transform.staging_2021.202107_citibike_tripdata_2", "source.data_transform.staging_2021.202107_citibike_tripdata_3", "source.data_transform.staging_2021.202107_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.mar_2021": {"database": "dev", "schema": "main", "name": "mar_2021", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2021/mar_2021.sql", "original_file_path": "models/intermediate/yr_2021/mar_2021.sql", "unique_id": "model.data_transform.mar_2021", "fqn": ["data_transform", "intermediate", "yr_2021", "mar_2021"], "alias": "mar_2021", "checksum": {"name": "sha256", "checksum": "f535a4659eef606e82ad2766d376b9196497d491c21c891837b588452f29c40a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2021/_yr_2021__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088110.900852, "relation_name": "\"dev\".\"main\".\"mar_2021\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2021', '202103_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2021', '202103_citibike_tripdata_2') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2021", "202103_citibike_tripdata_1"], ["staging_2021", "202103_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2021.202103_citibike_tripdata_1", "source.data_transform.staging_2021.202103_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.feb_2020": {"database": "dev", "schema": "main", "name": "feb_2020", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2020/feb_2020.sql", "original_file_path": "models/intermediate/yr_2020/feb_2020.sql", "unique_id": "model.data_transform.feb_2020", "fqn": ["data_transform", "intermediate", "yr_2020", "feb_2020"], "alias": "feb_2020", "checksum": {"name": "sha256", "checksum": "1a4955fb39999d7c169598d8b45a15d00720ae1633a96ac20f93c2cf97cfc9dc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2020/_yr_2020__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088111.0270631, "relation_name": "\"dev\".\"main\".\"feb_2020\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2020', '202002_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2020', '202002_citibike_tripdata_2') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2020", "202002_citibike_tripdata_1"], ["staging_2020", "202002_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2020.202002_citibike_tripdata_1", "source.data_transform.staging_2020.202002_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.jun_2020": {"database": "dev", "schema": "main", "name": "jun_2020", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2020/jun_2020.sql", "original_file_path": "models/intermediate/yr_2020/jun_2020.sql", "unique_id": "model.data_transform.jun_2020", "fqn": ["data_transform", "intermediate", "yr_2020", "jun_2020"], "alias": "jun_2020", "checksum": {"name": "sha256", "checksum": "206cc62f61b6035e7688103e62996de3156b82ebecdcc32ec7c94d4e169ffb02"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2020/_yr_2020__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088111.0327308, "relation_name": "\"dev\".\"main\".\"jun_2020\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2020', '202006_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2020', '202006_citibike_tripdata_2') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2020", "202006_citibike_tripdata_1"], ["staging_2020", "202006_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2020.202006_citibike_tripdata_1", "source.data_transform.staging_2020.202006_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.oct_2020": {"database": "dev", "schema": "main", "name": "oct_2020", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2020/oct_2020.sql", "original_file_path": "models/intermediate/yr_2020/oct_2020.sql", "unique_id": "model.data_transform.oct_2020", "fqn": ["data_transform", "intermediate", "yr_2020", "oct_2020"], "alias": "oct_2020", "checksum": {"name": "sha256", "checksum": "da481d2eb7920f7ac5b9f17f185e3e589ece35f945f082bd9a2aacef985c4368"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2020/_yr_2020__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088111.038023, "relation_name": "\"dev\".\"main\".\"oct_2020\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2020', '202010_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2020', '202010_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2020', '202010_citibike_tripdata_3') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2020", "202010_citibike_tripdata_1"], ["staging_2020", "202010_citibike_tripdata_2"], ["staging_2020", "202010_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2020.202010_citibike_tripdata_1", "source.data_transform.staging_2020.202010_citibike_tripdata_2", "source.data_transform.staging_2020.202010_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.aug_2020": {"database": "dev", "schema": "main", "name": "aug_2020", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2020/aug_2020.sql", "original_file_path": "models/intermediate/yr_2020/aug_2020.sql", "unique_id": "model.data_transform.aug_2020", "fqn": ["data_transform", "intermediate", "yr_2020", "aug_2020"], "alias": "aug_2020", "checksum": {"name": "sha256", "checksum": "ede06d872c04e581cb07e3d2e7e38e99094c817141211281ae41d7684c76235a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2020/_yr_2020__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088111.035344, "relation_name": "\"dev\".\"main\".\"aug_2020\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2020', '202008_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2020', '202008_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2020', '202008_citibike_tripdata_3') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2020", "202008_citibike_tripdata_1"], ["staging_2020", "202008_citibike_tripdata_2"], ["staging_2020", "202008_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2020.202008_citibike_tripdata_1", "source.data_transform.staging_2020.202008_citibike_tripdata_2", "source.data_transform.staging_2020.202008_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.dec_2020": {"database": "dev", "schema": "main", "name": "dec_2020", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2020/dec_2020.sql", "original_file_path": "models/intermediate/yr_2020/dec_2020.sql", "unique_id": "model.data_transform.dec_2020", "fqn": ["data_transform", "intermediate", "yr_2020", "dec_2020"], "alias": "dec_2020", "checksum": {"name": "sha256", "checksum": "a536f674f6070df8e1a326bbc7efdaa59d053e7a5ac3fa8ffeddfe87eea22fd9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2020/_yr_2020__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088111.040707, "relation_name": "\"dev\".\"main\".\"dec_2020\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2020', '202012_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2020', '202012_citibike_tripdata_2') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2020", "202012_citibike_tripdata_1"], ["staging_2020", "202012_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2020.202012_citibike_tripdata_1", "source.data_transform.staging_2020.202012_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.yr_2020": {"database": "dev", "schema": "main", "name": "yr_2020", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2020/yr_2020.sql", "original_file_path": "models/intermediate/yr_2020/yr_2020.sql", "unique_id": "model.data_transform.yr_2020", "fqn": ["data_transform", "intermediate", "yr_2020", "yr_2020"], "alias": "yr_2020", "checksum": {"name": "sha256", "checksum": "a89da01249d62fd3ab3df83e01f4ff426bd8e8b226b1ba549be1fa3faece6296"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["year"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["year"], "description": "Combines data from all relevant month tables. For example `yr_2020` contains data from all tables matching `mmm_2020`. Year tables also use the macro `remove_unwanted_station_ids`. Read the macro documentation for more info.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2020/_yr_2020__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["year"]}, "created_at": 1743088111.041996, "relation_name": "\"dev\".\"main\".\"yr_2020\"", "raw_code": "with cte as (\n    select * from {{ref (\"jan_2020\")}}\n    UNION ALL\n    select * from {{ref (\"feb_2020\")}}\n    UNION ALL\n    select * from {{ref (\"mar_2020\")}}\n    UNION ALL\n    select * from {{ref (\"apr_2020\")}}\n    UNION ALL\n    select * from {{ref (\"may_2020\")}}\n    UNION ALL\n    select * from {{ref (\"jun_2020\")}}\n    UNION ALL\n    select * from {{ref (\"jul_2020\")}}\n    UNION ALL\n    select * from {{ref (\"aug_2020\")}}\n    UNION ALL\n    select * from {{ref (\"sep_2020\")}}\n    UNION ALL\n    select * from {{ref (\"oct_2020\")}}\n    UNION ALL\n    select * from {{ref (\"nov_2020\")}}\n    UNION ALL\n    select * from {{ref (\"dec_2020\")}}\n)\nselect * from cte\n{{ remove_unwanted_station_ids('start_station_id')}}", "language": "sql", "refs": [{"name": "jan_2020", "package": null, "version": null}, {"name": "feb_2020", "package": null, "version": null}, {"name": "mar_2020", "package": null, "version": null}, {"name": "apr_2020", "package": null, "version": null}, {"name": "may_2020", "package": null, "version": null}, {"name": "jun_2020", "package": null, "version": null}, {"name": "jul_2020", "package": null, "version": null}, {"name": "aug_2020", "package": null, "version": null}, {"name": "sep_2020", "package": null, "version": null}, {"name": "oct_2020", "package": null, "version": null}, {"name": "nov_2020", "package": null, "version": null}, {"name": "dec_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.remove_unwanted_station_ids"], "nodes": ["model.data_transform.jan_2020", "model.data_transform.feb_2020", "model.data_transform.mar_2020", "model.data_transform.apr_2020", "model.data_transform.may_2020", "model.data_transform.jun_2020", "model.data_transform.jul_2020", "model.data_transform.aug_2020", "model.data_transform.sep_2020", "model.data_transform.oct_2020", "model.data_transform.nov_2020", "model.data_transform.dec_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.jan_2020": {"database": "dev", "schema": "main", "name": "jan_2020", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2020/jan_2020.sql", "original_file_path": "models/intermediate/yr_2020/jan_2020.sql", "unique_id": "model.data_transform.jan_2020", "fqn": ["data_transform", "intermediate", "yr_2020", "jan_2020"], "alias": "jan_2020", "checksum": {"name": "sha256", "checksum": "24ca426ef02bc75bf42f53a41be8073c2af61cd1241fe3a2b0a6b46e77c30246"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2020/_yr_2020__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088111.025461, "relation_name": "\"dev\".\"main\".\"jan_2020\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2020', '202001_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2020', '202001_citibike_tripdata_2') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2020", "202001_citibike_tripdata_1"], ["staging_2020", "202001_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2020.202001_citibike_tripdata_1", "source.data_transform.staging_2020.202001_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.nov_2020": {"database": "dev", "schema": "main", "name": "nov_2020", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2020/nov_2020.sql", "original_file_path": "models/intermediate/yr_2020/nov_2020.sql", "unique_id": "model.data_transform.nov_2020", "fqn": ["data_transform", "intermediate", "yr_2020", "nov_2020"], "alias": "nov_2020", "checksum": {"name": "sha256", "checksum": "f4243861a27cb3385183dc18c6d88950180f30ece8245f81e42c2f7d27f6df1d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2020/_yr_2020__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088111.039329, "relation_name": "\"dev\".\"main\".\"nov_2020\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2020', '202011_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2020', '202011_citibike_tripdata_2') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2020", "202011_citibike_tripdata_1"], ["staging_2020", "202011_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2020.202011_citibike_tripdata_1", "source.data_transform.staging_2020.202011_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.may_2020": {"database": "dev", "schema": "main", "name": "may_2020", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2020/may_2020.sql", "original_file_path": "models/intermediate/yr_2020/may_2020.sql", "unique_id": "model.data_transform.may_2020", "fqn": ["data_transform", "intermediate", "yr_2020", "may_2020"], "alias": "may_2020", "checksum": {"name": "sha256", "checksum": "535a41487def81f8923193efffab94a8d99e3257b34a7b277d4c9343e0ec750b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2020/_yr_2020__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088111.0313358, "relation_name": "\"dev\".\"main\".\"may_2020\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2020', '202005_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2020', '202005_citibike_tripdata_2') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2020", "202005_citibike_tripdata_1"], ["staging_2020", "202005_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2020.202005_citibike_tripdata_1", "source.data_transform.staging_2020.202005_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.apr_2020": {"database": "dev", "schema": "main", "name": "apr_2020", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2020/apr_2020.sql", "original_file_path": "models/intermediate/yr_2020/apr_2020.sql", "unique_id": "model.data_transform.apr_2020", "fqn": ["data_transform", "intermediate", "yr_2020", "apr_2020"], "alias": "apr_2020", "checksum": {"name": "sha256", "checksum": "95eb274bfe6db6c769b54bc7c6be7a0110ad46c4d88edb8f1b86d82773b9fd76"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2020/_yr_2020__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088111.030005, "relation_name": "\"dev\".\"main\".\"apr_2020\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2020', '202004_citibike_tripdata_1') }} \n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2020", "202004_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2020.202004_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.sep_2020": {"database": "dev", "schema": "main", "name": "sep_2020", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2020/sep_2020.sql", "original_file_path": "models/intermediate/yr_2020/sep_2020.sql", "unique_id": "model.data_transform.sep_2020", "fqn": ["data_transform", "intermediate", "yr_2020", "sep_2020"], "alias": "sep_2020", "checksum": {"name": "sha256", "checksum": "da032dc931f23ad506538a934621eb68158e1cfa084c8965413ac9051bec6454"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2020/_yr_2020__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088111.036716, "relation_name": "\"dev\".\"main\".\"sep_2020\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2020', '202009_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2020', '202009_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2020', '202009_citibike_tripdata_3') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2020", "202009_citibike_tripdata_1"], ["staging_2020", "202009_citibike_tripdata_2"], ["staging_2020", "202009_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2020.202009_citibike_tripdata_1", "source.data_transform.staging_2020.202009_citibike_tripdata_2", "source.data_transform.staging_2020.202009_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.mar_2020": {"database": "dev", "schema": "main", "name": "mar_2020", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2020/mar_2020.sql", "original_file_path": "models/intermediate/yr_2020/mar_2020.sql", "unique_id": "model.data_transform.mar_2020", "fqn": ["data_transform", "intermediate", "yr_2020", "mar_2020"], "alias": "mar_2020", "checksum": {"name": "sha256", "checksum": "9b38a631ae841855eaa0501ed1dba7dd9f4568a85d7462c01512720bb98f5dea"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2020/_yr_2020__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088111.0286028, "relation_name": "\"dev\".\"main\".\"mar_2020\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2020', '202003_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2020', '202003_citibike_tripdata_2') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2020", "202003_citibike_tripdata_1"], ["staging_2020", "202003_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2020.202003_citibike_tripdata_1", "source.data_transform.staging_2020.202003_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "model.data_transform.jul_2020": {"database": "dev", "schema": "main", "name": "jul_2020", "resource_type": "model", "package_name": "data_transform", "path": "intermediate/yr_2020/jul_2020.sql", "original_file_path": "models/intermediate/yr_2020/jul_2020.sql", "unique_id": "model.data_transform.jul_2020", "fqn": ["data_transform", "intermediate", "yr_2020", "jul_2020"], "alias": "jul_2020", "checksum": {"name": "sha256", "checksum": "7a9538ce2c94bb7113121e728db9c79595b907f5e7209e9d1952943833e6c542"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["month"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["month"], "description": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://models/intermediate/yr_2020/_yr_2020__schema.yml", "build_path": null, "unrendered_config": {"materialized": "view", "tags": ["month"]}, "created_at": 1743088111.034038, "relation_name": "\"dev\".\"main\".\"jul_2020\"", "raw_code": "with cte as (\n    select * from \n    {{ source('staging_2020', '202007_citibike_tripdata_1') }} \n    UNION ALL \n    select * from {{ source('staging_2020', '202007_citibike_tripdata_2') }}\n    UNION ALL \n    select * from {{ source('staging_2020', '202007_citibike_tripdata_3') }}\n)\nselect\n    ride_id,\n    rideable_type,\n    {{ format_date('started_at') }} as started_at,\n    {{ format_date('ended_at') }} as ended_at,\n    start_station_name,\n    start_station_id,\n    end_station_name,\n    end_station_id,\n    start_lat,\n    start_lng,\n    end_lat,\n    end_lng, \n    member_casual\nfrom cte", "language": "sql", "refs": [], "sources": [["staging_2020", "202007_citibike_tripdata_1"], ["staging_2020", "202007_citibike_tripdata_2"], ["staging_2020", "202007_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.data_transform.format_date"], "nodes": ["source.data_transform.staging_2020.202007_citibike_tripdata_1", "source.data_transform.staging_2020.202007_citibike_tripdata_2", "source.data_transform.staging_2020.202007_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ride_id"], "time_spine": null}, "test.data_transform.unique_fct_citibike_rides_ride_id.283318838a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_fct_citibike_rides_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_fct_citibike_rides_ride_id.sql", "original_file_path": "models/marts/_marts__schema.yml", "unique_id": "test.data_transform.unique_fct_citibike_rides_ride_id.283318838a", "fqn": ["data_transform", "marts", "unique_fct_citibike_rides_ride_id"], "alias": "unique_fct_citibike_rides_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.3991868, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_citibike_rides", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.fct_citibike_rides"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.fct_citibike_rides", "attached_node": "model.data_transform.fct_citibike_rides", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('fct_citibike_rides')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_fct_citibike_rides_rideable_type__electric_bike__classic_bike.a470a25f4b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_fct_citibike_rides_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_fct_citibike_r_cbfebca742fee6fa4045f3aa7c7c637d.sql", "original_file_path": "models/marts/_marts__schema.yml", "unique_id": "test.data_transform.accepted_values_fct_citibike_rides_rideable_type__electric_bike__classic_bike.a470a25f4b", "fqn": ["data_transform", "marts", "accepted_values_fct_citibike_rides_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_fct_citibike_r_cbfebca742fee6fa4045f3aa7c7c637d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fct_citibike_r_cbfebca742fee6fa4045f3aa7c7c637d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_fct_citibike_r_cbfebca742fee6fa4045f3aa7c7c637d"}, "created_at": 1743088110.404877, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fct_citibike_r_cbfebca742fee6fa4045f3aa7c7c637d\") }}", "language": "sql", "refs": [{"name": "fct_citibike_rides", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.fct_citibike_rides"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.fct_citibike_rides", "attached_node": "model.data_transform.fct_citibike_rides", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('fct_citibike_rides')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_fct_citibike_rides_member_casual__member__casual.17b1cd2173": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_fct_citibike_rides_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_fct_citibike_r_c8b109ba8fbe1aa79c16f193585c933b.sql", "original_file_path": "models/marts/_marts__schema.yml", "unique_id": "test.data_transform.accepted_values_fct_citibike_rides_member_casual__member__casual.17b1cd2173", "fqn": ["data_transform", "marts", "accepted_values_fct_citibike_rides_member_casual__member__casual"], "alias": "accepted_values_fct_citibike_r_c8b109ba8fbe1aa79c16f193585c933b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fct_citibike_r_c8b109ba8fbe1aa79c16f193585c933b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_fct_citibike_r_c8b109ba8fbe1aa79c16f193585c933b"}, "created_at": 1743088110.4124238, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fct_citibike_r_c8b109ba8fbe1aa79c16f193585c933b\") }}", "language": "sql", "refs": [{"name": "fct_citibike_rides", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.fct_citibike_rides"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.fct_citibike_rides", "attached_node": "model.data_transform.fct_citibike_rides", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('fct_citibike_rides')) }}"}, "namespace": null}}, "test.data_transform.unique_combined_years_ride_id.183b32f269": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_combined_years_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_combined_years_ride_id.sql", "original_file_path": "models/intermediate/combined_years/_combined_years__schema.yml", "unique_id": "test.data_transform.unique_combined_years_ride_id.183b32f269", "fqn": ["data_transform", "intermediate", "combined_years", "unique_combined_years_ride_id"], "alias": "unique_combined_years_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.416668, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "combined_years", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.combined_years"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.combined_years", "attached_node": "model.data_transform.combined_years", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('combined_years')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_combined_years_rideable_type__electric_bike__classic_bike.f71ae629f9": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_combined_years_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_combined_years_4ccdc9d0c6069662fc6849a3820c0e5d.sql", "original_file_path": "models/intermediate/combined_years/_combined_years__schema.yml", "unique_id": "test.data_transform.accepted_values_combined_years_rideable_type__electric_bike__classic_bike.f71ae629f9", "fqn": ["data_transform", "intermediate", "combined_years", "accepted_values_combined_years_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_combined_years_4ccdc9d0c6069662fc6849a3820c0e5d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_combined_years_4ccdc9d0c6069662fc6849a3820c0e5d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_combined_years_4ccdc9d0c6069662fc6849a3820c0e5d"}, "created_at": 1743088110.417771, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_combined_years_4ccdc9d0c6069662fc6849a3820c0e5d\") }}", "language": "sql", "refs": [{"name": "combined_years", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.combined_years"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.combined_years", "attached_node": "model.data_transform.combined_years", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('combined_years')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_combined_years_member_casual__member__casual.3562887647": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_combined_years_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_combined_years_member_casual__member__casual.sql", "original_file_path": "models/intermediate/combined_years/_combined_years__schema.yml", "unique_id": "test.data_transform.accepted_values_combined_years_member_casual__member__casual.3562887647", "fqn": ["data_transform", "intermediate", "combined_years", "accepted_values_combined_years_member_casual__member__casual"], "alias": "accepted_values_combined_years_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.420392, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "combined_years", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.combined_years"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.combined_years", "attached_node": "model.data_transform.combined_years", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('combined_years')) }}"}, "namespace": null}}, "test.data_transform.unique_jan_2025_ride_id.a6afb1426b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_jan_2025_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_jan_2025_ride_id.sql", "original_file_path": "models/intermediate/yr_2025/_yr_2025__schema.yml", "unique_id": "test.data_transform.unique_jan_2025_ride_id.a6afb1426b", "fqn": ["data_transform", "intermediate", "yr_2025", "unique_jan_2025_ride_id"], "alias": "unique_jan_2025_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.427089, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jan_2025", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.jan_2025"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.jan_2025", "attached_node": "model.data_transform.jan_2025", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('jan_2025')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jan_2025_rideable_type__electric_bike__classic_bike.dd88220125": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jan_2025_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jan_2025_987ef3548fd8d7ed0788f84a4ce365c3.sql", "original_file_path": "models/intermediate/yr_2025/_yr_2025__schema.yml", "unique_id": "test.data_transform.accepted_values_jan_2025_rideable_type__electric_bike__classic_bike.dd88220125", "fqn": ["data_transform", "intermediate", "yr_2025", "accepted_values_jan_2025_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_jan_2025_987ef3548fd8d7ed0788f84a4ce365c3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_jan_2025_987ef3548fd8d7ed0788f84a4ce365c3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_jan_2025_987ef3548fd8d7ed0788f84a4ce365c3"}, "created_at": 1743088110.4280949, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_jan_2025_987ef3548fd8d7ed0788f84a4ce365c3\") }}", "language": "sql", "refs": [{"name": "jan_2025", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jan_2025"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.jan_2025", "attached_node": "model.data_transform.jan_2025", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('jan_2025')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jan_2025_member_casual__member__casual.0028b86617": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jan_2025_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jan_2025_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2025/_yr_2025__schema.yml", "unique_id": "test.data_transform.accepted_values_jan_2025_member_casual__member__casual.0028b86617", "fqn": ["data_transform", "intermediate", "yr_2025", "accepted_values_jan_2025_member_casual__member__casual"], "alias": "accepted_values_jan_2025_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.430801, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jan_2025", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jan_2025"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.jan_2025", "attached_node": "model.data_transform.jan_2025", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('jan_2025')) }}"}, "namespace": null}}, "test.data_transform.validate_month_jan_2025_ended_at__1__started_at.885e570385": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_jan_2025_ended_at__1__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_jan_2025_ended_at__1__started_at.sql", "original_file_path": "models/intermediate/yr_2025/_yr_2025__schema.yml", "unique_id": "test.data_transform.validate_month_jan_2025_ended_at__1__started_at.885e570385", "fqn": ["data_transform", "intermediate", "yr_2025", "validate_month_jan_2025_ended_at__1__started_at"], "alias": "validate_month_jan_2025_ended_at__1__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.4331279, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jan_2025", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jan_2025"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.jan_2025", "attached_node": "model.data_transform.jan_2025", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 1, "model": "{{ get_where_subquery(ref('jan_2025')) }}"}, "namespace": null}}, "test.data_transform.unique_feb_2025_ride_id.07deac57cb": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_feb_2025_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_feb_2025_ride_id.sql", "original_file_path": "models/intermediate/yr_2025/_yr_2025__schema.yml", "unique_id": "test.data_transform.unique_feb_2025_ride_id.07deac57cb", "fqn": ["data_transform", "intermediate", "yr_2025", "unique_feb_2025_ride_id"], "alias": "unique_feb_2025_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.4355252, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "feb_2025", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.feb_2025"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.feb_2025", "attached_node": "model.data_transform.feb_2025", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('feb_2025')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_feb_2025_rideable_type__electric_bike__classic_bike.ac52a64a31": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_feb_2025_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_feb_2025_fcdabc0763f9a86a009163f382002a37.sql", "original_file_path": "models/intermediate/yr_2025/_yr_2025__schema.yml", "unique_id": "test.data_transform.accepted_values_feb_2025_rideable_type__electric_bike__classic_bike.ac52a64a31", "fqn": ["data_transform", "intermediate", "yr_2025", "accepted_values_feb_2025_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_feb_2025_fcdabc0763f9a86a009163f382002a37", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_feb_2025_fcdabc0763f9a86a009163f382002a37", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_feb_2025_fcdabc0763f9a86a009163f382002a37"}, "created_at": 1743088110.436548, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_feb_2025_fcdabc0763f9a86a009163f382002a37\") }}", "language": "sql", "refs": [{"name": "feb_2025", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.feb_2025"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.feb_2025", "attached_node": "model.data_transform.feb_2025", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('feb_2025')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_feb_2025_member_casual__member__casual.586c01d656": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_feb_2025_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_feb_2025_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2025/_yr_2025__schema.yml", "unique_id": "test.data_transform.accepted_values_feb_2025_member_casual__member__casual.586c01d656", "fqn": ["data_transform", "intermediate", "yr_2025", "accepted_values_feb_2025_member_casual__member__casual"], "alias": "accepted_values_feb_2025_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.439132, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "feb_2025", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.feb_2025"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.feb_2025", "attached_node": "model.data_transform.feb_2025", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('feb_2025')) }}"}, "namespace": null}}, "test.data_transform.validate_month_feb_2025_ended_at__2__started_at.01dbad3b21": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_feb_2025_ended_at__2__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_feb_2025_ended_at__2__started_at.sql", "original_file_path": "models/intermediate/yr_2025/_yr_2025__schema.yml", "unique_id": "test.data_transform.validate_month_feb_2025_ended_at__2__started_at.01dbad3b21", "fqn": ["data_transform", "intermediate", "yr_2025", "validate_month_feb_2025_ended_at__2__started_at"], "alias": "validate_month_feb_2025_ended_at__2__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.4414442, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "feb_2025", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.feb_2025"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.feb_2025", "attached_node": "model.data_transform.feb_2025", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 2, "model": "{{ get_where_subquery(ref('feb_2025')) }}"}, "namespace": null}}, "test.data_transform.unique_yr_2025_ride_id.1093d6c21c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_yr_2025_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_yr_2025_ride_id.sql", "original_file_path": "models/intermediate/yr_2025/_yr_2025__schema.yml", "unique_id": "test.data_transform.unique_yr_2025_ride_id.1093d6c21c", "fqn": ["data_transform", "intermediate", "yr_2025", "unique_yr_2025_ride_id"], "alias": "unique_yr_2025_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.443824, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "yr_2025", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.yr_2025"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.yr_2025", "attached_node": "model.data_transform.yr_2025", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('yr_2025')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_yr_2025_rideable_type__electric_bike__classic_bike.fcc9be54c2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_yr_2025_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_yr_2025_a9741e278f169c94a9953e61ce39b16b.sql", "original_file_path": "models/intermediate/yr_2025/_yr_2025__schema.yml", "unique_id": "test.data_transform.accepted_values_yr_2025_rideable_type__electric_bike__classic_bike.fcc9be54c2", "fqn": ["data_transform", "intermediate", "yr_2025", "accepted_values_yr_2025_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_yr_2025_a9741e278f169c94a9953e61ce39b16b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_yr_2025_a9741e278f169c94a9953e61ce39b16b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_yr_2025_a9741e278f169c94a9953e61ce39b16b"}, "created_at": 1743088110.4448278, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_yr_2025_a9741e278f169c94a9953e61ce39b16b\") }}", "language": "sql", "refs": [{"name": "yr_2025", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.yr_2025"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.yr_2025", "attached_node": "model.data_transform.yr_2025", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('yr_2025')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_yr_2025_member_casual__member__casual.1a2ccdae22": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_yr_2025_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_yr_2025_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2025/_yr_2025__schema.yml", "unique_id": "test.data_transform.accepted_values_yr_2025_member_casual__member__casual.1a2ccdae22", "fqn": ["data_transform", "intermediate", "yr_2025", "accepted_values_yr_2025_member_casual__member__casual"], "alias": "accepted_values_yr_2025_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.447424, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "yr_2025", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.yr_2025"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.yr_2025", "attached_node": "model.data_transform.yr_2025", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('yr_2025')) }}"}, "namespace": null}}, "test.data_transform.unique_jan_2022_ride_id.1e0255a09d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_jan_2022_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_jan_2022_ride_id.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.unique_jan_2022_ride_id.1e0255a09d", "fqn": ["data_transform", "intermediate", "yr_2022", "unique_jan_2022_ride_id"], "alias": "unique_jan_2022_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.4676569, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jan_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.jan_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.jan_2022", "attached_node": "model.data_transform.jan_2022", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('jan_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jan_2022_rideable_type__electric_bike__classic_bike.a3817d042e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jan_2022_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jan_2022_654408c3f09f30c7dbb8cb3a91ca0101.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_jan_2022_rideable_type__electric_bike__classic_bike.a3817d042e", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_jan_2022_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_jan_2022_654408c3f09f30c7dbb8cb3a91ca0101", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_jan_2022_654408c3f09f30c7dbb8cb3a91ca0101", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_jan_2022_654408c3f09f30c7dbb8cb3a91ca0101"}, "created_at": 1743088110.468692, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_jan_2022_654408c3f09f30c7dbb8cb3a91ca0101\") }}", "language": "sql", "refs": [{"name": "jan_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jan_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.jan_2022", "attached_node": "model.data_transform.jan_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('jan_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jan_2022_member_casual__member__casual.16e8af418c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jan_2022_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jan_2022_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_jan_2022_member_casual__member__casual.16e8af418c", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_jan_2022_member_casual__member__casual"], "alias": "accepted_values_jan_2022_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.471324, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jan_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jan_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.jan_2022", "attached_node": "model.data_transform.jan_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('jan_2022')) }}"}, "namespace": null}}, "test.data_transform.validate_month_jan_2022_ended_at__1__started_at.dd8cbfc979": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_jan_2022_ended_at__1__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_jan_2022_ended_at__1__started_at.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.validate_month_jan_2022_ended_at__1__started_at.dd8cbfc979", "fqn": ["data_transform", "intermediate", "yr_2022", "validate_month_jan_2022_ended_at__1__started_at"], "alias": "validate_month_jan_2022_ended_at__1__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.473814, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jan_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jan_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.jan_2022", "attached_node": "model.data_transform.jan_2022", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 1, "model": "{{ get_where_subquery(ref('jan_2022')) }}"}, "namespace": null}}, "test.data_transform.unique_feb_2022_ride_id.36575471c4": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_feb_2022_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_feb_2022_ride_id.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.unique_feb_2022_ride_id.36575471c4", "fqn": ["data_transform", "intermediate", "yr_2022", "unique_feb_2022_ride_id"], "alias": "unique_feb_2022_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.4760818, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "feb_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.feb_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.feb_2022", "attached_node": "model.data_transform.feb_2022", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('feb_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_feb_2022_rideable_type__electric_bike__classic_bike.f8458ca3e7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_feb_2022_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_feb_2022_d3fc15b2d91bbeffa598afaecb4dfad7.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_feb_2022_rideable_type__electric_bike__classic_bike.f8458ca3e7", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_feb_2022_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_feb_2022_d3fc15b2d91bbeffa598afaecb4dfad7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_feb_2022_d3fc15b2d91bbeffa598afaecb4dfad7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_feb_2022_d3fc15b2d91bbeffa598afaecb4dfad7"}, "created_at": 1743088110.477244, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_feb_2022_d3fc15b2d91bbeffa598afaecb4dfad7\") }}", "language": "sql", "refs": [{"name": "feb_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.feb_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.feb_2022", "attached_node": "model.data_transform.feb_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('feb_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_feb_2022_member_casual__member__casual.5f65f69eb2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_feb_2022_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_feb_2022_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_feb_2022_member_casual__member__casual.5f65f69eb2", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_feb_2022_member_casual__member__casual"], "alias": "accepted_values_feb_2022_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.4797099, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "feb_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.feb_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.feb_2022", "attached_node": "model.data_transform.feb_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('feb_2022')) }}"}, "namespace": null}}, "test.data_transform.validate_month_feb_2022_ended_at__2__started_at.ceaf7113a8": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_feb_2022_ended_at__2__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_feb_2022_ended_at__2__started_at.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.validate_month_feb_2022_ended_at__2__started_at.ceaf7113a8", "fqn": ["data_transform", "intermediate", "yr_2022", "validate_month_feb_2022_ended_at__2__started_at"], "alias": "validate_month_feb_2022_ended_at__2__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.482162, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "feb_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.feb_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.feb_2022", "attached_node": "model.data_transform.feb_2022", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 2, "model": "{{ get_where_subquery(ref('feb_2022')) }}"}, "namespace": null}}, "test.data_transform.unique_mar_2022_ride_id.21df8e8ac2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_mar_2022_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_mar_2022_ride_id.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.unique_mar_2022_ride_id.21df8e8ac2", "fqn": ["data_transform", "intermediate", "yr_2022", "unique_mar_2022_ride_id"], "alias": "unique_mar_2022_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.4864562, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mar_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.mar_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.mar_2022", "attached_node": "model.data_transform.mar_2022", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('mar_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_mar_2022_rideable_type__electric_bike__classic_bike.0837a03467": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_mar_2022_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_mar_2022_c9e7013fb742fa86d806e310eae2c215.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_mar_2022_rideable_type__electric_bike__classic_bike.0837a03467", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_mar_2022_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_mar_2022_c9e7013fb742fa86d806e310eae2c215", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_mar_2022_c9e7013fb742fa86d806e310eae2c215", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_mar_2022_c9e7013fb742fa86d806e310eae2c215"}, "created_at": 1743088110.487675, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_mar_2022_c9e7013fb742fa86d806e310eae2c215\") }}", "language": "sql", "refs": [{"name": "mar_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.mar_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.mar_2022", "attached_node": "model.data_transform.mar_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('mar_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_mar_2022_member_casual__member__casual.b285c69f9d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_mar_2022_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_mar_2022_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_mar_2022_member_casual__member__casual.b285c69f9d", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_mar_2022_member_casual__member__casual"], "alias": "accepted_values_mar_2022_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.490325, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mar_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.mar_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.mar_2022", "attached_node": "model.data_transform.mar_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('mar_2022')) }}"}, "namespace": null}}, "test.data_transform.validate_month_mar_2022_ended_at__3__started_at.529fd2054d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_mar_2022_ended_at__3__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_mar_2022_ended_at__3__started_at.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.validate_month_mar_2022_ended_at__3__started_at.529fd2054d", "fqn": ["data_transform", "intermediate", "yr_2022", "validate_month_mar_2022_ended_at__3__started_at"], "alias": "validate_month_mar_2022_ended_at__3__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.493109, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mar_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.mar_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.mar_2022", "attached_node": "model.data_transform.mar_2022", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 3, "model": "{{ get_where_subquery(ref('mar_2022')) }}"}, "namespace": null}}, "test.data_transform.unique_apr_2022_ride_id.04b95a0f5f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_apr_2022_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_apr_2022_ride_id.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.unique_apr_2022_ride_id.04b95a0f5f", "fqn": ["data_transform", "intermediate", "yr_2022", "unique_apr_2022_ride_id"], "alias": "unique_apr_2022_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.503467, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "apr_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.apr_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.apr_2022", "attached_node": "model.data_transform.apr_2022", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('apr_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_apr_2022_rideable_type__electric_bike__classic_bike.41d411c416": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_apr_2022_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_apr_2022_367b6e38945615ad9108efbc017829db.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_apr_2022_rideable_type__electric_bike__classic_bike.41d411c416", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_apr_2022_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_apr_2022_367b6e38945615ad9108efbc017829db", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_apr_2022_367b6e38945615ad9108efbc017829db", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_apr_2022_367b6e38945615ad9108efbc017829db"}, "created_at": 1743088110.505729, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_apr_2022_367b6e38945615ad9108efbc017829db\") }}", "language": "sql", "refs": [{"name": "apr_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.apr_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.apr_2022", "attached_node": "model.data_transform.apr_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('apr_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_apr_2022_member_casual__member__casual.c53995501b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_apr_2022_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_apr_2022_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_apr_2022_member_casual__member__casual.c53995501b", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_apr_2022_member_casual__member__casual"], "alias": "accepted_values_apr_2022_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.508707, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "apr_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.apr_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.apr_2022", "attached_node": "model.data_transform.apr_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('apr_2022')) }}"}, "namespace": null}}, "test.data_transform.validate_month_apr_2022_ended_at__4__started_at.d9a58d3cd9": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_apr_2022_ended_at__4__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_apr_2022_ended_at__4__started_at.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.validate_month_apr_2022_ended_at__4__started_at.d9a58d3cd9", "fqn": ["data_transform", "intermediate", "yr_2022", "validate_month_apr_2022_ended_at__4__started_at"], "alias": "validate_month_apr_2022_ended_at__4__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.511219, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "apr_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.apr_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.apr_2022", "attached_node": "model.data_transform.apr_2022", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 4, "model": "{{ get_where_subquery(ref('apr_2022')) }}"}, "namespace": null}}, "test.data_transform.unique_may_2022_ride_id.af62242e63": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_may_2022_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_may_2022_ride_id.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.unique_may_2022_ride_id.af62242e63", "fqn": ["data_transform", "intermediate", "yr_2022", "unique_may_2022_ride_id"], "alias": "unique_may_2022_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.51353, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "may_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.may_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.may_2022", "attached_node": "model.data_transform.may_2022", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('may_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_may_2022_rideable_type__electric_bike__classic_bike.a1a65f1e1a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_may_2022_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_may_2022_ef3d0146a18f81b3fa10594fe72d3125.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_may_2022_rideable_type__electric_bike__classic_bike.a1a65f1e1a", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_may_2022_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_may_2022_ef3d0146a18f81b3fa10594fe72d3125", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_may_2022_ef3d0146a18f81b3fa10594fe72d3125", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_may_2022_ef3d0146a18f81b3fa10594fe72d3125"}, "created_at": 1743088110.514534, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_may_2022_ef3d0146a18f81b3fa10594fe72d3125\") }}", "language": "sql", "refs": [{"name": "may_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.may_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.may_2022", "attached_node": "model.data_transform.may_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('may_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_may_2022_member_casual__member__casual.38217d39e1": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_may_2022_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_may_2022_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_may_2022_member_casual__member__casual.38217d39e1", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_may_2022_member_casual__member__casual"], "alias": "accepted_values_may_2022_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.517188, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "may_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.may_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.may_2022", "attached_node": "model.data_transform.may_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('may_2022')) }}"}, "namespace": null}}, "test.data_transform.validate_month_may_2022_ended_at__5__started_at.04b52bb967": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_may_2022_ended_at__5__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_may_2022_ended_at__5__started_at.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.validate_month_may_2022_ended_at__5__started_at.04b52bb967", "fqn": ["data_transform", "intermediate", "yr_2022", "validate_month_may_2022_ended_at__5__started_at"], "alias": "validate_month_may_2022_ended_at__5__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.527433, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "may_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.may_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.may_2022", "attached_node": "model.data_transform.may_2022", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 5, "model": "{{ get_where_subquery(ref('may_2022')) }}"}, "namespace": null}}, "test.data_transform.unique_jun_2022_ride_id.1e7ad22465": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_jun_2022_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_jun_2022_ride_id.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.unique_jun_2022_ride_id.1e7ad22465", "fqn": ["data_transform", "intermediate", "yr_2022", "unique_jun_2022_ride_id"], "alias": "unique_jun_2022_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.53261, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jun_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.jun_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.jun_2022", "attached_node": "model.data_transform.jun_2022", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('jun_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jun_2022_rideable_type__electric_bike__classic_bike.9261606d25": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jun_2022_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jun_2022_c74683ce7a9b823245d1b982c694042b.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_jun_2022_rideable_type__electric_bike__classic_bike.9261606d25", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_jun_2022_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_jun_2022_c74683ce7a9b823245d1b982c694042b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_jun_2022_c74683ce7a9b823245d1b982c694042b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_jun_2022_c74683ce7a9b823245d1b982c694042b"}, "created_at": 1743088110.533643, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_jun_2022_c74683ce7a9b823245d1b982c694042b\") }}", "language": "sql", "refs": [{"name": "jun_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jun_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.jun_2022", "attached_node": "model.data_transform.jun_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('jun_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jun_2022_member_casual__member__casual.52301af8b5": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jun_2022_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jun_2022_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_jun_2022_member_casual__member__casual.52301af8b5", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_jun_2022_member_casual__member__casual"], "alias": "accepted_values_jun_2022_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.536364, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jun_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jun_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.jun_2022", "attached_node": "model.data_transform.jun_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('jun_2022')) }}"}, "namespace": null}}, "test.data_transform.validate_month_jun_2022_ended_at__6__started_at.86dcfd7ac7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_jun_2022_ended_at__6__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_jun_2022_ended_at__6__started_at.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.validate_month_jun_2022_ended_at__6__started_at.86dcfd7ac7", "fqn": ["data_transform", "intermediate", "yr_2022", "validate_month_jun_2022_ended_at__6__started_at"], "alias": "validate_month_jun_2022_ended_at__6__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.538701, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jun_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jun_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.jun_2022", "attached_node": "model.data_transform.jun_2022", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 6, "model": "{{ get_where_subquery(ref('jun_2022')) }}"}, "namespace": null}}, "test.data_transform.unique_jul_2022_ride_id.702f94d5cc": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_jul_2022_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_jul_2022_ride_id.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.unique_jul_2022_ride_id.702f94d5cc", "fqn": ["data_transform", "intermediate", "yr_2022", "unique_jul_2022_ride_id"], "alias": "unique_jul_2022_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.541088, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jul_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.jul_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.jul_2022", "attached_node": "model.data_transform.jul_2022", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('jul_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jul_2022_rideable_type__electric_bike__classic_bike.bcbe03166a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jul_2022_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jul_2022_32879df2a9160c8bce23c71b0a9cc232.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_jul_2022_rideable_type__electric_bike__classic_bike.bcbe03166a", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_jul_2022_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_jul_2022_32879df2a9160c8bce23c71b0a9cc232", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_jul_2022_32879df2a9160c8bce23c71b0a9cc232", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_jul_2022_32879df2a9160c8bce23c71b0a9cc232"}, "created_at": 1743088110.54209, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_jul_2022_32879df2a9160c8bce23c71b0a9cc232\") }}", "language": "sql", "refs": [{"name": "jul_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jul_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.jul_2022", "attached_node": "model.data_transform.jul_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('jul_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jul_2022_member_casual__member__casual.2fc053c05a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jul_2022_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jul_2022_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_jul_2022_member_casual__member__casual.2fc053c05a", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_jul_2022_member_casual__member__casual"], "alias": "accepted_values_jul_2022_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.545225, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jul_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jul_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.jul_2022", "attached_node": "model.data_transform.jul_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('jul_2022')) }}"}, "namespace": null}}, "test.data_transform.validate_month_jul_2022_ended_at__7__started_at.1c7c88371a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_jul_2022_ended_at__7__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_jul_2022_ended_at__7__started_at.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.validate_month_jul_2022_ended_at__7__started_at.1c7c88371a", "fqn": ["data_transform", "intermediate", "yr_2022", "validate_month_jul_2022_ended_at__7__started_at"], "alias": "validate_month_jul_2022_ended_at__7__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.5475469, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jul_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jul_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.jul_2022", "attached_node": "model.data_transform.jul_2022", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 7, "model": "{{ get_where_subquery(ref('jul_2022')) }}"}, "namespace": null}}, "test.data_transform.unique_aug_2022_ride_id.ffdd4382ad": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_aug_2022_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_aug_2022_ride_id.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.unique_aug_2022_ride_id.ffdd4382ad", "fqn": ["data_transform", "intermediate", "yr_2022", "unique_aug_2022_ride_id"], "alias": "unique_aug_2022_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.549927, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aug_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.aug_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.aug_2022", "attached_node": "model.data_transform.aug_2022", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('aug_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_aug_2022_rideable_type__electric_bike__classic_bike.51b0090758": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_aug_2022_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_aug_2022_483b9bff8afa4d2078c68f54eae1fcbe.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_aug_2022_rideable_type__electric_bike__classic_bike.51b0090758", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_aug_2022_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_aug_2022_483b9bff8afa4d2078c68f54eae1fcbe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_aug_2022_483b9bff8afa4d2078c68f54eae1fcbe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_aug_2022_483b9bff8afa4d2078c68f54eae1fcbe"}, "created_at": 1743088110.55109, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_aug_2022_483b9bff8afa4d2078c68f54eae1fcbe\") }}", "language": "sql", "refs": [{"name": "aug_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.aug_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.aug_2022", "attached_node": "model.data_transform.aug_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('aug_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_aug_2022_member_casual__member__casual.fc18f0d350": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_aug_2022_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_aug_2022_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_aug_2022_member_casual__member__casual.fc18f0d350", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_aug_2022_member_casual__member__casual"], "alias": "accepted_values_aug_2022_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.5543501, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aug_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.aug_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.aug_2022", "attached_node": "model.data_transform.aug_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('aug_2022')) }}"}, "namespace": null}}, "test.data_transform.validate_month_aug_2022_ended_at__8__started_at.f45a5b8f5f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_aug_2022_ended_at__8__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_aug_2022_ended_at__8__started_at.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.validate_month_aug_2022_ended_at__8__started_at.f45a5b8f5f", "fqn": ["data_transform", "intermediate", "yr_2022", "validate_month_aug_2022_ended_at__8__started_at"], "alias": "validate_month_aug_2022_ended_at__8__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.556999, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aug_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.aug_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.aug_2022", "attached_node": "model.data_transform.aug_2022", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 8, "model": "{{ get_where_subquery(ref('aug_2022')) }}"}, "namespace": null}}, "test.data_transform.unique_sep_2022_ride_id.a8d3fafc02": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_sep_2022_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_sep_2022_ride_id.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.unique_sep_2022_ride_id.a8d3fafc02", "fqn": ["data_transform", "intermediate", "yr_2022", "unique_sep_2022_ride_id"], "alias": "unique_sep_2022_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.559484, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "sep_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.sep_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.sep_2022", "attached_node": "model.data_transform.sep_2022", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('sep_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_sep_2022_rideable_type__electric_bike__classic_bike.c3dcf466d2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_sep_2022_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_sep_2022_0aac0be1e6882778878d20afc7ca347b.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_sep_2022_rideable_type__electric_bike__classic_bike.c3dcf466d2", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_sep_2022_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_sep_2022_0aac0be1e6882778878d20afc7ca347b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_sep_2022_0aac0be1e6882778878d20afc7ca347b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_sep_2022_0aac0be1e6882778878d20afc7ca347b"}, "created_at": 1743088110.5604968, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_sep_2022_0aac0be1e6882778878d20afc7ca347b\") }}", "language": "sql", "refs": [{"name": "sep_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.sep_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.sep_2022", "attached_node": "model.data_transform.sep_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('sep_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_sep_2022_member_casual__member__casual.0d0a35672f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_sep_2022_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_sep_2022_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_sep_2022_member_casual__member__casual.0d0a35672f", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_sep_2022_member_casual__member__casual"], "alias": "accepted_values_sep_2022_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.563149, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "sep_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.sep_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.sep_2022", "attached_node": "model.data_transform.sep_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('sep_2022')) }}"}, "namespace": null}}, "test.data_transform.validate_month_sep_2022_ended_at__9__started_at.84fe2b5d2c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_sep_2022_ended_at__9__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_sep_2022_ended_at__9__started_at.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.validate_month_sep_2022_ended_at__9__started_at.84fe2b5d2c", "fqn": ["data_transform", "intermediate", "yr_2022", "validate_month_sep_2022_ended_at__9__started_at"], "alias": "validate_month_sep_2022_ended_at__9__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.5655282, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "sep_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.sep_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.sep_2022", "attached_node": "model.data_transform.sep_2022", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 9, "model": "{{ get_where_subquery(ref('sep_2022')) }}"}, "namespace": null}}, "test.data_transform.unique_oct_2022_ride_id.796b2d8c1e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_oct_2022_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_oct_2022_ride_id.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.unique_oct_2022_ride_id.796b2d8c1e", "fqn": ["data_transform", "intermediate", "yr_2022", "unique_oct_2022_ride_id"], "alias": "unique_oct_2022_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.567963, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "oct_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.oct_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.oct_2022", "attached_node": "model.data_transform.oct_2022", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('oct_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_oct_2022_rideable_type__electric_bike__classic_bike.57fd12192f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_oct_2022_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_oct_2022_ceff29e7c6d71be39de6298869debf0d.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_oct_2022_rideable_type__electric_bike__classic_bike.57fd12192f", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_oct_2022_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_oct_2022_ceff29e7c6d71be39de6298869debf0d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_oct_2022_ceff29e7c6d71be39de6298869debf0d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_oct_2022_ceff29e7c6d71be39de6298869debf0d"}, "created_at": 1743088110.568969, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_oct_2022_ceff29e7c6d71be39de6298869debf0d\") }}", "language": "sql", "refs": [{"name": "oct_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.oct_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.oct_2022", "attached_node": "model.data_transform.oct_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('oct_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_oct_2022_member_casual__member__casual.4e41505c90": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_oct_2022_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_oct_2022_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_oct_2022_member_casual__member__casual.4e41505c90", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_oct_2022_member_casual__member__casual"], "alias": "accepted_values_oct_2022_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.571587, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "oct_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.oct_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.oct_2022", "attached_node": "model.data_transform.oct_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('oct_2022')) }}"}, "namespace": null}}, "test.data_transform.validate_month_oct_2022_ended_at__10__started_at.16cef01c2c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_oct_2022_ended_at__10__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_oct_2022_ended_at__10__started_at.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.validate_month_oct_2022_ended_at__10__started_at.16cef01c2c", "fqn": ["data_transform", "intermediate", "yr_2022", "validate_month_oct_2022_ended_at__10__started_at"], "alias": "validate_month_oct_2022_ended_at__10__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.573895, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "oct_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.oct_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.oct_2022", "attached_node": "model.data_transform.oct_2022", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 10, "model": "{{ get_where_subquery(ref('oct_2022')) }}"}, "namespace": null}}, "test.data_transform.unique_nov_2022_ride_id.f19a66835e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_nov_2022_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_nov_2022_ride_id.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.unique_nov_2022_ride_id.f19a66835e", "fqn": ["data_transform", "intermediate", "yr_2022", "unique_nov_2022_ride_id"], "alias": "unique_nov_2022_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.57631, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nov_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.nov_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.nov_2022", "attached_node": "model.data_transform.nov_2022", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('nov_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_nov_2022_rideable_type__electric_bike__classic_bike.f7b434490c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_nov_2022_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_nov_2022_00de205bdb0da33ce5fce82e8c61c371.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_nov_2022_rideable_type__electric_bike__classic_bike.f7b434490c", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_nov_2022_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_nov_2022_00de205bdb0da33ce5fce82e8c61c371", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_nov_2022_00de205bdb0da33ce5fce82e8c61c371", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_nov_2022_00de205bdb0da33ce5fce82e8c61c371"}, "created_at": 1743088110.577312, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_nov_2022_00de205bdb0da33ce5fce82e8c61c371\") }}", "language": "sql", "refs": [{"name": "nov_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.nov_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.nov_2022", "attached_node": "model.data_transform.nov_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('nov_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_nov_2022_member_casual__member__casual.455565c14e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_nov_2022_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_nov_2022_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_nov_2022_member_casual__member__casual.455565c14e", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_nov_2022_member_casual__member__casual"], "alias": "accepted_values_nov_2022_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.5797608, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nov_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.nov_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.nov_2022", "attached_node": "model.data_transform.nov_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('nov_2022')) }}"}, "namespace": null}}, "test.data_transform.validate_month_nov_2022_ended_at__11__started_at.d80aa41b02": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_nov_2022_ended_at__11__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_nov_2022_ended_at__11__started_at.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.validate_month_nov_2022_ended_at__11__started_at.d80aa41b02", "fqn": ["data_transform", "intermediate", "yr_2022", "validate_month_nov_2022_ended_at__11__started_at"], "alias": "validate_month_nov_2022_ended_at__11__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.582217, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nov_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.nov_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nov_2022", "attached_node": "model.data_transform.nov_2022", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 11, "model": "{{ get_where_subquery(ref('nov_2022')) }}"}, "namespace": null}}, "test.data_transform.unique_dec_2022_ride_id.bbbffc9573": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_dec_2022_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_dec_2022_ride_id.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.unique_dec_2022_ride_id.bbbffc9573", "fqn": ["data_transform", "intermediate", "yr_2022", "unique_dec_2022_ride_id"], "alias": "unique_dec_2022_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.585074, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dec_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.dec_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.dec_2022", "attached_node": "model.data_transform.dec_2022", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('dec_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_dec_2022_rideable_type__electric_bike__classic_bike.dc1b3c80b8": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_dec_2022_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_dec_2022_1f005ba5a699c15b95234740751f5d64.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_dec_2022_rideable_type__electric_bike__classic_bike.dc1b3c80b8", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_dec_2022_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_dec_2022_1f005ba5a699c15b95234740751f5d64", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dec_2022_1f005ba5a699c15b95234740751f5d64", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_dec_2022_1f005ba5a699c15b95234740751f5d64"}, "created_at": 1743088110.586231, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dec_2022_1f005ba5a699c15b95234740751f5d64\") }}", "language": "sql", "refs": [{"name": "dec_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.dec_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.dec_2022", "attached_node": "model.data_transform.dec_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('dec_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_dec_2022_member_casual__member__casual.135dfc2ca1": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_dec_2022_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_dec_2022_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_dec_2022_member_casual__member__casual.135dfc2ca1", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_dec_2022_member_casual__member__casual"], "alias": "accepted_values_dec_2022_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.58911, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dec_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.dec_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.dec_2022", "attached_node": "model.data_transform.dec_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('dec_2022')) }}"}, "namespace": null}}, "test.data_transform.validate_month_dec_2022_ended_at__12__started_at.1beba005a6": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_dec_2022_ended_at__12__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_dec_2022_ended_at__12__started_at.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.validate_month_dec_2022_ended_at__12__started_at.1beba005a6", "fqn": ["data_transform", "intermediate", "yr_2022", "validate_month_dec_2022_ended_at__12__started_at"], "alias": "validate_month_dec_2022_ended_at__12__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.591618, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dec_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.dec_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dec_2022", "attached_node": "model.data_transform.dec_2022", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 12, "model": "{{ get_where_subquery(ref('dec_2022')) }}"}, "namespace": null}}, "test.data_transform.unique_yr_2022_ride_id.d2430b5cbc": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_yr_2022_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_yr_2022_ride_id.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.unique_yr_2022_ride_id.d2430b5cbc", "fqn": ["data_transform", "intermediate", "yr_2022", "unique_yr_2022_ride_id"], "alias": "unique_yr_2022_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.593892, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "yr_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.yr_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.yr_2022", "attached_node": "model.data_transform.yr_2022", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('yr_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_yr_2022_rideable_type__electric_bike__classic_bike.1fc8016972": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_yr_2022_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_yr_2022_0689028d9ae15b67995fa1d867193dd4.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_yr_2022_rideable_type__electric_bike__classic_bike.1fc8016972", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_yr_2022_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_yr_2022_0689028d9ae15b67995fa1d867193dd4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_yr_2022_0689028d9ae15b67995fa1d867193dd4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_yr_2022_0689028d9ae15b67995fa1d867193dd4"}, "created_at": 1743088110.5950642, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_yr_2022_0689028d9ae15b67995fa1d867193dd4\") }}", "language": "sql", "refs": [{"name": "yr_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.yr_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.yr_2022", "attached_node": "model.data_transform.yr_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('yr_2022')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_yr_2022_member_casual__member__casual.d3f9bca4d6": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_yr_2022_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_yr_2022_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2022/_yr_2022__schema.yml", "unique_id": "test.data_transform.accepted_values_yr_2022_member_casual__member__casual.d3f9bca4d6", "fqn": ["data_transform", "intermediate", "yr_2022", "accepted_values_yr_2022_member_casual__member__casual"], "alias": "accepted_values_yr_2022_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.601839, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "yr_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.yr_2022"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.yr_2022", "attached_node": "model.data_transform.yr_2022", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('yr_2022')) }}"}, "namespace": null}}, "test.data_transform.unique_jan_2023_ride_id.1074116e25": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_jan_2023_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_jan_2023_ride_id.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.unique_jan_2023_ride_id.1074116e25", "fqn": ["data_transform", "intermediate", "yr_2023", "unique_jan_2023_ride_id"], "alias": "unique_jan_2023_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.6276748, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jan_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.jan_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.jan_2023", "attached_node": "model.data_transform.jan_2023", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('jan_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jan_2023_rideable_type__electric_bike__classic_bike.d53d53383d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jan_2023_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jan_2023_bfb3b6661db3eff04d9de0f911ee7eb2.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_jan_2023_rideable_type__electric_bike__classic_bike.d53d53383d", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_jan_2023_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_jan_2023_bfb3b6661db3eff04d9de0f911ee7eb2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_jan_2023_bfb3b6661db3eff04d9de0f911ee7eb2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_jan_2023_bfb3b6661db3eff04d9de0f911ee7eb2"}, "created_at": 1743088110.628684, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_jan_2023_bfb3b6661db3eff04d9de0f911ee7eb2\") }}", "language": "sql", "refs": [{"name": "jan_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jan_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.jan_2023", "attached_node": "model.data_transform.jan_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('jan_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jan_2023_member_casual__member__casual.2ef1f5c2fe": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jan_2023_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jan_2023_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_jan_2023_member_casual__member__casual.2ef1f5c2fe", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_jan_2023_member_casual__member__casual"], "alias": "accepted_values_jan_2023_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.631485, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jan_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jan_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.jan_2023", "attached_node": "model.data_transform.jan_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('jan_2023')) }}"}, "namespace": null}}, "test.data_transform.validate_month_jan_2023_ended_at__1__started_at.b0c1fa5eb4": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_jan_2023_ended_at__1__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_jan_2023_ended_at__1__started_at.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.validate_month_jan_2023_ended_at__1__started_at.b0c1fa5eb4", "fqn": ["data_transform", "intermediate", "yr_2023", "validate_month_jan_2023_ended_at__1__started_at"], "alias": "validate_month_jan_2023_ended_at__1__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.633973, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jan_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jan_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.jan_2023", "attached_node": "model.data_transform.jan_2023", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 1, "model": "{{ get_where_subquery(ref('jan_2023')) }}"}, "namespace": null}}, "test.data_transform.unique_feb_2023_ride_id.add79ff186": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_feb_2023_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_feb_2023_ride_id.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.unique_feb_2023_ride_id.add79ff186", "fqn": ["data_transform", "intermediate", "yr_2023", "unique_feb_2023_ride_id"], "alias": "unique_feb_2023_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.6362538, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "feb_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.feb_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.feb_2023", "attached_node": "model.data_transform.feb_2023", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('feb_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_feb_2023_rideable_type__electric_bike__classic_bike.51e394a011": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_feb_2023_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_feb_2023_6c400fccc90604c97557eefec565cba5.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_feb_2023_rideable_type__electric_bike__classic_bike.51e394a011", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_feb_2023_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_feb_2023_6c400fccc90604c97557eefec565cba5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_feb_2023_6c400fccc90604c97557eefec565cba5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_feb_2023_6c400fccc90604c97557eefec565cba5"}, "created_at": 1743088110.637263, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_feb_2023_6c400fccc90604c97557eefec565cba5\") }}", "language": "sql", "refs": [{"name": "feb_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.feb_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.feb_2023", "attached_node": "model.data_transform.feb_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('feb_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_feb_2023_member_casual__member__casual.031e289129": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_feb_2023_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_feb_2023_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_feb_2023_member_casual__member__casual.031e289129", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_feb_2023_member_casual__member__casual"], "alias": "accepted_values_feb_2023_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.6398988, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "feb_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.feb_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.feb_2023", "attached_node": "model.data_transform.feb_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('feb_2023')) }}"}, "namespace": null}}, "test.data_transform.validate_month_feb_2023_ended_at__2__started_at.7ea791c459": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_feb_2023_ended_at__2__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_feb_2023_ended_at__2__started_at.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.validate_month_feb_2023_ended_at__2__started_at.7ea791c459", "fqn": ["data_transform", "intermediate", "yr_2023", "validate_month_feb_2023_ended_at__2__started_at"], "alias": "validate_month_feb_2023_ended_at__2__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.642216, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "feb_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.feb_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.feb_2023", "attached_node": "model.data_transform.feb_2023", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 2, "model": "{{ get_where_subquery(ref('feb_2023')) }}"}, "namespace": null}}, "test.data_transform.unique_mar_2023_ride_id.89fa5a8337": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_mar_2023_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_mar_2023_ride_id.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.unique_mar_2023_ride_id.89fa5a8337", "fqn": ["data_transform", "intermediate", "yr_2023", "unique_mar_2023_ride_id"], "alias": "unique_mar_2023_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.644612, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mar_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.mar_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.mar_2023", "attached_node": "model.data_transform.mar_2023", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('mar_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_mar_2023_rideable_type__electric_bike__classic_bike.aa67d77428": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_mar_2023_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_mar_2023_2ff5776e77496d7fe90c99e28f9e5704.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_mar_2023_rideable_type__electric_bike__classic_bike.aa67d77428", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_mar_2023_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_mar_2023_2ff5776e77496d7fe90c99e28f9e5704", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_mar_2023_2ff5776e77496d7fe90c99e28f9e5704", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_mar_2023_2ff5776e77496d7fe90c99e28f9e5704"}, "created_at": 1743088110.645607, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_mar_2023_2ff5776e77496d7fe90c99e28f9e5704\") }}", "language": "sql", "refs": [{"name": "mar_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.mar_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.mar_2023", "attached_node": "model.data_transform.mar_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('mar_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_mar_2023_member_casual__member__casual.d99f8523f4": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_mar_2023_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_mar_2023_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_mar_2023_member_casual__member__casual.d99f8523f4", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_mar_2023_member_casual__member__casual"], "alias": "accepted_values_mar_2023_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.648257, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mar_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.mar_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.mar_2023", "attached_node": "model.data_transform.mar_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('mar_2023')) }}"}, "namespace": null}}, "test.data_transform.validate_month_mar_2023_ended_at__3__started_at.a4624f3dd7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_mar_2023_ended_at__3__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_mar_2023_ended_at__3__started_at.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.validate_month_mar_2023_ended_at__3__started_at.a4624f3dd7", "fqn": ["data_transform", "intermediate", "yr_2023", "validate_month_mar_2023_ended_at__3__started_at"], "alias": "validate_month_mar_2023_ended_at__3__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.650555, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mar_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.mar_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.mar_2023", "attached_node": "model.data_transform.mar_2023", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 3, "model": "{{ get_where_subquery(ref('mar_2023')) }}"}, "namespace": null}}, "test.data_transform.unique_apr_2023_ride_id.07eedfd4ee": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_apr_2023_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_apr_2023_ride_id.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.unique_apr_2023_ride_id.07eedfd4ee", "fqn": ["data_transform", "intermediate", "yr_2023", "unique_apr_2023_ride_id"], "alias": "unique_apr_2023_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.6529322, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "apr_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.apr_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.apr_2023", "attached_node": "model.data_transform.apr_2023", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('apr_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_apr_2023_rideable_type__electric_bike__classic_bike.01826f186c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_apr_2023_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_apr_2023_f764de1a7b1198deb4d209a015e09fb9.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_apr_2023_rideable_type__electric_bike__classic_bike.01826f186c", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_apr_2023_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_apr_2023_f764de1a7b1198deb4d209a015e09fb9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_apr_2023_f764de1a7b1198deb4d209a015e09fb9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_apr_2023_f764de1a7b1198deb4d209a015e09fb9"}, "created_at": 1743088110.653933, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_apr_2023_f764de1a7b1198deb4d209a015e09fb9\") }}", "language": "sql", "refs": [{"name": "apr_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.apr_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.apr_2023", "attached_node": "model.data_transform.apr_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('apr_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_apr_2023_member_casual__member__casual.e5bd71e525": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_apr_2023_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_apr_2023_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_apr_2023_member_casual__member__casual.e5bd71e525", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_apr_2023_member_casual__member__casual"], "alias": "accepted_values_apr_2023_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.656523, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "apr_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.apr_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.apr_2023", "attached_node": "model.data_transform.apr_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('apr_2023')) }}"}, "namespace": null}}, "test.data_transform.validate_month_apr_2023_ended_at__4__started_at.10d1e32fed": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_apr_2023_ended_at__4__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_apr_2023_ended_at__4__started_at.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.validate_month_apr_2023_ended_at__4__started_at.10d1e32fed", "fqn": ["data_transform", "intermediate", "yr_2023", "validate_month_apr_2023_ended_at__4__started_at"], "alias": "validate_month_apr_2023_ended_at__4__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.658838, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "apr_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.apr_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.apr_2023", "attached_node": "model.data_transform.apr_2023", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 4, "model": "{{ get_where_subquery(ref('apr_2023')) }}"}, "namespace": null}}, "test.data_transform.unique_may_2023_ride_id.1f84c4fdc3": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_may_2023_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_may_2023_ride_id.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.unique_may_2023_ride_id.1f84c4fdc3", "fqn": ["data_transform", "intermediate", "yr_2023", "unique_may_2023_ride_id"], "alias": "unique_may_2023_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.661792, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "may_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.may_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.may_2023", "attached_node": "model.data_transform.may_2023", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('may_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_may_2023_rideable_type__electric_bike__classic_bike.f059bb43ab": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_may_2023_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_may_2023_6e17007b874b764d2464ac2d7e8e644e.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_may_2023_rideable_type__electric_bike__classic_bike.f059bb43ab", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_may_2023_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_may_2023_6e17007b874b764d2464ac2d7e8e644e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_may_2023_6e17007b874b764d2464ac2d7e8e644e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_may_2023_6e17007b874b764d2464ac2d7e8e644e"}, "created_at": 1743088110.662789, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_may_2023_6e17007b874b764d2464ac2d7e8e644e\") }}", "language": "sql", "refs": [{"name": "may_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.may_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.may_2023", "attached_node": "model.data_transform.may_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('may_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_may_2023_member_casual__member__casual.a5d49eea1a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_may_2023_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_may_2023_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_may_2023_member_casual__member__casual.a5d49eea1a", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_may_2023_member_casual__member__casual"], "alias": "accepted_values_may_2023_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.6653922, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "may_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.may_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.may_2023", "attached_node": "model.data_transform.may_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('may_2023')) }}"}, "namespace": null}}, "test.data_transform.validate_month_may_2023_ended_at__5__started_at.ae8e43b7d4": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_may_2023_ended_at__5__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_may_2023_ended_at__5__started_at.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.validate_month_may_2023_ended_at__5__started_at.ae8e43b7d4", "fqn": ["data_transform", "intermediate", "yr_2023", "validate_month_may_2023_ended_at__5__started_at"], "alias": "validate_month_may_2023_ended_at__5__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.6677, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "may_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.may_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.may_2023", "attached_node": "model.data_transform.may_2023", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 5, "model": "{{ get_where_subquery(ref('may_2023')) }}"}, "namespace": null}}, "test.data_transform.unique_jun_2023_ride_id.82604d40d1": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_jun_2023_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_jun_2023_ride_id.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.unique_jun_2023_ride_id.82604d40d1", "fqn": ["data_transform", "intermediate", "yr_2023", "unique_jun_2023_ride_id"], "alias": "unique_jun_2023_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.67007, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jun_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.jun_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.jun_2023", "attached_node": "model.data_transform.jun_2023", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('jun_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jun_2023_rideable_type__electric_bike__classic_bike.08d373c057": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jun_2023_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jun_2023_5972be35f0ca149f35737fd747b6d7c3.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_jun_2023_rideable_type__electric_bike__classic_bike.08d373c057", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_jun_2023_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_jun_2023_5972be35f0ca149f35737fd747b6d7c3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_jun_2023_5972be35f0ca149f35737fd747b6d7c3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_jun_2023_5972be35f0ca149f35737fd747b6d7c3"}, "created_at": 1743088110.671068, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_jun_2023_5972be35f0ca149f35737fd747b6d7c3\") }}", "language": "sql", "refs": [{"name": "jun_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jun_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.jun_2023", "attached_node": "model.data_transform.jun_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('jun_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jun_2023_member_casual__member__casual.a116e80271": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jun_2023_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jun_2023_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_jun_2023_member_casual__member__casual.a116e80271", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_jun_2023_member_casual__member__casual"], "alias": "accepted_values_jun_2023_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.673514, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jun_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jun_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.jun_2023", "attached_node": "model.data_transform.jun_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('jun_2023')) }}"}, "namespace": null}}, "test.data_transform.validate_month_jun_2023_ended_at__6__started_at.3fc3d08e4d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_jun_2023_ended_at__6__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_jun_2023_ended_at__6__started_at.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.validate_month_jun_2023_ended_at__6__started_at.3fc3d08e4d", "fqn": ["data_transform", "intermediate", "yr_2023", "validate_month_jun_2023_ended_at__6__started_at"], "alias": "validate_month_jun_2023_ended_at__6__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.681073, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jun_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jun_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.jun_2023", "attached_node": "model.data_transform.jun_2023", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 6, "model": "{{ get_where_subquery(ref('jun_2023')) }}"}, "namespace": null}}, "test.data_transform.unique_jul_2023_ride_id.390f336acd": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_jul_2023_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_jul_2023_ride_id.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.unique_jul_2023_ride_id.390f336acd", "fqn": ["data_transform", "intermediate", "yr_2023", "unique_jul_2023_ride_id"], "alias": "unique_jul_2023_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.6886258, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jul_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.jul_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.jul_2023", "attached_node": "model.data_transform.jul_2023", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('jul_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jul_2023_rideable_type__electric_bike__classic_bike.4fade08a47": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jul_2023_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jul_2023_34e81427c9ec6017de14e90eea566499.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_jul_2023_rideable_type__electric_bike__classic_bike.4fade08a47", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_jul_2023_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_jul_2023_34e81427c9ec6017de14e90eea566499", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_jul_2023_34e81427c9ec6017de14e90eea566499", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_jul_2023_34e81427c9ec6017de14e90eea566499"}, "created_at": 1743088110.692516, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_jul_2023_34e81427c9ec6017de14e90eea566499\") }}", "language": "sql", "refs": [{"name": "jul_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jul_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.jul_2023", "attached_node": "model.data_transform.jul_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('jul_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jul_2023_member_casual__member__casual.90581b41a9": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jul_2023_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jul_2023_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_jul_2023_member_casual__member__casual.90581b41a9", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_jul_2023_member_casual__member__casual"], "alias": "accepted_values_jul_2023_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.698808, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jul_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jul_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.jul_2023", "attached_node": "model.data_transform.jul_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('jul_2023')) }}"}, "namespace": null}}, "test.data_transform.validate_month_jul_2023_ended_at__7__started_at.e61e886fbd": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_jul_2023_ended_at__7__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_jul_2023_ended_at__7__started_at.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.validate_month_jul_2023_ended_at__7__started_at.e61e886fbd", "fqn": ["data_transform", "intermediate", "yr_2023", "validate_month_jul_2023_ended_at__7__started_at"], "alias": "validate_month_jul_2023_ended_at__7__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.701468, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jul_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jul_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.jul_2023", "attached_node": "model.data_transform.jul_2023", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 7, "model": "{{ get_where_subquery(ref('jul_2023')) }}"}, "namespace": null}}, "test.data_transform.unique_aug_2023_ride_id.a3134bce14": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_aug_2023_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_aug_2023_ride_id.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.unique_aug_2023_ride_id.a3134bce14", "fqn": ["data_transform", "intermediate", "yr_2023", "unique_aug_2023_ride_id"], "alias": "unique_aug_2023_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.703719, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aug_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.aug_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.aug_2023", "attached_node": "model.data_transform.aug_2023", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('aug_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_aug_2023_rideable_type__electric_bike__classic_bike.0300a72286": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_aug_2023_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_aug_2023_a611092207e731d84c869b162db93233.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_aug_2023_rideable_type__electric_bike__classic_bike.0300a72286", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_aug_2023_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_aug_2023_a611092207e731d84c869b162db93233", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_aug_2023_a611092207e731d84c869b162db93233", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_aug_2023_a611092207e731d84c869b162db93233"}, "created_at": 1743088110.7048771, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_aug_2023_a611092207e731d84c869b162db93233\") }}", "language": "sql", "refs": [{"name": "aug_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.aug_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.aug_2023", "attached_node": "model.data_transform.aug_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('aug_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_aug_2023_member_casual__member__casual.5dab70bfd7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_aug_2023_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_aug_2023_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_aug_2023_member_casual__member__casual.5dab70bfd7", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_aug_2023_member_casual__member__casual"], "alias": "accepted_values_aug_2023_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.70735, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aug_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.aug_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.aug_2023", "attached_node": "model.data_transform.aug_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('aug_2023')) }}"}, "namespace": null}}, "test.data_transform.validate_month_aug_2023_ended_at__8__started_at.d75cf30380": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_aug_2023_ended_at__8__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_aug_2023_ended_at__8__started_at.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.validate_month_aug_2023_ended_at__8__started_at.d75cf30380", "fqn": ["data_transform", "intermediate", "yr_2023", "validate_month_aug_2023_ended_at__8__started_at"], "alias": "validate_month_aug_2023_ended_at__8__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.7098072, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aug_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.aug_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.aug_2023", "attached_node": "model.data_transform.aug_2023", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 8, "model": "{{ get_where_subquery(ref('aug_2023')) }}"}, "namespace": null}}, "test.data_transform.unique_sep_2023_ride_id.ca113f723d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_sep_2023_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_sep_2023_ride_id.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.unique_sep_2023_ride_id.ca113f723d", "fqn": ["data_transform", "intermediate", "yr_2023", "unique_sep_2023_ride_id"], "alias": "unique_sep_2023_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.71205, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "sep_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.sep_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.sep_2023", "attached_node": "model.data_transform.sep_2023", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('sep_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_sep_2023_rideable_type__electric_bike__classic_bike.67819e4320": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_sep_2023_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_sep_2023_de666e231ecbaf7cda47056855f6b29a.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_sep_2023_rideable_type__electric_bike__classic_bike.67819e4320", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_sep_2023_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_sep_2023_de666e231ecbaf7cda47056855f6b29a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_sep_2023_de666e231ecbaf7cda47056855f6b29a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_sep_2023_de666e231ecbaf7cda47056855f6b29a"}, "created_at": 1743088110.7131882, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_sep_2023_de666e231ecbaf7cda47056855f6b29a\") }}", "language": "sql", "refs": [{"name": "sep_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.sep_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.sep_2023", "attached_node": "model.data_transform.sep_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('sep_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_sep_2023_member_casual__member__casual.02046c4e8e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_sep_2023_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_sep_2023_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_sep_2023_member_casual__member__casual.02046c4e8e", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_sep_2023_member_casual__member__casual"], "alias": "accepted_values_sep_2023_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.7156491, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "sep_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.sep_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.sep_2023", "attached_node": "model.data_transform.sep_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('sep_2023')) }}"}, "namespace": null}}, "test.data_transform.validate_month_sep_2023_ended_at__9__started_at.31f9a134de": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_sep_2023_ended_at__9__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_sep_2023_ended_at__9__started_at.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.validate_month_sep_2023_ended_at__9__started_at.31f9a134de", "fqn": ["data_transform", "intermediate", "yr_2023", "validate_month_sep_2023_ended_at__9__started_at"], "alias": "validate_month_sep_2023_ended_at__9__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.7185102, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "sep_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.sep_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.sep_2023", "attached_node": "model.data_transform.sep_2023", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 9, "model": "{{ get_where_subquery(ref('sep_2023')) }}"}, "namespace": null}}, "test.data_transform.unique_oct_2023_ride_id.60aeda33c7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_oct_2023_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_oct_2023_ride_id.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.unique_oct_2023_ride_id.60aeda33c7", "fqn": ["data_transform", "intermediate", "yr_2023", "unique_oct_2023_ride_id"], "alias": "unique_oct_2023_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.720882, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "oct_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.oct_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.oct_2023", "attached_node": "model.data_transform.oct_2023", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('oct_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_oct_2023_rideable_type__electric_bike__classic_bike.3cf8054fdb": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_oct_2023_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_oct_2023_78aeb0ea6346abf9b800f92770a4a2ef.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_oct_2023_rideable_type__electric_bike__classic_bike.3cf8054fdb", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_oct_2023_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_oct_2023_78aeb0ea6346abf9b800f92770a4a2ef", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_oct_2023_78aeb0ea6346abf9b800f92770a4a2ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_oct_2023_78aeb0ea6346abf9b800f92770a4a2ef"}, "created_at": 1743088110.721882, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_oct_2023_78aeb0ea6346abf9b800f92770a4a2ef\") }}", "language": "sql", "refs": [{"name": "oct_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.oct_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.oct_2023", "attached_node": "model.data_transform.oct_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('oct_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_oct_2023_member_casual__member__casual.afb9e46c90": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_oct_2023_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_oct_2023_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_oct_2023_member_casual__member__casual.afb9e46c90", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_oct_2023_member_casual__member__casual"], "alias": "accepted_values_oct_2023_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.724512, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "oct_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.oct_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.oct_2023", "attached_node": "model.data_transform.oct_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('oct_2023')) }}"}, "namespace": null}}, "test.data_transform.validate_month_oct_2023_ended_at__10__started_at.0227a79041": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_oct_2023_ended_at__10__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_oct_2023_ended_at__10__started_at.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.validate_month_oct_2023_ended_at__10__started_at.0227a79041", "fqn": ["data_transform", "intermediate", "yr_2023", "validate_month_oct_2023_ended_at__10__started_at"], "alias": "validate_month_oct_2023_ended_at__10__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.7269619, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "oct_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.oct_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.oct_2023", "attached_node": "model.data_transform.oct_2023", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 10, "model": "{{ get_where_subquery(ref('oct_2023')) }}"}, "namespace": null}}, "test.data_transform.unique_nov_2023_ride_id.f85259dd8c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_nov_2023_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_nov_2023_ride_id.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.unique_nov_2023_ride_id.f85259dd8c", "fqn": ["data_transform", "intermediate", "yr_2023", "unique_nov_2023_ride_id"], "alias": "unique_nov_2023_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.729198, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nov_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.nov_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.nov_2023", "attached_node": "model.data_transform.nov_2023", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('nov_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_nov_2023_rideable_type__electric_bike__classic_bike.fec3f24575": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_nov_2023_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_nov_2023_f1e2211b7f7305c6247aafbf97a03b5e.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_nov_2023_rideable_type__electric_bike__classic_bike.fec3f24575", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_nov_2023_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_nov_2023_f1e2211b7f7305c6247aafbf97a03b5e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_nov_2023_f1e2211b7f7305c6247aafbf97a03b5e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_nov_2023_f1e2211b7f7305c6247aafbf97a03b5e"}, "created_at": 1743088110.730199, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_nov_2023_f1e2211b7f7305c6247aafbf97a03b5e\") }}", "language": "sql", "refs": [{"name": "nov_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.nov_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.nov_2023", "attached_node": "model.data_transform.nov_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('nov_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_nov_2023_member_casual__member__casual.16f3838708": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_nov_2023_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_nov_2023_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_nov_2023_member_casual__member__casual.16f3838708", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_nov_2023_member_casual__member__casual"], "alias": "accepted_values_nov_2023_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.7332952, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nov_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.nov_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.nov_2023", "attached_node": "model.data_transform.nov_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('nov_2023')) }}"}, "namespace": null}}, "test.data_transform.validate_month_nov_2023_ended_at__11__started_at.6cc26b335c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_nov_2023_ended_at__11__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_nov_2023_ended_at__11__started_at.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.validate_month_nov_2023_ended_at__11__started_at.6cc26b335c", "fqn": ["data_transform", "intermediate", "yr_2023", "validate_month_nov_2023_ended_at__11__started_at"], "alias": "validate_month_nov_2023_ended_at__11__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.7355862, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nov_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.nov_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nov_2023", "attached_node": "model.data_transform.nov_2023", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 11, "model": "{{ get_where_subquery(ref('nov_2023')) }}"}, "namespace": null}}, "test.data_transform.unique_dec_2023_ride_id.a1609de2e7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_dec_2023_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_dec_2023_ride_id.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.unique_dec_2023_ride_id.a1609de2e7", "fqn": ["data_transform", "intermediate", "yr_2023", "unique_dec_2023_ride_id"], "alias": "unique_dec_2023_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.737959, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dec_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.dec_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.dec_2023", "attached_node": "model.data_transform.dec_2023", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('dec_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_dec_2023_rideable_type__electric_bike__classic_bike.acd656a22f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_dec_2023_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_dec_2023_8fd6ce299877886b4472968a6cbbc35a.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_dec_2023_rideable_type__electric_bike__classic_bike.acd656a22f", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_dec_2023_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_dec_2023_8fd6ce299877886b4472968a6cbbc35a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dec_2023_8fd6ce299877886b4472968a6cbbc35a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_dec_2023_8fd6ce299877886b4472968a6cbbc35a"}, "created_at": 1743088110.738966, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dec_2023_8fd6ce299877886b4472968a6cbbc35a\") }}", "language": "sql", "refs": [{"name": "dec_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.dec_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.dec_2023", "attached_node": "model.data_transform.dec_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('dec_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_dec_2023_member_casual__member__casual.957fa6d2c3": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_dec_2023_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_dec_2023_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_dec_2023_member_casual__member__casual.957fa6d2c3", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_dec_2023_member_casual__member__casual"], "alias": "accepted_values_dec_2023_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.747775, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dec_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.dec_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.dec_2023", "attached_node": "model.data_transform.dec_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('dec_2023')) }}"}, "namespace": null}}, "test.data_transform.validate_month_dec_2023_ended_at__12__started_at.f7ee9b2cea": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_dec_2023_ended_at__12__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_dec_2023_ended_at__12__started_at.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.validate_month_dec_2023_ended_at__12__started_at.f7ee9b2cea", "fqn": ["data_transform", "intermediate", "yr_2023", "validate_month_dec_2023_ended_at__12__started_at"], "alias": "validate_month_dec_2023_ended_at__12__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.75185, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dec_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.dec_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dec_2023", "attached_node": "model.data_transform.dec_2023", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 12, "model": "{{ get_where_subquery(ref('dec_2023')) }}"}, "namespace": null}}, "test.data_transform.unique_yr_2023_ride_id.7217ceb8ed": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_yr_2023_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_yr_2023_ride_id.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.unique_yr_2023_ride_id.7217ceb8ed", "fqn": ["data_transform", "intermediate", "yr_2023", "unique_yr_2023_ride_id"], "alias": "unique_yr_2023_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.7544801, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "yr_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.yr_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.yr_2023", "attached_node": "model.data_transform.yr_2023", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('yr_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_yr_2023_rideable_type__electric_bike__classic_bike.90a7544b2e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_yr_2023_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_yr_2023_9a2d0d34433f2b400a8f472c850ad6f4.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_yr_2023_rideable_type__electric_bike__classic_bike.90a7544b2e", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_yr_2023_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_yr_2023_9a2d0d34433f2b400a8f472c850ad6f4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_yr_2023_9a2d0d34433f2b400a8f472c850ad6f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_yr_2023_9a2d0d34433f2b400a8f472c850ad6f4"}, "created_at": 1743088110.7554848, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_yr_2023_9a2d0d34433f2b400a8f472c850ad6f4\") }}", "language": "sql", "refs": [{"name": "yr_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.yr_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.yr_2023", "attached_node": "model.data_transform.yr_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('yr_2023')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_yr_2023_member_casual__member__casual.b43b04bfd1": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_yr_2023_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_yr_2023_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2023/_yr_2023__schema.yml", "unique_id": "test.data_transform.accepted_values_yr_2023_member_casual__member__casual.b43b04bfd1", "fqn": ["data_transform", "intermediate", "yr_2023", "accepted_values_yr_2023_member_casual__member__casual"], "alias": "accepted_values_yr_2023_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.758125, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "yr_2023", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.yr_2023"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.yr_2023", "attached_node": "model.data_transform.yr_2023", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('yr_2023')) }}"}, "namespace": null}}, "test.data_transform.unique_jan_2024_ride_id.7dfa0fb566": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_jan_2024_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_jan_2024_ride_id.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.unique_jan_2024_ride_id.7dfa0fb566", "fqn": ["data_transform", "intermediate", "yr_2024", "unique_jan_2024_ride_id"], "alias": "unique_jan_2024_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.787321, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jan_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.jan_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.jan_2024", "attached_node": "model.data_transform.jan_2024", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('jan_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jan_2024_rideable_type__electric_bike__classic_bike.9e6ba60770": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jan_2024_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jan_2024_d9c5cb091a638f6516500d15955114fd.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_jan_2024_rideable_type__electric_bike__classic_bike.9e6ba60770", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_jan_2024_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_jan_2024_d9c5cb091a638f6516500d15955114fd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_jan_2024_d9c5cb091a638f6516500d15955114fd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_jan_2024_d9c5cb091a638f6516500d15955114fd"}, "created_at": 1743088110.788355, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_jan_2024_d9c5cb091a638f6516500d15955114fd\") }}", "language": "sql", "refs": [{"name": "jan_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jan_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.jan_2024", "attached_node": "model.data_transform.jan_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('jan_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jan_2024_member_casual__member__casual.3fab89f86e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jan_2024_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jan_2024_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_jan_2024_member_casual__member__casual.3fab89f86e", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_jan_2024_member_casual__member__casual"], "alias": "accepted_values_jan_2024_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.7940931, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jan_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jan_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.jan_2024", "attached_node": "model.data_transform.jan_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('jan_2024')) }}"}, "namespace": null}}, "test.data_transform.validate_month_jan_2024_ended_at__1__started_at.3f841659d1": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_jan_2024_ended_at__1__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_jan_2024_ended_at__1__started_at.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.validate_month_jan_2024_ended_at__1__started_at.3f841659d1", "fqn": ["data_transform", "intermediate", "yr_2024", "validate_month_jan_2024_ended_at__1__started_at"], "alias": "validate_month_jan_2024_ended_at__1__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.796741, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jan_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jan_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.jan_2024", "attached_node": "model.data_transform.jan_2024", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 1, "model": "{{ get_where_subquery(ref('jan_2024')) }}"}, "namespace": null}}, "test.data_transform.unique_feb_2024_ride_id.369c1cf474": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_feb_2024_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_feb_2024_ride_id.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.unique_feb_2024_ride_id.369c1cf474", "fqn": ["data_transform", "intermediate", "yr_2024", "unique_feb_2024_ride_id"], "alias": "unique_feb_2024_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.7989938, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "feb_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.feb_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.feb_2024", "attached_node": "model.data_transform.feb_2024", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('feb_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_feb_2024_rideable_type__electric_bike__classic_bike.c3deffbddd": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_feb_2024_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_feb_2024_644c623abafb541c682092b58e3bcea6.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_feb_2024_rideable_type__electric_bike__classic_bike.c3deffbddd", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_feb_2024_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_feb_2024_644c623abafb541c682092b58e3bcea6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_feb_2024_644c623abafb541c682092b58e3bcea6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_feb_2024_644c623abafb541c682092b58e3bcea6"}, "created_at": 1743088110.7999868, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_feb_2024_644c623abafb541c682092b58e3bcea6\") }}", "language": "sql", "refs": [{"name": "feb_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.feb_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.feb_2024", "attached_node": "model.data_transform.feb_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('feb_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_feb_2024_member_casual__member__casual.f7397df4e6": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_feb_2024_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_feb_2024_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_feb_2024_member_casual__member__casual.f7397df4e6", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_feb_2024_member_casual__member__casual"], "alias": "accepted_values_feb_2024_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.802573, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "feb_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.feb_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.feb_2024", "attached_node": "model.data_transform.feb_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('feb_2024')) }}"}, "namespace": null}}, "test.data_transform.validate_month_feb_2024_ended_at__2__started_at.c35b99c9d9": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_feb_2024_ended_at__2__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_feb_2024_ended_at__2__started_at.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.validate_month_feb_2024_ended_at__2__started_at.c35b99c9d9", "fqn": ["data_transform", "intermediate", "yr_2024", "validate_month_feb_2024_ended_at__2__started_at"], "alias": "validate_month_feb_2024_ended_at__2__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.8048651, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "feb_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.feb_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.feb_2024", "attached_node": "model.data_transform.feb_2024", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 2, "model": "{{ get_where_subquery(ref('feb_2024')) }}"}, "namespace": null}}, "test.data_transform.unique_mar_2024_ride_id.0346c70344": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_mar_2024_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_mar_2024_ride_id.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.unique_mar_2024_ride_id.0346c70344", "fqn": ["data_transform", "intermediate", "yr_2024", "unique_mar_2024_ride_id"], "alias": "unique_mar_2024_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.8079722, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mar_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.mar_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.mar_2024", "attached_node": "model.data_transform.mar_2024", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('mar_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_mar_2024_rideable_type__electric_bike__classic_bike.a2e4c869e2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_mar_2024_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_mar_2024_784f721dc2fb32c1f7cfc590e1819e5c.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_mar_2024_rideable_type__electric_bike__classic_bike.a2e4c869e2", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_mar_2024_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_mar_2024_784f721dc2fb32c1f7cfc590e1819e5c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_mar_2024_784f721dc2fb32c1f7cfc590e1819e5c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_mar_2024_784f721dc2fb32c1f7cfc590e1819e5c"}, "created_at": 1743088110.8089821, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_mar_2024_784f721dc2fb32c1f7cfc590e1819e5c\") }}", "language": "sql", "refs": [{"name": "mar_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.mar_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.mar_2024", "attached_node": "model.data_transform.mar_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('mar_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_mar_2024_member_casual__member__casual.2257878b6c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_mar_2024_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_mar_2024_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_mar_2024_member_casual__member__casual.2257878b6c", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_mar_2024_member_casual__member__casual"], "alias": "accepted_values_mar_2024_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.81157, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mar_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.mar_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.mar_2024", "attached_node": "model.data_transform.mar_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('mar_2024')) }}"}, "namespace": null}}, "test.data_transform.validate_month_mar_2024_ended_at__3__started_at.2e90ea48db": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_mar_2024_ended_at__3__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_mar_2024_ended_at__3__started_at.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.validate_month_mar_2024_ended_at__3__started_at.2e90ea48db", "fqn": ["data_transform", "intermediate", "yr_2024", "validate_month_mar_2024_ended_at__3__started_at"], "alias": "validate_month_mar_2024_ended_at__3__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.813876, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mar_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.mar_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.mar_2024", "attached_node": "model.data_transform.mar_2024", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 3, "model": "{{ get_where_subquery(ref('mar_2024')) }}"}, "namespace": null}}, "test.data_transform.unique_apr_2024_ride_id.518bcab2a1": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_apr_2024_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_apr_2024_ride_id.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.unique_apr_2024_ride_id.518bcab2a1", "fqn": ["data_transform", "intermediate", "yr_2024", "unique_apr_2024_ride_id"], "alias": "unique_apr_2024_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.8162491, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "apr_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.apr_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.apr_2024", "attached_node": "model.data_transform.apr_2024", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('apr_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_apr_2024_rideable_type__electric_bike__classic_bike.ae30a9076a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_apr_2024_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_apr_2024_1f1833436b02a299e75491a4982141ea.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_apr_2024_rideable_type__electric_bike__classic_bike.ae30a9076a", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_apr_2024_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_apr_2024_1f1833436b02a299e75491a4982141ea", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_apr_2024_1f1833436b02a299e75491a4982141ea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_apr_2024_1f1833436b02a299e75491a4982141ea"}, "created_at": 1743088110.817247, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_apr_2024_1f1833436b02a299e75491a4982141ea\") }}", "language": "sql", "refs": [{"name": "apr_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.apr_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.apr_2024", "attached_node": "model.data_transform.apr_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('apr_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_apr_2024_member_casual__member__casual.131b1d0e93": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_apr_2024_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_apr_2024_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_apr_2024_member_casual__member__casual.131b1d0e93", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_apr_2024_member_casual__member__casual"], "alias": "accepted_values_apr_2024_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.819836, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "apr_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.apr_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.apr_2024", "attached_node": "model.data_transform.apr_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('apr_2024')) }}"}, "namespace": null}}, "test.data_transform.validate_month_apr_2024_ended_at__4__started_at.701bed14c8": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_apr_2024_ended_at__4__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_apr_2024_ended_at__4__started_at.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.validate_month_apr_2024_ended_at__4__started_at.701bed14c8", "fqn": ["data_transform", "intermediate", "yr_2024", "validate_month_apr_2024_ended_at__4__started_at"], "alias": "validate_month_apr_2024_ended_at__4__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.82214, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "apr_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.apr_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.apr_2024", "attached_node": "model.data_transform.apr_2024", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 4, "model": "{{ get_where_subquery(ref('apr_2024')) }}"}, "namespace": null}}, "test.data_transform.unique_may_2024_ride_id.f90b9f27f2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_may_2024_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_may_2024_ride_id.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.unique_may_2024_ride_id.f90b9f27f2", "fqn": ["data_transform", "intermediate", "yr_2024", "unique_may_2024_ride_id"], "alias": "unique_may_2024_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.824521, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "may_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.may_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.may_2024", "attached_node": "model.data_transform.may_2024", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('may_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_may_2024_rideable_type__electric_bike__classic_bike.05dd923e47": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_may_2024_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_may_2024_988f7e74e89a4b2415a0a520f5e907aa.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_may_2024_rideable_type__electric_bike__classic_bike.05dd923e47", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_may_2024_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_may_2024_988f7e74e89a4b2415a0a520f5e907aa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_may_2024_988f7e74e89a4b2415a0a520f5e907aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_may_2024_988f7e74e89a4b2415a0a520f5e907aa"}, "created_at": 1743088110.8255382, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_may_2024_988f7e74e89a4b2415a0a520f5e907aa\") }}", "language": "sql", "refs": [{"name": "may_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.may_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.may_2024", "attached_node": "model.data_transform.may_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('may_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_may_2024_member_casual__member__casual.9a77965565": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_may_2024_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_may_2024_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_may_2024_member_casual__member__casual.9a77965565", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_may_2024_member_casual__member__casual"], "alias": "accepted_values_may_2024_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.82814, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "may_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.may_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.may_2024", "attached_node": "model.data_transform.may_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('may_2024')) }}"}, "namespace": null}}, "test.data_transform.validate_month_may_2024_ended_at__5__started_at.38feb2e3e4": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_may_2024_ended_at__5__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_may_2024_ended_at__5__started_at.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.validate_month_may_2024_ended_at__5__started_at.38feb2e3e4", "fqn": ["data_transform", "intermediate", "yr_2024", "validate_month_may_2024_ended_at__5__started_at"], "alias": "validate_month_may_2024_ended_at__5__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.830443, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "may_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.may_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.may_2024", "attached_node": "model.data_transform.may_2024", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 5, "model": "{{ get_where_subquery(ref('may_2024')) }}"}, "namespace": null}}, "test.data_transform.unique_jun_2024_ride_id.2085d3af2b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_jun_2024_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_jun_2024_ride_id.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.unique_jun_2024_ride_id.2085d3af2b", "fqn": ["data_transform", "intermediate", "yr_2024", "unique_jun_2024_ride_id"], "alias": "unique_jun_2024_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.8328168, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jun_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.jun_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.jun_2024", "attached_node": "model.data_transform.jun_2024", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('jun_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jun_2024_rideable_type__electric_bike__classic_bike.296748931c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jun_2024_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jun_2024_cbba562b982cd63d5be7bda67ed9cb65.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_jun_2024_rideable_type__electric_bike__classic_bike.296748931c", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_jun_2024_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_jun_2024_cbba562b982cd63d5be7bda67ed9cb65", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_jun_2024_cbba562b982cd63d5be7bda67ed9cb65", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_jun_2024_cbba562b982cd63d5be7bda67ed9cb65"}, "created_at": 1743088110.833817, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_jun_2024_cbba562b982cd63d5be7bda67ed9cb65\") }}", "language": "sql", "refs": [{"name": "jun_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jun_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.jun_2024", "attached_node": "model.data_transform.jun_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('jun_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jun_2024_member_casual__member__casual.cde6875ce9": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jun_2024_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jun_2024_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_jun_2024_member_casual__member__casual.cde6875ce9", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_jun_2024_member_casual__member__casual"], "alias": "accepted_values_jun_2024_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.8362482, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jun_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jun_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.jun_2024", "attached_node": "model.data_transform.jun_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('jun_2024')) }}"}, "namespace": null}}, "test.data_transform.validate_month_jun_2024_ended_at__6__started_at.a078811362": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_jun_2024_ended_at__6__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_jun_2024_ended_at__6__started_at.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.validate_month_jun_2024_ended_at__6__started_at.a078811362", "fqn": ["data_transform", "intermediate", "yr_2024", "validate_month_jun_2024_ended_at__6__started_at"], "alias": "validate_month_jun_2024_ended_at__6__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.838677, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jun_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jun_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.jun_2024", "attached_node": "model.data_transform.jun_2024", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 6, "model": "{{ get_where_subquery(ref('jun_2024')) }}"}, "namespace": null}}, "test.data_transform.unique_jul_2024_ride_id.0a23064a44": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_jul_2024_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_jul_2024_ride_id.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.unique_jul_2024_ride_id.0a23064a44", "fqn": ["data_transform", "intermediate", "yr_2024", "unique_jul_2024_ride_id"], "alias": "unique_jul_2024_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.8410308, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jul_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.jul_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.jul_2024", "attached_node": "model.data_transform.jul_2024", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('jul_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jul_2024_rideable_type__electric_bike__classic_bike.ac4bda1108": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jul_2024_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jul_2024_9de2390f47473360f9ef3dba0040d205.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_jul_2024_rideable_type__electric_bike__classic_bike.ac4bda1108", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_jul_2024_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_jul_2024_9de2390f47473360f9ef3dba0040d205", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_jul_2024_9de2390f47473360f9ef3dba0040d205", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_jul_2024_9de2390f47473360f9ef3dba0040d205"}, "created_at": 1743088110.842048, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_jul_2024_9de2390f47473360f9ef3dba0040d205\") }}", "language": "sql", "refs": [{"name": "jul_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jul_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.jul_2024", "attached_node": "model.data_transform.jul_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('jul_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jul_2024_member_casual__member__casual.00e92abb1b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jul_2024_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jul_2024_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_jul_2024_member_casual__member__casual.00e92abb1b", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_jul_2024_member_casual__member__casual"], "alias": "accepted_values_jul_2024_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.844484, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jul_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jul_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.jul_2024", "attached_node": "model.data_transform.jul_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('jul_2024')) }}"}, "namespace": null}}, "test.data_transform.validate_month_jul_2024_ended_at__7__started_at.19592997b7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_jul_2024_ended_at__7__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_jul_2024_ended_at__7__started_at.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.validate_month_jul_2024_ended_at__7__started_at.19592997b7", "fqn": ["data_transform", "intermediate", "yr_2024", "validate_month_jul_2024_ended_at__7__started_at"], "alias": "validate_month_jul_2024_ended_at__7__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.846903, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jul_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jul_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.jul_2024", "attached_node": "model.data_transform.jul_2024", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 7, "model": "{{ get_where_subquery(ref('jul_2024')) }}"}, "namespace": null}}, "test.data_transform.unique_aug_2024_ride_id.e1479348f4": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_aug_2024_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_aug_2024_ride_id.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.unique_aug_2024_ride_id.e1479348f4", "fqn": ["data_transform", "intermediate", "yr_2024", "unique_aug_2024_ride_id"], "alias": "unique_aug_2024_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.849136, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aug_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.aug_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.aug_2024", "attached_node": "model.data_transform.aug_2024", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('aug_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_aug_2024_rideable_type__electric_bike__classic_bike.8d0aecc8cd": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_aug_2024_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_aug_2024_094744232861b758fdae3e6e5f2f7797.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_aug_2024_rideable_type__electric_bike__classic_bike.8d0aecc8cd", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_aug_2024_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_aug_2024_094744232861b758fdae3e6e5f2f7797", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_aug_2024_094744232861b758fdae3e6e5f2f7797", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_aug_2024_094744232861b758fdae3e6e5f2f7797"}, "created_at": 1743088110.850281, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_aug_2024_094744232861b758fdae3e6e5f2f7797\") }}", "language": "sql", "refs": [{"name": "aug_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.aug_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.aug_2024", "attached_node": "model.data_transform.aug_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('aug_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_aug_2024_member_casual__member__casual.a210aaa053": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_aug_2024_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_aug_2024_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_aug_2024_member_casual__member__casual.a210aaa053", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_aug_2024_member_casual__member__casual"], "alias": "accepted_values_aug_2024_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.852735, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aug_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.aug_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.aug_2024", "attached_node": "model.data_transform.aug_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('aug_2024')) }}"}, "namespace": null}}, "test.data_transform.validate_month_aug_2024_ended_at__8__started_at.7f962fb652": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_aug_2024_ended_at__8__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_aug_2024_ended_at__8__started_at.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.validate_month_aug_2024_ended_at__8__started_at.7f962fb652", "fqn": ["data_transform", "intermediate", "yr_2024", "validate_month_aug_2024_ended_at__8__started_at"], "alias": "validate_month_aug_2024_ended_at__8__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.855177, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aug_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.aug_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.aug_2024", "attached_node": "model.data_transform.aug_2024", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 8, "model": "{{ get_where_subquery(ref('aug_2024')) }}"}, "namespace": null}}, "test.data_transform.unique_sep_2024_ride_id.05e447f34c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_sep_2024_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_sep_2024_ride_id.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.unique_sep_2024_ride_id.05e447f34c", "fqn": ["data_transform", "intermediate", "yr_2024", "unique_sep_2024_ride_id"], "alias": "unique_sep_2024_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.857391, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "sep_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.sep_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.sep_2024", "attached_node": "model.data_transform.sep_2024", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('sep_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_sep_2024_rideable_type__electric_bike__classic_bike.a57f13c11c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_sep_2024_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_sep_2024_e0f90cfeb7bc61b6b7c50fa6749ea3de.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_sep_2024_rideable_type__electric_bike__classic_bike.a57f13c11c", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_sep_2024_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_sep_2024_e0f90cfeb7bc61b6b7c50fa6749ea3de", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_sep_2024_e0f90cfeb7bc61b6b7c50fa6749ea3de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_sep_2024_e0f90cfeb7bc61b6b7c50fa6749ea3de"}, "created_at": 1743088110.859045, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_sep_2024_e0f90cfeb7bc61b6b7c50fa6749ea3de\") }}", "language": "sql", "refs": [{"name": "sep_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.sep_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.sep_2024", "attached_node": "model.data_transform.sep_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('sep_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_sep_2024_member_casual__member__casual.81d0d449db": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_sep_2024_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_sep_2024_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_sep_2024_member_casual__member__casual.81d0d449db", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_sep_2024_member_casual__member__casual"], "alias": "accepted_values_sep_2024_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.861526, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "sep_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.sep_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.sep_2024", "attached_node": "model.data_transform.sep_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('sep_2024')) }}"}, "namespace": null}}, "test.data_transform.validate_month_sep_2024_ended_at__9__started_at.c7a06f6cfe": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_sep_2024_ended_at__9__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_sep_2024_ended_at__9__started_at.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.validate_month_sep_2024_ended_at__9__started_at.c7a06f6cfe", "fqn": ["data_transform", "intermediate", "yr_2024", "validate_month_sep_2024_ended_at__9__started_at"], "alias": "validate_month_sep_2024_ended_at__9__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.863981, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "sep_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.sep_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.sep_2024", "attached_node": "model.data_transform.sep_2024", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 9, "model": "{{ get_where_subquery(ref('sep_2024')) }}"}, "namespace": null}}, "test.data_transform.unique_oct_2024_ride_id.f9ffd523c2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_oct_2024_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_oct_2024_ride_id.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.unique_oct_2024_ride_id.f9ffd523c2", "fqn": ["data_transform", "intermediate", "yr_2024", "unique_oct_2024_ride_id"], "alias": "unique_oct_2024_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.866217, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "oct_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.oct_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.oct_2024", "attached_node": "model.data_transform.oct_2024", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('oct_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_oct_2024_rideable_type__electric_bike__classic_bike.37cb9502e3": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_oct_2024_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_oct_2024_a07944066be10851a069933c69b05821.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_oct_2024_rideable_type__electric_bike__classic_bike.37cb9502e3", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_oct_2024_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_oct_2024_a07944066be10851a069933c69b05821", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_oct_2024_a07944066be10851a069933c69b05821", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_oct_2024_a07944066be10851a069933c69b05821"}, "created_at": 1743088110.8673542, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_oct_2024_a07944066be10851a069933c69b05821\") }}", "language": "sql", "refs": [{"name": "oct_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.oct_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.oct_2024", "attached_node": "model.data_transform.oct_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('oct_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_oct_2024_member_casual__member__casual.1498a91654": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_oct_2024_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_oct_2024_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_oct_2024_member_casual__member__casual.1498a91654", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_oct_2024_member_casual__member__casual"], "alias": "accepted_values_oct_2024_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.869826, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "oct_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.oct_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.oct_2024", "attached_node": "model.data_transform.oct_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('oct_2024')) }}"}, "namespace": null}}, "test.data_transform.validate_month_oct_2024_ended_at__10__started_at.74a4af765f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_oct_2024_ended_at__10__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_oct_2024_ended_at__10__started_at.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.validate_month_oct_2024_ended_at__10__started_at.74a4af765f", "fqn": ["data_transform", "intermediate", "yr_2024", "validate_month_oct_2024_ended_at__10__started_at"], "alias": "validate_month_oct_2024_ended_at__10__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.872279, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "oct_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.oct_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.oct_2024", "attached_node": "model.data_transform.oct_2024", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 10, "model": "{{ get_where_subquery(ref('oct_2024')) }}"}, "namespace": null}}, "test.data_transform.unique_nov_2024_ride_id.bd7d31bb66": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_nov_2024_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_nov_2024_ride_id.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.unique_nov_2024_ride_id.bd7d31bb66", "fqn": ["data_transform", "intermediate", "yr_2024", "unique_nov_2024_ride_id"], "alias": "unique_nov_2024_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.874523, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nov_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.nov_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.nov_2024", "attached_node": "model.data_transform.nov_2024", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('nov_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_nov_2024_rideable_type__electric_bike__classic_bike.9cb41102fe": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_nov_2024_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_nov_2024_887cbde296886a34109effc082083c75.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_nov_2024_rideable_type__electric_bike__classic_bike.9cb41102fe", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_nov_2024_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_nov_2024_887cbde296886a34109effc082083c75", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_nov_2024_887cbde296886a34109effc082083c75", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_nov_2024_887cbde296886a34109effc082083c75"}, "created_at": 1743088110.87553, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_nov_2024_887cbde296886a34109effc082083c75\") }}", "language": "sql", "refs": [{"name": "nov_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.nov_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.nov_2024", "attached_node": "model.data_transform.nov_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('nov_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_nov_2024_member_casual__member__casual.f782eeefff": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_nov_2024_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_nov_2024_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_nov_2024_member_casual__member__casual.f782eeefff", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_nov_2024_member_casual__member__casual"], "alias": "accepted_values_nov_2024_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.8781319, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nov_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.nov_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.nov_2024", "attached_node": "model.data_transform.nov_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('nov_2024')) }}"}, "namespace": null}}, "test.data_transform.validate_month_nov_2024_ended_at__11__started_at.8f47700fc8": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_nov_2024_ended_at__11__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_nov_2024_ended_at__11__started_at.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.validate_month_nov_2024_ended_at__11__started_at.8f47700fc8", "fqn": ["data_transform", "intermediate", "yr_2024", "validate_month_nov_2024_ended_at__11__started_at"], "alias": "validate_month_nov_2024_ended_at__11__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.880556, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nov_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.nov_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nov_2024", "attached_node": "model.data_transform.nov_2024", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 11, "model": "{{ get_where_subquery(ref('nov_2024')) }}"}, "namespace": null}}, "test.data_transform.unique_dec_2024_ride_id.e63a6867b0": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_dec_2024_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_dec_2024_ride_id.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.unique_dec_2024_ride_id.e63a6867b0", "fqn": ["data_transform", "intermediate", "yr_2024", "unique_dec_2024_ride_id"], "alias": "unique_dec_2024_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.8827991, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dec_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.dec_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.dec_2024", "attached_node": "model.data_transform.dec_2024", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('dec_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_dec_2024_rideable_type__electric_bike__classic_bike.e5cb433641": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_dec_2024_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_dec_2024_aa90763fc48003c5f6c548be45a4b83d.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_dec_2024_rideable_type__electric_bike__classic_bike.e5cb433641", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_dec_2024_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_dec_2024_aa90763fc48003c5f6c548be45a4b83d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dec_2024_aa90763fc48003c5f6c548be45a4b83d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_dec_2024_aa90763fc48003c5f6c548be45a4b83d"}, "created_at": 1743088110.8838, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dec_2024_aa90763fc48003c5f6c548be45a4b83d\") }}", "language": "sql", "refs": [{"name": "dec_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.dec_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.dec_2024", "attached_node": "model.data_transform.dec_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('dec_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_dec_2024_member_casual__member__casual.ba811fe960": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_dec_2024_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_dec_2024_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_dec_2024_member_casual__member__casual.ba811fe960", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_dec_2024_member_casual__member__casual"], "alias": "accepted_values_dec_2024_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.886423, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dec_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.dec_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.dec_2024", "attached_node": "model.data_transform.dec_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('dec_2024')) }}"}, "namespace": null}}, "test.data_transform.validate_month_dec_2024_ended_at__12__started_at.a0c703573b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_dec_2024_ended_at__12__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_dec_2024_ended_at__12__started_at.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.validate_month_dec_2024_ended_at__12__started_at.a0c703573b", "fqn": ["data_transform", "intermediate", "yr_2024", "validate_month_dec_2024_ended_at__12__started_at"], "alias": "validate_month_dec_2024_ended_at__12__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.888714, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dec_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.dec_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dec_2024", "attached_node": "model.data_transform.dec_2024", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 12, "model": "{{ get_where_subquery(ref('dec_2024')) }}"}, "namespace": null}}, "test.data_transform.unique_yr_2024_ride_id.1de4ca9eb3": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_yr_2024_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_yr_2024_ride_id.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.unique_yr_2024_ride_id.1de4ca9eb3", "fqn": ["data_transform", "intermediate", "yr_2024", "unique_yr_2024_ride_id"], "alias": "unique_yr_2024_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.891093, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "yr_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.yr_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.yr_2024", "attached_node": "model.data_transform.yr_2024", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('yr_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_yr_2024_rideable_type__electric_bike__classic_bike.423adb3059": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_yr_2024_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_yr_2024_e5e707054c3fc0fbb36076dc9540144a.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_yr_2024_rideable_type__electric_bike__classic_bike.423adb3059", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_yr_2024_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_yr_2024_e5e707054c3fc0fbb36076dc9540144a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_yr_2024_e5e707054c3fc0fbb36076dc9540144a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_yr_2024_e5e707054c3fc0fbb36076dc9540144a"}, "created_at": 1743088110.8920991, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_yr_2024_e5e707054c3fc0fbb36076dc9540144a\") }}", "language": "sql", "refs": [{"name": "yr_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.yr_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.yr_2024", "attached_node": "model.data_transform.yr_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('yr_2024')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_yr_2024_member_casual__member__casual.f5d6a256f0": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_yr_2024_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_yr_2024_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2024/_yr_2024__schema.yml", "unique_id": "test.data_transform.accepted_values_yr_2024_member_casual__member__casual.f5d6a256f0", "fqn": ["data_transform", "intermediate", "yr_2024", "accepted_values_yr_2024_member_casual__member__casual"], "alias": "accepted_values_yr_2024_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.894698, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "yr_2024", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.yr_2024"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.yr_2024", "attached_node": "model.data_transform.yr_2024", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('yr_2024')) }}"}, "namespace": null}}, "test.data_transform.unique_jan_2021_ride_id.38f514c303": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_jan_2021_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_jan_2021_ride_id.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.unique_jan_2021_ride_id.38f514c303", "fqn": ["data_transform", "intermediate", "yr_2021", "unique_jan_2021_ride_id"], "alias": "unique_jan_2021_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.9151318, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jan_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.jan_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.jan_2021", "attached_node": "model.data_transform.jan_2021", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('jan_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jan_2021_rideable_type__electric_bike__classic_bike.af59a3aeb3": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jan_2021_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jan_2021_3c6f2698a1d2102ab9d4dd4a2e2ae16f.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_jan_2021_rideable_type__electric_bike__classic_bike.af59a3aeb3", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_jan_2021_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_jan_2021_3c6f2698a1d2102ab9d4dd4a2e2ae16f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_jan_2021_3c6f2698a1d2102ab9d4dd4a2e2ae16f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_jan_2021_3c6f2698a1d2102ab9d4dd4a2e2ae16f"}, "created_at": 1743088110.9161432, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_jan_2021_3c6f2698a1d2102ab9d4dd4a2e2ae16f\") }}", "language": "sql", "refs": [{"name": "jan_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jan_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.jan_2021", "attached_node": "model.data_transform.jan_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('jan_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jan_2021_member_casual__member__casual.73faa5a5dc": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jan_2021_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jan_2021_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_jan_2021_member_casual__member__casual.73faa5a5dc", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_jan_2021_member_casual__member__casual"], "alias": "accepted_values_jan_2021_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.9187992, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jan_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jan_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.jan_2021", "attached_node": "model.data_transform.jan_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('jan_2021')) }}"}, "namespace": null}}, "test.data_transform.validate_month_jan_2021_ended_at__1__started_at.7d7fccaff4": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_jan_2021_ended_at__1__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_jan_2021_ended_at__1__started_at.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.validate_month_jan_2021_ended_at__1__started_at.7d7fccaff4", "fqn": ["data_transform", "intermediate", "yr_2021", "validate_month_jan_2021_ended_at__1__started_at"], "alias": "validate_month_jan_2021_ended_at__1__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.921268, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jan_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jan_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.jan_2021", "attached_node": "model.data_transform.jan_2021", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 1, "model": "{{ get_where_subquery(ref('jan_2021')) }}"}, "namespace": null}}, "test.data_transform.unique_feb_2021_ride_id.798dd40563": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_feb_2021_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_feb_2021_ride_id.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.unique_feb_2021_ride_id.798dd40563", "fqn": ["data_transform", "intermediate", "yr_2021", "unique_feb_2021_ride_id"], "alias": "unique_feb_2021_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.923539, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "feb_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.feb_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.feb_2021", "attached_node": "model.data_transform.feb_2021", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('feb_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_feb_2021_rideable_type__electric_bike__classic_bike.347ac0aef9": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_feb_2021_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_feb_2021_6628e140596202e61c80aff909d3954d.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_feb_2021_rideable_type__electric_bike__classic_bike.347ac0aef9", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_feb_2021_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_feb_2021_6628e140596202e61c80aff909d3954d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_feb_2021_6628e140596202e61c80aff909d3954d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_feb_2021_6628e140596202e61c80aff909d3954d"}, "created_at": 1743088110.924551, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_feb_2021_6628e140596202e61c80aff909d3954d\") }}", "language": "sql", "refs": [{"name": "feb_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.feb_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.feb_2021", "attached_node": "model.data_transform.feb_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('feb_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_feb_2021_member_casual__member__casual.9bfbe9dfa2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_feb_2021_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_feb_2021_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_feb_2021_member_casual__member__casual.9bfbe9dfa2", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_feb_2021_member_casual__member__casual"], "alias": "accepted_values_feb_2021_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.927163, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "feb_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.feb_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.feb_2021", "attached_node": "model.data_transform.feb_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('feb_2021')) }}"}, "namespace": null}}, "test.data_transform.validate_month_feb_2021_ended_at__2__started_at.4ec15d2767": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_feb_2021_ended_at__2__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_feb_2021_ended_at__2__started_at.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.validate_month_feb_2021_ended_at__2__started_at.4ec15d2767", "fqn": ["data_transform", "intermediate", "yr_2021", "validate_month_feb_2021_ended_at__2__started_at"], "alias": "validate_month_feb_2021_ended_at__2__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.929445, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "feb_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.feb_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.feb_2021", "attached_node": "model.data_transform.feb_2021", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 2, "model": "{{ get_where_subquery(ref('feb_2021')) }}"}, "namespace": null}}, "test.data_transform.unique_mar_2021_ride_id.e07d6d2ddf": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_mar_2021_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_mar_2021_ride_id.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.unique_mar_2021_ride_id.e07d6d2ddf", "fqn": ["data_transform", "intermediate", "yr_2021", "unique_mar_2021_ride_id"], "alias": "unique_mar_2021_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.931811, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mar_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.mar_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.mar_2021", "attached_node": "model.data_transform.mar_2021", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('mar_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_mar_2021_rideable_type__electric_bike__classic_bike.84bfb07b65": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_mar_2021_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_mar_2021_b98094284c4d0d750e7f0bdb5c96d9c4.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_mar_2021_rideable_type__electric_bike__classic_bike.84bfb07b65", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_mar_2021_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_mar_2021_b98094284c4d0d750e7f0bdb5c96d9c4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_mar_2021_b98094284c4d0d750e7f0bdb5c96d9c4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_mar_2021_b98094284c4d0d750e7f0bdb5c96d9c4"}, "created_at": 1743088110.9328132, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_mar_2021_b98094284c4d0d750e7f0bdb5c96d9c4\") }}", "language": "sql", "refs": [{"name": "mar_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.mar_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.mar_2021", "attached_node": "model.data_transform.mar_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('mar_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_mar_2021_member_casual__member__casual.c63d9ab4d3": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_mar_2021_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_mar_2021_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_mar_2021_member_casual__member__casual.c63d9ab4d3", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_mar_2021_member_casual__member__casual"], "alias": "accepted_values_mar_2021_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.935416, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mar_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.mar_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.mar_2021", "attached_node": "model.data_transform.mar_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('mar_2021')) }}"}, "namespace": null}}, "test.data_transform.validate_month_mar_2021_ended_at__3__started_at.b217cf2f94": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_mar_2021_ended_at__3__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_mar_2021_ended_at__3__started_at.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.validate_month_mar_2021_ended_at__3__started_at.b217cf2f94", "fqn": ["data_transform", "intermediate", "yr_2021", "validate_month_mar_2021_ended_at__3__started_at"], "alias": "validate_month_mar_2021_ended_at__3__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.937703, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mar_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.mar_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.mar_2021", "attached_node": "model.data_transform.mar_2021", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 3, "model": "{{ get_where_subquery(ref('mar_2021')) }}"}, "namespace": null}}, "test.data_transform.unique_apr_2021_ride_id.7e13021df3": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_apr_2021_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_apr_2021_ride_id.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.unique_apr_2021_ride_id.7e13021df3", "fqn": ["data_transform", "intermediate", "yr_2021", "unique_apr_2021_ride_id"], "alias": "unique_apr_2021_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.940075, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "apr_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.apr_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.apr_2021", "attached_node": "model.data_transform.apr_2021", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('apr_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_apr_2021_rideable_type__electric_bike__classic_bike.f49a4db029": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_apr_2021_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_apr_2021_9e5a0b332403a8b0f83e41891f104309.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_apr_2021_rideable_type__electric_bike__classic_bike.f49a4db029", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_apr_2021_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_apr_2021_9e5a0b332403a8b0f83e41891f104309", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_apr_2021_9e5a0b332403a8b0f83e41891f104309", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_apr_2021_9e5a0b332403a8b0f83e41891f104309"}, "created_at": 1743088110.941078, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_apr_2021_9e5a0b332403a8b0f83e41891f104309\") }}", "language": "sql", "refs": [{"name": "apr_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.apr_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.apr_2021", "attached_node": "model.data_transform.apr_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('apr_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_apr_2021_member_casual__member__casual.c4aa44d3af": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_apr_2021_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_apr_2021_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_apr_2021_member_casual__member__casual.c4aa44d3af", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_apr_2021_member_casual__member__casual"], "alias": "accepted_values_apr_2021_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.94367, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "apr_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.apr_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.apr_2021", "attached_node": "model.data_transform.apr_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('apr_2021')) }}"}, "namespace": null}}, "test.data_transform.validate_month_apr_2021_ended_at__4__started_at.2e0eea5e91": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_apr_2021_ended_at__4__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_apr_2021_ended_at__4__started_at.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.validate_month_apr_2021_ended_at__4__started_at.2e0eea5e91", "fqn": ["data_transform", "intermediate", "yr_2021", "validate_month_apr_2021_ended_at__4__started_at"], "alias": "validate_month_apr_2021_ended_at__4__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.945963, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "apr_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.apr_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.apr_2021", "attached_node": "model.data_transform.apr_2021", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 4, "model": "{{ get_where_subquery(ref('apr_2021')) }}"}, "namespace": null}}, "test.data_transform.unique_may_2021_ride_id.2ea7626782": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_may_2021_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_may_2021_ride_id.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.unique_may_2021_ride_id.2ea7626782", "fqn": ["data_transform", "intermediate", "yr_2021", "unique_may_2021_ride_id"], "alias": "unique_may_2021_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.948341, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "may_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.may_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.may_2021", "attached_node": "model.data_transform.may_2021", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('may_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_may_2021_rideable_type__electric_bike__classic_bike.e375bb63f4": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_may_2021_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_may_2021_cf996c03826054b5a911f2445549d775.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_may_2021_rideable_type__electric_bike__classic_bike.e375bb63f4", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_may_2021_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_may_2021_cf996c03826054b5a911f2445549d775", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_may_2021_cf996c03826054b5a911f2445549d775", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_may_2021_cf996c03826054b5a911f2445549d775"}, "created_at": 1743088110.949345, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_may_2021_cf996c03826054b5a911f2445549d775\") }}", "language": "sql", "refs": [{"name": "may_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.may_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.may_2021", "attached_node": "model.data_transform.may_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('may_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_may_2021_member_casual__member__casual.1c07c6cfc4": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_may_2021_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_may_2021_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_may_2021_member_casual__member__casual.1c07c6cfc4", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_may_2021_member_casual__member__casual"], "alias": "accepted_values_may_2021_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.951924, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "may_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.may_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.may_2021", "attached_node": "model.data_transform.may_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('may_2021')) }}"}, "namespace": null}}, "test.data_transform.validate_month_may_2021_ended_at__5__started_at.4ca76f818f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_may_2021_ended_at__5__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_may_2021_ended_at__5__started_at.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.validate_month_may_2021_ended_at__5__started_at.4ca76f818f", "fqn": ["data_transform", "intermediate", "yr_2021", "validate_month_may_2021_ended_at__5__started_at"], "alias": "validate_month_may_2021_ended_at__5__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.954224, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "may_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.may_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.may_2021", "attached_node": "model.data_transform.may_2021", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 5, "model": "{{ get_where_subquery(ref('may_2021')) }}"}, "namespace": null}}, "test.data_transform.unique_jun_2021_ride_id.7d5ede7720": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_jun_2021_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_jun_2021_ride_id.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.unique_jun_2021_ride_id.7d5ede7720", "fqn": ["data_transform", "intermediate", "yr_2021", "unique_jun_2021_ride_id"], "alias": "unique_jun_2021_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.9565902, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jun_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.jun_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.jun_2021", "attached_node": "model.data_transform.jun_2021", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('jun_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jun_2021_rideable_type__electric_bike__classic_bike.fddc612ff9": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jun_2021_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jun_2021_7614fe31873f1e171cd8f9dd1e74b304.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_jun_2021_rideable_type__electric_bike__classic_bike.fddc612ff9", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_jun_2021_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_jun_2021_7614fe31873f1e171cd8f9dd1e74b304", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_jun_2021_7614fe31873f1e171cd8f9dd1e74b304", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_jun_2021_7614fe31873f1e171cd8f9dd1e74b304"}, "created_at": 1743088110.957588, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_jun_2021_7614fe31873f1e171cd8f9dd1e74b304\") }}", "language": "sql", "refs": [{"name": "jun_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jun_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.jun_2021", "attached_node": "model.data_transform.jun_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('jun_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jun_2021_member_casual__member__casual.22ffd8b463": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jun_2021_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jun_2021_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_jun_2021_member_casual__member__casual.22ffd8b463", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_jun_2021_member_casual__member__casual"], "alias": "accepted_values_jun_2021_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.960014, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jun_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jun_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.jun_2021", "attached_node": "model.data_transform.jun_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('jun_2021')) }}"}, "namespace": null}}, "test.data_transform.validate_month_jun_2021_ended_at__6__started_at.6bc752d476": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_jun_2021_ended_at__6__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_jun_2021_ended_at__6__started_at.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.validate_month_jun_2021_ended_at__6__started_at.6bc752d476", "fqn": ["data_transform", "intermediate", "yr_2021", "validate_month_jun_2021_ended_at__6__started_at"], "alias": "validate_month_jun_2021_ended_at__6__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.9624372, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jun_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jun_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.jun_2021", "attached_node": "model.data_transform.jun_2021", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 6, "model": "{{ get_where_subquery(ref('jun_2021')) }}"}, "namespace": null}}, "test.data_transform.unique_jul_2021_ride_id.a582178788": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_jul_2021_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_jul_2021_ride_id.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.unique_jul_2021_ride_id.a582178788", "fqn": ["data_transform", "intermediate", "yr_2021", "unique_jul_2021_ride_id"], "alias": "unique_jul_2021_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.965346, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jul_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.jul_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.jul_2021", "attached_node": "model.data_transform.jul_2021", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('jul_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jul_2021_rideable_type__electric_bike__classic_bike.21c9a88fb5": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jul_2021_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jul_2021_9d745a6913f3f16ec1cdda6817baf108.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_jul_2021_rideable_type__electric_bike__classic_bike.21c9a88fb5", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_jul_2021_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_jul_2021_9d745a6913f3f16ec1cdda6817baf108", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_jul_2021_9d745a6913f3f16ec1cdda6817baf108", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_jul_2021_9d745a6913f3f16ec1cdda6817baf108"}, "created_at": 1743088110.9663758, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_jul_2021_9d745a6913f3f16ec1cdda6817baf108\") }}", "language": "sql", "refs": [{"name": "jul_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jul_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.jul_2021", "attached_node": "model.data_transform.jul_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('jul_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jul_2021_member_casual__member__casual.a29b5393b0": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jul_2021_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jul_2021_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_jul_2021_member_casual__member__casual.a29b5393b0", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_jul_2021_member_casual__member__casual"], "alias": "accepted_values_jul_2021_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.968854, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jul_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jul_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.jul_2021", "attached_node": "model.data_transform.jul_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('jul_2021')) }}"}, "namespace": null}}, "test.data_transform.validate_month_jul_2021_ended_at__7__started_at.3097d5da75": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_jul_2021_ended_at__7__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_jul_2021_ended_at__7__started_at.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.validate_month_jul_2021_ended_at__7__started_at.3097d5da75", "fqn": ["data_transform", "intermediate", "yr_2021", "validate_month_jul_2021_ended_at__7__started_at"], "alias": "validate_month_jul_2021_ended_at__7__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.971273, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jul_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jul_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.jul_2021", "attached_node": "model.data_transform.jul_2021", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 7, "model": "{{ get_where_subquery(ref('jul_2021')) }}"}, "namespace": null}}, "test.data_transform.unique_aug_2021_ride_id.d87d9e6777": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_aug_2021_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_aug_2021_ride_id.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.unique_aug_2021_ride_id.d87d9e6777", "fqn": ["data_transform", "intermediate", "yr_2021", "unique_aug_2021_ride_id"], "alias": "unique_aug_2021_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.9734988, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aug_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.aug_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.aug_2021", "attached_node": "model.data_transform.aug_2021", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('aug_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_aug_2021_rideable_type__electric_bike__classic_bike.012aea4225": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_aug_2021_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_aug_2021_e6028e2ca07f90a6e984f098d383eebf.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_aug_2021_rideable_type__electric_bike__classic_bike.012aea4225", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_aug_2021_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_aug_2021_e6028e2ca07f90a6e984f098d383eebf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_aug_2021_e6028e2ca07f90a6e984f098d383eebf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_aug_2021_e6028e2ca07f90a6e984f098d383eebf"}, "created_at": 1743088110.974648, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_aug_2021_e6028e2ca07f90a6e984f098d383eebf\") }}", "language": "sql", "refs": [{"name": "aug_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.aug_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.aug_2021", "attached_node": "model.data_transform.aug_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('aug_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_aug_2021_member_casual__member__casual.f3756a66ce": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_aug_2021_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_aug_2021_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_aug_2021_member_casual__member__casual.f3756a66ce", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_aug_2021_member_casual__member__casual"], "alias": "accepted_values_aug_2021_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.9770849, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aug_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.aug_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.aug_2021", "attached_node": "model.data_transform.aug_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('aug_2021')) }}"}, "namespace": null}}, "test.data_transform.validate_month_aug_2021_ended_at__8__started_at.e0ce3a0178": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_aug_2021_ended_at__8__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_aug_2021_ended_at__8__started_at.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.validate_month_aug_2021_ended_at__8__started_at.e0ce3a0178", "fqn": ["data_transform", "intermediate", "yr_2021", "validate_month_aug_2021_ended_at__8__started_at"], "alias": "validate_month_aug_2021_ended_at__8__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.9795132, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aug_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.aug_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.aug_2021", "attached_node": "model.data_transform.aug_2021", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 8, "model": "{{ get_where_subquery(ref('aug_2021')) }}"}, "namespace": null}}, "test.data_transform.unique_sep_2021_ride_id.32890cd237": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_sep_2021_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_sep_2021_ride_id.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.unique_sep_2021_ride_id.32890cd237", "fqn": ["data_transform", "intermediate", "yr_2021", "unique_sep_2021_ride_id"], "alias": "unique_sep_2021_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.98173, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "sep_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.sep_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.sep_2021", "attached_node": "model.data_transform.sep_2021", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('sep_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_sep_2021_rideable_type__electric_bike__classic_bike.c4f3cf2112": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_sep_2021_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_sep_2021_9ac18e94387453498f41ddacbfa7ccf2.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_sep_2021_rideable_type__electric_bike__classic_bike.c4f3cf2112", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_sep_2021_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_sep_2021_9ac18e94387453498f41ddacbfa7ccf2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_sep_2021_9ac18e94387453498f41ddacbfa7ccf2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_sep_2021_9ac18e94387453498f41ddacbfa7ccf2"}, "created_at": 1743088110.982864, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_sep_2021_9ac18e94387453498f41ddacbfa7ccf2\") }}", "language": "sql", "refs": [{"name": "sep_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.sep_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.sep_2021", "attached_node": "model.data_transform.sep_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('sep_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_sep_2021_member_casual__member__casual.3be55b72cc": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_sep_2021_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_sep_2021_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_sep_2021_member_casual__member__casual.3be55b72cc", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_sep_2021_member_casual__member__casual"], "alias": "accepted_values_sep_2021_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.985587, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "sep_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.sep_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.sep_2021", "attached_node": "model.data_transform.sep_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('sep_2021')) }}"}, "namespace": null}}, "test.data_transform.validate_month_sep_2021_ended_at__9__started_at.4f1faa19df": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_sep_2021_ended_at__9__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_sep_2021_ended_at__9__started_at.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.validate_month_sep_2021_ended_at__9__started_at.4f1faa19df", "fqn": ["data_transform", "intermediate", "yr_2021", "validate_month_sep_2021_ended_at__9__started_at"], "alias": "validate_month_sep_2021_ended_at__9__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.989187, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "sep_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.sep_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.sep_2021", "attached_node": "model.data_transform.sep_2021", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 9, "model": "{{ get_where_subquery(ref('sep_2021')) }}"}, "namespace": null}}, "test.data_transform.unique_oct_2021_ride_id.2f8cb722e7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_oct_2021_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_oct_2021_ride_id.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.unique_oct_2021_ride_id.2f8cb722e7", "fqn": ["data_transform", "intermediate", "yr_2021", "unique_oct_2021_ride_id"], "alias": "unique_oct_2021_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.991542, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "oct_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.oct_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.oct_2021", "attached_node": "model.data_transform.oct_2021", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('oct_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_oct_2021_rideable_type__electric_bike__classic_bike.9840a619e2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_oct_2021_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_oct_2021_91682681b03b9a877b64b266a74bb6cd.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_oct_2021_rideable_type__electric_bike__classic_bike.9840a619e2", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_oct_2021_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_oct_2021_91682681b03b9a877b64b266a74bb6cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_oct_2021_91682681b03b9a877b64b266a74bb6cd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_oct_2021_91682681b03b9a877b64b266a74bb6cd"}, "created_at": 1743088110.9925618, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_oct_2021_91682681b03b9a877b64b266a74bb6cd\") }}", "language": "sql", "refs": [{"name": "oct_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.oct_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.oct_2021", "attached_node": "model.data_transform.oct_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('oct_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_oct_2021_member_casual__member__casual.c407993356": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_oct_2021_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_oct_2021_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_oct_2021_member_casual__member__casual.c407993356", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_oct_2021_member_casual__member__casual"], "alias": "accepted_values_oct_2021_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.995544, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "oct_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.oct_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.oct_2021", "attached_node": "model.data_transform.oct_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('oct_2021')) }}"}, "namespace": null}}, "test.data_transform.validate_month_oct_2021_ended_at__10__started_at.9f60196db4": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_oct_2021_ended_at__10__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_oct_2021_ended_at__10__started_at.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.validate_month_oct_2021_ended_at__10__started_at.9f60196db4", "fqn": ["data_transform", "intermediate", "yr_2021", "validate_month_oct_2021_ended_at__10__started_at"], "alias": "validate_month_oct_2021_ended_at__10__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088110.998196, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "oct_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.oct_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.oct_2021", "attached_node": "model.data_transform.oct_2021", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 10, "model": "{{ get_where_subquery(ref('oct_2021')) }}"}, "namespace": null}}, "test.data_transform.unique_nov_2021_ride_id.533acd63fc": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_nov_2021_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_nov_2021_ride_id.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.unique_nov_2021_ride_id.533acd63fc", "fqn": ["data_transform", "intermediate", "yr_2021", "unique_nov_2021_ride_id"], "alias": "unique_nov_2021_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.000538, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nov_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.nov_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.nov_2021", "attached_node": "model.data_transform.nov_2021", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('nov_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_nov_2021_rideable_type__electric_bike__classic_bike.02a6c0d9b1": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_nov_2021_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_nov_2021_42331bfb1ea25154a12c48243fedc98e.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_nov_2021_rideable_type__electric_bike__classic_bike.02a6c0d9b1", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_nov_2021_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_nov_2021_42331bfb1ea25154a12c48243fedc98e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_nov_2021_42331bfb1ea25154a12c48243fedc98e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_nov_2021_42331bfb1ea25154a12c48243fedc98e"}, "created_at": 1743088111.001554, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_nov_2021_42331bfb1ea25154a12c48243fedc98e\") }}", "language": "sql", "refs": [{"name": "nov_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.nov_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.nov_2021", "attached_node": "model.data_transform.nov_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('nov_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_nov_2021_member_casual__member__casual.769f004905": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_nov_2021_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_nov_2021_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_nov_2021_member_casual__member__casual.769f004905", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_nov_2021_member_casual__member__casual"], "alias": "accepted_values_nov_2021_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.004232, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nov_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.nov_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.nov_2021", "attached_node": "model.data_transform.nov_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('nov_2021')) }}"}, "namespace": null}}, "test.data_transform.validate_month_nov_2021_ended_at__11__started_at.de83a5afbb": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_nov_2021_ended_at__11__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_nov_2021_ended_at__11__started_at.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.validate_month_nov_2021_ended_at__11__started_at.de83a5afbb", "fqn": ["data_transform", "intermediate", "yr_2021", "validate_month_nov_2021_ended_at__11__started_at"], "alias": "validate_month_nov_2021_ended_at__11__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.0065541, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nov_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.nov_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nov_2021", "attached_node": "model.data_transform.nov_2021", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 11, "model": "{{ get_where_subquery(ref('nov_2021')) }}"}, "namespace": null}}, "test.data_transform.unique_dec_2021_ride_id.7cef2ecfc6": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_dec_2021_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_dec_2021_ride_id.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.unique_dec_2021_ride_id.7cef2ecfc6", "fqn": ["data_transform", "intermediate", "yr_2021", "unique_dec_2021_ride_id"], "alias": "unique_dec_2021_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.008957, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dec_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.dec_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.dec_2021", "attached_node": "model.data_transform.dec_2021", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('dec_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_dec_2021_rideable_type__electric_bike__classic_bike.b3361baeb7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_dec_2021_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_dec_2021_b27166eff4ff2b5ce5d5aa7a80011a58.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_dec_2021_rideable_type__electric_bike__classic_bike.b3361baeb7", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_dec_2021_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_dec_2021_b27166eff4ff2b5ce5d5aa7a80011a58", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dec_2021_b27166eff4ff2b5ce5d5aa7a80011a58", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_dec_2021_b27166eff4ff2b5ce5d5aa7a80011a58"}, "created_at": 1743088111.0099561, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dec_2021_b27166eff4ff2b5ce5d5aa7a80011a58\") }}", "language": "sql", "refs": [{"name": "dec_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.dec_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.dec_2021", "attached_node": "model.data_transform.dec_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('dec_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_dec_2021_member_casual__member__casual.e47c83f669": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_dec_2021_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_dec_2021_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_dec_2021_member_casual__member__casual.e47c83f669", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_dec_2021_member_casual__member__casual"], "alias": "accepted_values_dec_2021_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.012562, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dec_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.dec_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.dec_2021", "attached_node": "model.data_transform.dec_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('dec_2021')) }}"}, "namespace": null}}, "test.data_transform.validate_month_dec_2021_ended_at__12__started_at.dc415b74bb": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_dec_2021_ended_at__12__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_dec_2021_ended_at__12__started_at.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.validate_month_dec_2021_ended_at__12__started_at.dc415b74bb", "fqn": ["data_transform", "intermediate", "yr_2021", "validate_month_dec_2021_ended_at__12__started_at"], "alias": "validate_month_dec_2021_ended_at__12__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.0148711, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dec_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.dec_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dec_2021", "attached_node": "model.data_transform.dec_2021", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 12, "model": "{{ get_where_subquery(ref('dec_2021')) }}"}, "namespace": null}}, "test.data_transform.unique_yr_2021_ride_id.21f7ca9901": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_yr_2021_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_yr_2021_ride_id.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.unique_yr_2021_ride_id.21f7ca9901", "fqn": ["data_transform", "intermediate", "yr_2021", "unique_yr_2021_ride_id"], "alias": "unique_yr_2021_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.0173519, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "yr_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.yr_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.yr_2021", "attached_node": "model.data_transform.yr_2021", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('yr_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_yr_2021_rideable_type__electric_bike__classic_bike.b7ea1ba880": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_yr_2021_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_yr_2021_9d653b8cf2c6bbc239210f9f8ac8def9.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_yr_2021_rideable_type__electric_bike__classic_bike.b7ea1ba880", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_yr_2021_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_yr_2021_9d653b8cf2c6bbc239210f9f8ac8def9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_yr_2021_9d653b8cf2c6bbc239210f9f8ac8def9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_yr_2021_9d653b8cf2c6bbc239210f9f8ac8def9"}, "created_at": 1743088111.018697, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_yr_2021_9d653b8cf2c6bbc239210f9f8ac8def9\") }}", "language": "sql", "refs": [{"name": "yr_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.yr_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.yr_2021", "attached_node": "model.data_transform.yr_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('yr_2021')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_yr_2021_member_casual__member__casual.53901ff579": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_yr_2021_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_yr_2021_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2021/_yr_2021__schema.yml", "unique_id": "test.data_transform.accepted_values_yr_2021_member_casual__member__casual.53901ff579", "fqn": ["data_transform", "intermediate", "yr_2021", "accepted_values_yr_2021_member_casual__member__casual"], "alias": "accepted_values_yr_2021_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.022015, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "yr_2021", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.yr_2021"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.yr_2021", "attached_node": "model.data_transform.yr_2021", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('yr_2021')) }}"}, "namespace": null}}, "test.data_transform.unique_jan_2020_ride_id.d7f848f40f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_jan_2020_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_jan_2020_ride_id.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.unique_jan_2020_ride_id.d7f848f40f", "fqn": ["data_transform", "intermediate", "yr_2020", "unique_jan_2020_ride_id"], "alias": "unique_jan_2020_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.042681, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jan_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.jan_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.jan_2020", "attached_node": "model.data_transform.jan_2020", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('jan_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jan_2020_rideable_type__electric_bike__classic_bike.12497815ca": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jan_2020_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jan_2020_87e1635cf1b9f7212301f843c4267ee5.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_jan_2020_rideable_type__electric_bike__classic_bike.12497815ca", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_jan_2020_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_jan_2020_87e1635cf1b9f7212301f843c4267ee5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_jan_2020_87e1635cf1b9f7212301f843c4267ee5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_jan_2020_87e1635cf1b9f7212301f843c4267ee5"}, "created_at": 1743088111.043705, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_jan_2020_87e1635cf1b9f7212301f843c4267ee5\") }}", "language": "sql", "refs": [{"name": "jan_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jan_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.jan_2020", "attached_node": "model.data_transform.jan_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('jan_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jan_2020_member_casual__member__casual.d96c161781": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jan_2020_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jan_2020_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_jan_2020_member_casual__member__casual.d96c161781", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_jan_2020_member_casual__member__casual"], "alias": "accepted_values_jan_2020_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.0465448, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jan_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jan_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.jan_2020", "attached_node": "model.data_transform.jan_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('jan_2020')) }}"}, "namespace": null}}, "test.data_transform.validate_month_jan_2020_ended_at__1__started_at.257dda2cf0": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_jan_2020_ended_at__1__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_jan_2020_ended_at__1__started_at.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.validate_month_jan_2020_ended_at__1__started_at.257dda2cf0", "fqn": ["data_transform", "intermediate", "yr_2020", "validate_month_jan_2020_ended_at__1__started_at"], "alias": "validate_month_jan_2020_ended_at__1__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.0490408, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jan_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jan_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.jan_2020", "attached_node": "model.data_transform.jan_2020", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 1, "model": "{{ get_where_subquery(ref('jan_2020')) }}"}, "namespace": null}}, "test.data_transform.unique_feb_2020_ride_id.2863b73a76": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_feb_2020_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_feb_2020_ride_id.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.unique_feb_2020_ride_id.2863b73a76", "fqn": ["data_transform", "intermediate", "yr_2020", "unique_feb_2020_ride_id"], "alias": "unique_feb_2020_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.0536041, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "feb_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.feb_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.feb_2020", "attached_node": "model.data_transform.feb_2020", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('feb_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_feb_2020_rideable_type__electric_bike__classic_bike.98681257a0": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_feb_2020_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_feb_2020_6bb10808383e50302ff72472b43cc41d.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_feb_2020_rideable_type__electric_bike__classic_bike.98681257a0", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_feb_2020_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_feb_2020_6bb10808383e50302ff72472b43cc41d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_feb_2020_6bb10808383e50302ff72472b43cc41d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_feb_2020_6bb10808383e50302ff72472b43cc41d"}, "created_at": 1743088111.0547469, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_feb_2020_6bb10808383e50302ff72472b43cc41d\") }}", "language": "sql", "refs": [{"name": "feb_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.feb_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.feb_2020", "attached_node": "model.data_transform.feb_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('feb_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_feb_2020_member_casual__member__casual.1ab0133baf": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_feb_2020_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_feb_2020_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_feb_2020_member_casual__member__casual.1ab0133baf", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_feb_2020_member_casual__member__casual"], "alias": "accepted_values_feb_2020_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.05763, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "feb_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.feb_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.feb_2020", "attached_node": "model.data_transform.feb_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('feb_2020')) }}"}, "namespace": null}}, "test.data_transform.validate_month_feb_2020_ended_at__2__started_at.4814bc395a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_feb_2020_ended_at__2__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_feb_2020_ended_at__2__started_at.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.validate_month_feb_2020_ended_at__2__started_at.4814bc395a", "fqn": ["data_transform", "intermediate", "yr_2020", "validate_month_feb_2020_ended_at__2__started_at"], "alias": "validate_month_feb_2020_ended_at__2__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.059985, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "feb_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.feb_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.feb_2020", "attached_node": "model.data_transform.feb_2020", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 2, "model": "{{ get_where_subquery(ref('feb_2020')) }}"}, "namespace": null}}, "test.data_transform.unique_mar_2020_ride_id.c99a254af6": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_mar_2020_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_mar_2020_ride_id.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.unique_mar_2020_ride_id.c99a254af6", "fqn": ["data_transform", "intermediate", "yr_2020", "unique_mar_2020_ride_id"], "alias": "unique_mar_2020_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.06243, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mar_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.mar_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.mar_2020", "attached_node": "model.data_transform.mar_2020", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('mar_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_mar_2020_rideable_type__electric_bike__classic_bike.7c02e59976": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_mar_2020_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_mar_2020_56df1163b258a572e16a13a3fd4557cd.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_mar_2020_rideable_type__electric_bike__classic_bike.7c02e59976", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_mar_2020_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_mar_2020_56df1163b258a572e16a13a3fd4557cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_mar_2020_56df1163b258a572e16a13a3fd4557cd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_mar_2020_56df1163b258a572e16a13a3fd4557cd"}, "created_at": 1743088111.0634408, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_mar_2020_56df1163b258a572e16a13a3fd4557cd\") }}", "language": "sql", "refs": [{"name": "mar_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.mar_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.mar_2020", "attached_node": "model.data_transform.mar_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('mar_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_mar_2020_member_casual__member__casual.7293d4266b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_mar_2020_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_mar_2020_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_mar_2020_member_casual__member__casual.7293d4266b", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_mar_2020_member_casual__member__casual"], "alias": "accepted_values_mar_2020_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.066061, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mar_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.mar_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.mar_2020", "attached_node": "model.data_transform.mar_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('mar_2020')) }}"}, "namespace": null}}, "test.data_transform.validate_month_mar_2020_ended_at__3__started_at.c7c934cd64": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_mar_2020_ended_at__3__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_mar_2020_ended_at__3__started_at.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.validate_month_mar_2020_ended_at__3__started_at.c7c934cd64", "fqn": ["data_transform", "intermediate", "yr_2020", "validate_month_mar_2020_ended_at__3__started_at"], "alias": "validate_month_mar_2020_ended_at__3__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.068351, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mar_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.mar_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.mar_2020", "attached_node": "model.data_transform.mar_2020", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 3, "model": "{{ get_where_subquery(ref('mar_2020')) }}"}, "namespace": null}}, "test.data_transform.unique_apr_2020_ride_id.02de6a5c7b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_apr_2020_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_apr_2020_ride_id.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.unique_apr_2020_ride_id.02de6a5c7b", "fqn": ["data_transform", "intermediate", "yr_2020", "unique_apr_2020_ride_id"], "alias": "unique_apr_2020_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.070786, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "apr_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.apr_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.apr_2020", "attached_node": "model.data_transform.apr_2020", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('apr_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_apr_2020_rideable_type__electric_bike__classic_bike.d067ffd016": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_apr_2020_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_apr_2020_5f0dde5a48e76746f71c3737caaa4cc0.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_apr_2020_rideable_type__electric_bike__classic_bike.d067ffd016", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_apr_2020_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_apr_2020_5f0dde5a48e76746f71c3737caaa4cc0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_apr_2020_5f0dde5a48e76746f71c3737caaa4cc0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_apr_2020_5f0dde5a48e76746f71c3737caaa4cc0"}, "created_at": 1743088111.0717812, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_apr_2020_5f0dde5a48e76746f71c3737caaa4cc0\") }}", "language": "sql", "refs": [{"name": "apr_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.apr_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.apr_2020", "attached_node": "model.data_transform.apr_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('apr_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_apr_2020_member_casual__member__casual.2244954a2f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_apr_2020_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_apr_2020_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_apr_2020_member_casual__member__casual.2244954a2f", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_apr_2020_member_casual__member__casual"], "alias": "accepted_values_apr_2020_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.074358, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "apr_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.apr_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.apr_2020", "attached_node": "model.data_transform.apr_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('apr_2020')) }}"}, "namespace": null}}, "test.data_transform.validate_month_apr_2020_ended_at__4__started_at.9ab8e8eab1": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_apr_2020_ended_at__4__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_apr_2020_ended_at__4__started_at.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.validate_month_apr_2020_ended_at__4__started_at.9ab8e8eab1", "fqn": ["data_transform", "intermediate", "yr_2020", "validate_month_apr_2020_ended_at__4__started_at"], "alias": "validate_month_apr_2020_ended_at__4__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.07665, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "apr_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.apr_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.apr_2020", "attached_node": "model.data_transform.apr_2020", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 4, "model": "{{ get_where_subquery(ref('apr_2020')) }}"}, "namespace": null}}, "test.data_transform.unique_may_2020_ride_id.78e3c89f75": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_may_2020_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_may_2020_ride_id.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.unique_may_2020_ride_id.78e3c89f75", "fqn": ["data_transform", "intermediate", "yr_2020", "unique_may_2020_ride_id"], "alias": "unique_may_2020_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.079788, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "may_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.may_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.may_2020", "attached_node": "model.data_transform.may_2020", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('may_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_may_2020_rideable_type__electric_bike__classic_bike.b54580f2ec": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_may_2020_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_may_2020_b205166887751fffaa59c2d350885e3f.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_may_2020_rideable_type__electric_bike__classic_bike.b54580f2ec", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_may_2020_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_may_2020_b205166887751fffaa59c2d350885e3f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_may_2020_b205166887751fffaa59c2d350885e3f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_may_2020_b205166887751fffaa59c2d350885e3f"}, "created_at": 1743088111.0807822, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_may_2020_b205166887751fffaa59c2d350885e3f\") }}", "language": "sql", "refs": [{"name": "may_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.may_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.may_2020", "attached_node": "model.data_transform.may_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('may_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_may_2020_member_casual__member__casual.024c76cb43": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_may_2020_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_may_2020_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_may_2020_member_casual__member__casual.024c76cb43", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_may_2020_member_casual__member__casual"], "alias": "accepted_values_may_2020_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.0833821, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "may_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.may_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.may_2020", "attached_node": "model.data_transform.may_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('may_2020')) }}"}, "namespace": null}}, "test.data_transform.validate_month_may_2020_ended_at__5__started_at.3fc7180008": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_may_2020_ended_at__5__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_may_2020_ended_at__5__started_at.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.validate_month_may_2020_ended_at__5__started_at.3fc7180008", "fqn": ["data_transform", "intermediate", "yr_2020", "validate_month_may_2020_ended_at__5__started_at"], "alias": "validate_month_may_2020_ended_at__5__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.086624, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "may_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.may_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.may_2020", "attached_node": "model.data_transform.may_2020", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 5, "model": "{{ get_where_subquery(ref('may_2020')) }}"}, "namespace": null}}, "test.data_transform.unique_jun_2020_ride_id.c525f2e358": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_jun_2020_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_jun_2020_ride_id.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.unique_jun_2020_ride_id.c525f2e358", "fqn": ["data_transform", "intermediate", "yr_2020", "unique_jun_2020_ride_id"], "alias": "unique_jun_2020_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.0892632, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jun_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.jun_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.jun_2020", "attached_node": "model.data_transform.jun_2020", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('jun_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jun_2020_rideable_type__electric_bike__classic_bike.5f2c1f91ac": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jun_2020_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jun_2020_a83c64de1e2ecca8e1adb498593dd13e.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_jun_2020_rideable_type__electric_bike__classic_bike.5f2c1f91ac", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_jun_2020_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_jun_2020_a83c64de1e2ecca8e1adb498593dd13e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_jun_2020_a83c64de1e2ecca8e1adb498593dd13e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_jun_2020_a83c64de1e2ecca8e1adb498593dd13e"}, "created_at": 1743088111.090291, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_jun_2020_a83c64de1e2ecca8e1adb498593dd13e\") }}", "language": "sql", "refs": [{"name": "jun_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jun_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.jun_2020", "attached_node": "model.data_transform.jun_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('jun_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jun_2020_member_casual__member__casual.754f3c2310": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jun_2020_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jun_2020_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_jun_2020_member_casual__member__casual.754f3c2310", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_jun_2020_member_casual__member__casual"], "alias": "accepted_values_jun_2020_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.0927858, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jun_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jun_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.jun_2020", "attached_node": "model.data_transform.jun_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('jun_2020')) }}"}, "namespace": null}}, "test.data_transform.validate_month_jun_2020_ended_at__6__started_at.6727663680": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_jun_2020_ended_at__6__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_jun_2020_ended_at__6__started_at.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.validate_month_jun_2020_ended_at__6__started_at.6727663680", "fqn": ["data_transform", "intermediate", "yr_2020", "validate_month_jun_2020_ended_at__6__started_at"], "alias": "validate_month_jun_2020_ended_at__6__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.098709, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jun_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jun_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.jun_2020", "attached_node": "model.data_transform.jun_2020", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 6, "model": "{{ get_where_subquery(ref('jun_2020')) }}"}, "namespace": null}}, "test.data_transform.unique_jul_2020_ride_id.ffba163677": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_jul_2020_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_jul_2020_ride_id.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.unique_jul_2020_ride_id.ffba163677", "fqn": ["data_transform", "intermediate", "yr_2020", "unique_jul_2020_ride_id"], "alias": "unique_jul_2020_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.106771, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jul_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.jul_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.jul_2020", "attached_node": "model.data_transform.jul_2020", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('jul_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jul_2020_rideable_type__electric_bike__classic_bike.b6da95939a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jul_2020_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jul_2020_3c8952dc697848b3960d07352783bb03.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_jul_2020_rideable_type__electric_bike__classic_bike.b6da95939a", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_jul_2020_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_jul_2020_3c8952dc697848b3960d07352783bb03", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_jul_2020_3c8952dc697848b3960d07352783bb03", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_jul_2020_3c8952dc697848b3960d07352783bb03"}, "created_at": 1743088111.1078029, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_jul_2020_3c8952dc697848b3960d07352783bb03\") }}", "language": "sql", "refs": [{"name": "jul_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jul_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.jul_2020", "attached_node": "model.data_transform.jul_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('jul_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_jul_2020_member_casual__member__casual.64e1bf3713": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_jul_2020_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_jul_2020_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_jul_2020_member_casual__member__casual.64e1bf3713", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_jul_2020_member_casual__member__casual"], "alias": "accepted_values_jul_2020_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.110521, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jul_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jul_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.jul_2020", "attached_node": "model.data_transform.jul_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('jul_2020')) }}"}, "namespace": null}}, "test.data_transform.validate_month_jul_2020_ended_at__7__started_at.221b4b2b79": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_jul_2020_ended_at__7__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_jul_2020_ended_at__7__started_at.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.validate_month_jul_2020_ended_at__7__started_at.221b4b2b79", "fqn": ["data_transform", "intermediate", "yr_2020", "validate_month_jul_2020_ended_at__7__started_at"], "alias": "validate_month_jul_2020_ended_at__7__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.113011, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "jul_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.jul_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.jul_2020", "attached_node": "model.data_transform.jul_2020", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 7, "model": "{{ get_where_subquery(ref('jul_2020')) }}"}, "namespace": null}}, "test.data_transform.unique_aug_2020_ride_id.4b7b980c18": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_aug_2020_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_aug_2020_ride_id.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.unique_aug_2020_ride_id.4b7b980c18", "fqn": ["data_transform", "intermediate", "yr_2020", "unique_aug_2020_ride_id"], "alias": "unique_aug_2020_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.115277, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aug_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.aug_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.aug_2020", "attached_node": "model.data_transform.aug_2020", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('aug_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_aug_2020_rideable_type__electric_bike__classic_bike.613c74bb29": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_aug_2020_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_aug_2020_80d585958c895902b2a1df18e8911bac.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_aug_2020_rideable_type__electric_bike__classic_bike.613c74bb29", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_aug_2020_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_aug_2020_80d585958c895902b2a1df18e8911bac", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_aug_2020_80d585958c895902b2a1df18e8911bac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_aug_2020_80d585958c895902b2a1df18e8911bac"}, "created_at": 1743088111.11646, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_aug_2020_80d585958c895902b2a1df18e8911bac\") }}", "language": "sql", "refs": [{"name": "aug_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.aug_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.aug_2020", "attached_node": "model.data_transform.aug_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('aug_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_aug_2020_member_casual__member__casual.1d2e2220a2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_aug_2020_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_aug_2020_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_aug_2020_member_casual__member__casual.1d2e2220a2", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_aug_2020_member_casual__member__casual"], "alias": "accepted_values_aug_2020_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.1189408, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aug_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.aug_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.aug_2020", "attached_node": "model.data_transform.aug_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('aug_2020')) }}"}, "namespace": null}}, "test.data_transform.validate_month_aug_2020_ended_at__8__started_at.3bda851154": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_aug_2020_ended_at__8__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_aug_2020_ended_at__8__started_at.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.validate_month_aug_2020_ended_at__8__started_at.3bda851154", "fqn": ["data_transform", "intermediate", "yr_2020", "validate_month_aug_2020_ended_at__8__started_at"], "alias": "validate_month_aug_2020_ended_at__8__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.121409, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aug_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.aug_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.aug_2020", "attached_node": "model.data_transform.aug_2020", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 8, "model": "{{ get_where_subquery(ref('aug_2020')) }}"}, "namespace": null}}, "test.data_transform.unique_sep_2020_ride_id.691437c7e4": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_sep_2020_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_sep_2020_ride_id.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.unique_sep_2020_ride_id.691437c7e4", "fqn": ["data_transform", "intermediate", "yr_2020", "unique_sep_2020_ride_id"], "alias": "unique_sep_2020_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.123641, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "sep_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.sep_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.sep_2020", "attached_node": "model.data_transform.sep_2020", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('sep_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_sep_2020_rideable_type__electric_bike__classic_bike.144c92218b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_sep_2020_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_sep_2020_49aa80bc1141ded044d8ff7e79555827.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_sep_2020_rideable_type__electric_bike__classic_bike.144c92218b", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_sep_2020_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_sep_2020_49aa80bc1141ded044d8ff7e79555827", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_sep_2020_49aa80bc1141ded044d8ff7e79555827", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_sep_2020_49aa80bc1141ded044d8ff7e79555827"}, "created_at": 1743088111.1247811, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_sep_2020_49aa80bc1141ded044d8ff7e79555827\") }}", "language": "sql", "refs": [{"name": "sep_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.sep_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.sep_2020", "attached_node": "model.data_transform.sep_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('sep_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_sep_2020_member_casual__member__casual.7345a381fb": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_sep_2020_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_sep_2020_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_sep_2020_member_casual__member__casual.7345a381fb", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_sep_2020_member_casual__member__casual"], "alias": "accepted_values_sep_2020_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.127237, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "sep_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.sep_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.sep_2020", "attached_node": "model.data_transform.sep_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('sep_2020')) }}"}, "namespace": null}}, "test.data_transform.validate_month_sep_2020_ended_at__9__started_at.4f7fb6c985": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_sep_2020_ended_at__9__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_sep_2020_ended_at__9__started_at.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.validate_month_sep_2020_ended_at__9__started_at.4f7fb6c985", "fqn": ["data_transform", "intermediate", "yr_2020", "validate_month_sep_2020_ended_at__9__started_at"], "alias": "validate_month_sep_2020_ended_at__9__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.1297019, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "sep_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.sep_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.sep_2020", "attached_node": "model.data_transform.sep_2020", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 9, "model": "{{ get_where_subquery(ref('sep_2020')) }}"}, "namespace": null}}, "test.data_transform.unique_oct_2020_ride_id.450c9e6451": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_oct_2020_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_oct_2020_ride_id.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.unique_oct_2020_ride_id.450c9e6451", "fqn": ["data_transform", "intermediate", "yr_2020", "unique_oct_2020_ride_id"], "alias": "unique_oct_2020_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.131938, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "oct_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.oct_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.oct_2020", "attached_node": "model.data_transform.oct_2020", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('oct_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_oct_2020_rideable_type__electric_bike__classic_bike.6be618cf23": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_oct_2020_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_oct_2020_a576ae8b6ee60da931b8dff05da89d5d.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_oct_2020_rideable_type__electric_bike__classic_bike.6be618cf23", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_oct_2020_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_oct_2020_a576ae8b6ee60da931b8dff05da89d5d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_oct_2020_a576ae8b6ee60da931b8dff05da89d5d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_oct_2020_a576ae8b6ee60da931b8dff05da89d5d"}, "created_at": 1743088111.1329548, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_oct_2020_a576ae8b6ee60da931b8dff05da89d5d\") }}", "language": "sql", "refs": [{"name": "oct_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.oct_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.oct_2020", "attached_node": "model.data_transform.oct_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('oct_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_oct_2020_member_casual__member__casual.3d2830f139": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_oct_2020_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_oct_2020_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_oct_2020_member_casual__member__casual.3d2830f139", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_oct_2020_member_casual__member__casual"], "alias": "accepted_values_oct_2020_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.135562, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "oct_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.oct_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.oct_2020", "attached_node": "model.data_transform.oct_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('oct_2020')) }}"}, "namespace": null}}, "test.data_transform.validate_month_oct_2020_ended_at__10__started_at.36c2f3703c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_oct_2020_ended_at__10__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_oct_2020_ended_at__10__started_at.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.validate_month_oct_2020_ended_at__10__started_at.36c2f3703c", "fqn": ["data_transform", "intermediate", "yr_2020", "validate_month_oct_2020_ended_at__10__started_at"], "alias": "validate_month_oct_2020_ended_at__10__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.137999, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "oct_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.oct_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.oct_2020", "attached_node": "model.data_transform.oct_2020", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 10, "model": "{{ get_where_subquery(ref('oct_2020')) }}"}, "namespace": null}}, "test.data_transform.unique_nov_2020_ride_id.f410d7ba06": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_nov_2020_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_nov_2020_ride_id.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.unique_nov_2020_ride_id.f410d7ba06", "fqn": ["data_transform", "intermediate", "yr_2020", "unique_nov_2020_ride_id"], "alias": "unique_nov_2020_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.1402318, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nov_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.nov_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.nov_2020", "attached_node": "model.data_transform.nov_2020", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('nov_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_nov_2020_rideable_type__electric_bike__classic_bike.1a6fd96aee": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_nov_2020_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_nov_2020_6abda5a47165760df956f8efe755cfaf.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_nov_2020_rideable_type__electric_bike__classic_bike.1a6fd96aee", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_nov_2020_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_nov_2020_6abda5a47165760df956f8efe755cfaf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_nov_2020_6abda5a47165760df956f8efe755cfaf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_nov_2020_6abda5a47165760df956f8efe755cfaf"}, "created_at": 1743088111.141232, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_nov_2020_6abda5a47165760df956f8efe755cfaf\") }}", "language": "sql", "refs": [{"name": "nov_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.nov_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.nov_2020", "attached_node": "model.data_transform.nov_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('nov_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_nov_2020_member_casual__member__casual.17e252714c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_nov_2020_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_nov_2020_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_nov_2020_member_casual__member__casual.17e252714c", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_nov_2020_member_casual__member__casual"], "alias": "accepted_values_nov_2020_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.144286, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nov_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.nov_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.nov_2020", "attached_node": "model.data_transform.nov_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('nov_2020')) }}"}, "namespace": null}}, "test.data_transform.validate_month_nov_2020_ended_at__11__started_at.4a83d36de2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_nov_2020_ended_at__11__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_nov_2020_ended_at__11__started_at.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.validate_month_nov_2020_ended_at__11__started_at.4a83d36de2", "fqn": ["data_transform", "intermediate", "yr_2020", "validate_month_nov_2020_ended_at__11__started_at"], "alias": "validate_month_nov_2020_ended_at__11__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.146595, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nov_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.nov_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.nov_2020", "attached_node": "model.data_transform.nov_2020", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 11, "model": "{{ get_where_subquery(ref('nov_2020')) }}"}, "namespace": null}}, "test.data_transform.unique_dec_2020_ride_id.865a6e795e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_dec_2020_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_dec_2020_ride_id.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.unique_dec_2020_ride_id.865a6e795e", "fqn": ["data_transform", "intermediate", "yr_2020", "unique_dec_2020_ride_id"], "alias": "unique_dec_2020_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.148981, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dec_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.dec_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.dec_2020", "attached_node": "model.data_transform.dec_2020", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('dec_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_dec_2020_rideable_type__electric_bike__classic_bike.8bd26e5ce0": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_dec_2020_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_dec_2020_5ccbd97c91f7e42313d39625e74a1ffa.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_dec_2020_rideable_type__electric_bike__classic_bike.8bd26e5ce0", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_dec_2020_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_dec_2020_5ccbd97c91f7e42313d39625e74a1ffa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dec_2020_5ccbd97c91f7e42313d39625e74a1ffa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_dec_2020_5ccbd97c91f7e42313d39625e74a1ffa"}, "created_at": 1743088111.149993, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dec_2020_5ccbd97c91f7e42313d39625e74a1ffa\") }}", "language": "sql", "refs": [{"name": "dec_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.dec_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.dec_2020", "attached_node": "model.data_transform.dec_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('dec_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_dec_2020_member_casual__member__casual.fdc66d6744": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_dec_2020_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_dec_2020_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_dec_2020_member_casual__member__casual.fdc66d6744", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_dec_2020_member_casual__member__casual"], "alias": "accepted_values_dec_2020_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.152589, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dec_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.dec_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.dec_2020", "attached_node": "model.data_transform.dec_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('dec_2020')) }}"}, "namespace": null}}, "test.data_transform.validate_month_dec_2020_ended_at__12__started_at.5b5f2a4319": {"database": "dev", "schema": "main_dbt_test__audit", "name": "validate_month_dec_2020_ended_at__12__started_at", "resource_type": "test", "package_name": "data_transform", "path": "validate_month_dec_2020_ended_at__12__started_at.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.validate_month_dec_2020_ended_at__12__started_at.5b5f2a4319", "fqn": ["data_transform", "intermediate", "yr_2020", "validate_month_dec_2020_ended_at__12__started_at"], "alias": "validate_month_dec_2020_ended_at__12__started_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.1548958, "relation_name": null, "raw_code": "{{ test_validate_month(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dec_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.data_transform.test_validate_month", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.dec_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dec_2020", "attached_node": "model.data_transform.dec_2020", "test_metadata": {"name": "validate_month", "kwargs": {"started_at_col": "started_at", "ended_at_col": "ended_at", "month_idx": 12, "model": "{{ get_where_subquery(ref('dec_2020')) }}"}, "namespace": null}}, "test.data_transform.unique_yr_2020_ride_id.a710725493": {"database": "dev", "schema": "main_dbt_test__audit", "name": "unique_yr_2020_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "unique_yr_2020_ride_id.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.unique_yr_2020_ride_id.a710725493", "fqn": ["data_transform", "intermediate", "yr_2020", "unique_yr_2020_ride_id"], "alias": "unique_yr_2020_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.1572852, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "yr_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.data_transform.yr_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "models.yr_2020", "attached_node": "model.data_transform.yr_2020", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(ref('yr_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_yr_2020_rideable_type__electric_bike__classic_bike.5a0f9a6a7d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_yr_2020_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_yr_2020_8844140357d762cb15515deabc25b6aa.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_yr_2020_rideable_type__electric_bike__classic_bike.5a0f9a6a7d", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_yr_2020_rideable_type__electric_bike__classic_bike"], "alias": "accepted_values_yr_2020_8844140357d762cb15515deabc25b6aa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_yr_2020_8844140357d762cb15515deabc25b6aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_yr_2020_8844140357d762cb15515deabc25b6aa"}, "created_at": 1743088111.158299, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_yr_2020_8844140357d762cb15515deabc25b6aa\") }}", "language": "sql", "refs": [{"name": "yr_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.yr_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "models.yr_2020", "attached_node": "model.data_transform.yr_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(ref('yr_2020')) }}"}, "namespace": null}}, "test.data_transform.accepted_values_yr_2020_member_casual__member__casual.5fad00c049": {"database": "dev", "schema": "main_dbt_test__audit", "name": "accepted_values_yr_2020_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "accepted_values_yr_2020_member_casual__member__casual.sql", "original_file_path": "models/intermediate/yr_2020/_yr_2020__schema.yml", "unique_id": "test.data_transform.accepted_values_yr_2020_member_casual__member__casual.5fad00c049", "fqn": ["data_transform", "intermediate", "yr_2020", "accepted_values_yr_2020_member_casual__member__casual"], "alias": "accepted_values_yr_2020_member_casual__member__casual", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.160892, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "yr_2020", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.data_transform.yr_2020"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "models.yr_2020", "attached_node": "model.data_transform.yr_2020", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(ref('yr_2020')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2025_202501_citibike_tripdata_1_ride_id.502692c8d3": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2025_202501_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2025_202501_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2025_202501_citibike_tripdata_1_ride_id.502692c8d3", "fqn": ["data_transform", "staging", "source_unique_staging_2025_202501_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2025_202501_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.1674418, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2025", "202501_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2025.202501_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2025", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2025', '202501_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.06fcb921da": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2025_202501_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_f8363049536806cc79740d3a22966f87.sql", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.06fcb921da", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2025_202501_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_f8363049536806cc79740d3a22966f87", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_f8363049536806cc79740d3a22966f87", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_f8363049536806cc79740d3a22966f87"}, "created_at": 1743088111.168455, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_f8363049536806cc79740d3a22966f87\") }}", "language": "sql", "refs": [], "sources": [["staging_2025", "202501_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2025.202501_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2025", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2025', '202501_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_1_member_casual__member__casual.4b04a3b2e7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2025_202501_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_dbc6a02b4fcff8d0a0a7a1bc16a0ca74.sql", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_1_member_casual__member__casual.4b04a3b2e7", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2025_202501_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_dbc6a02b4fcff8d0a0a7a1bc16a0ca74", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_dbc6a02b4fcff8d0a0a7a1bc16a0ca74", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_dbc6a02b4fcff8d0a0a7a1bc16a0ca74"}, "created_at": 1743088111.171148, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_dbc6a02b4fcff8d0a0a7a1bc16a0ca74\") }}", "language": "sql", "refs": [], "sources": [["staging_2025", "202501_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2025.202501_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2025", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2025', '202501_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2025_202501_citibike_tripdata_2_ride_id.d21916b874": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2025_202501_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2025_202501_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2025_202501_citibike_tripdata_2_ride_id.d21916b874", "fqn": ["data_transform", "staging", "source_unique_staging_2025_202501_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2025_202501_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.173804, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2025", "202501_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2025.202501_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2025", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2025', '202501_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.f04d434699": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2025_202501_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_be41cd82b9a6bf6bcffcc83983a4181c.sql", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.f04d434699", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2025_202501_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_be41cd82b9a6bf6bcffcc83983a4181c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_be41cd82b9a6bf6bcffcc83983a4181c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_be41cd82b9a6bf6bcffcc83983a4181c"}, "created_at": 1743088111.174929, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_be41cd82b9a6bf6bcffcc83983a4181c\") }}", "language": "sql", "refs": [], "sources": [["staging_2025", "202501_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2025.202501_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2025", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2025', '202501_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_2_member_casual__member__casual.8b1c00fe8f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2025_202501_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_147a3025a5683f376c516b670eeb2086.sql", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_2_member_casual__member__casual.8b1c00fe8f", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2025_202501_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_147a3025a5683f376c516b670eeb2086", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_147a3025a5683f376c516b670eeb2086", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_147a3025a5683f376c516b670eeb2086"}, "created_at": 1743088111.184698, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_147a3025a5683f376c516b670eeb2086\") }}", "language": "sql", "refs": [], "sources": [["staging_2025", "202501_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2025.202501_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2025", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2025', '202501_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2025_202501_citibike_tripdata_3_ride_id.1f172a8402": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2025_202501_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2025_202501_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2025_202501_citibike_tripdata_3_ride_id.1f172a8402", "fqn": ["data_transform", "staging", "source_unique_staging_2025_202501_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2025_202501_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.190748, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2025", "202501_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2025.202501_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2025", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2025', '202501_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.f408147714": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2025_202501_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_c9163bd11fa8df3b23aedf2d8de6f424.sql", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.f408147714", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2025_202501_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_c9163bd11fa8df3b23aedf2d8de6f424", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_c9163bd11fa8df3b23aedf2d8de6f424", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_c9163bd11fa8df3b23aedf2d8de6f424"}, "created_at": 1743088111.194043, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_c9163bd11fa8df3b23aedf2d8de6f424\") }}", "language": "sql", "refs": [], "sources": [["staging_2025", "202501_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2025.202501_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2025", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2025', '202501_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_3_member_casual__member__casual.6763462471": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2025_202501_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_9ffab8db4615de54ca9c3b01ff0939cc.sql", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_3_member_casual__member__casual.6763462471", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2025_202501_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_9ffab8db4615de54ca9c3b01ff0939cc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_9ffab8db4615de54ca9c3b01ff0939cc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_9ffab8db4615de54ca9c3b01ff0939cc"}, "created_at": 1743088111.199959, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_9ffab8db4615de54ca9c3b01ff0939cc\") }}", "language": "sql", "refs": [], "sources": [["staging_2025", "202501_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2025.202501_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2025", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2025', '202501_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2025_202502_citibike_tripdata_1_ride_id.66660cfd87": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2025_202502_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2025_202502_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2025_202502_citibike_tripdata_1_ride_id.66660cfd87", "fqn": ["data_transform", "staging", "source_unique_staging_2025_202502_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2025_202502_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.2027671, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2025", "202502_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2025.202502_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2025", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2025', '202502_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.46e3622553": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2025_202502_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_8aaf7d78e6d9c23f446b8de72ec2e4ad.sql", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.46e3622553", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2025_202502_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_8aaf7d78e6d9c23f446b8de72ec2e4ad", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_8aaf7d78e6d9c23f446b8de72ec2e4ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_8aaf7d78e6d9c23f446b8de72ec2e4ad"}, "created_at": 1743088111.203768, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_8aaf7d78e6d9c23f446b8de72ec2e4ad\") }}", "language": "sql", "refs": [], "sources": [["staging_2025", "202502_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2025.202502_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2025", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2025', '202502_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_1_member_casual__member__casual.82baa149df": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2025_202502_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_ef6636d1c3043378c5eb7633f4a2a053.sql", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_1_member_casual__member__casual.82baa149df", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2025_202502_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_ef6636d1c3043378c5eb7633f4a2a053", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_ef6636d1c3043378c5eb7633f4a2a053", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_ef6636d1c3043378c5eb7633f4a2a053"}, "created_at": 1743088111.2064488, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_ef6636d1c3043378c5eb7633f4a2a053\") }}", "language": "sql", "refs": [], "sources": [["staging_2025", "202502_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2025.202502_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2025", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2025', '202502_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2025_202502_citibike_tripdata_2_ride_id.8a4aa8ae70": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2025_202502_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2025_202502_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2025_202502_citibike_tripdata_2_ride_id.8a4aa8ae70", "fqn": ["data_transform", "staging", "source_unique_staging_2025_202502_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2025_202502_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.2101572, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2025", "202502_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2025.202502_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2025", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2025', '202502_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.488ee4d35e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2025_202502_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_3f0b0b53ffcdd8c7e730ddbf5b517d76.sql", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.488ee4d35e", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2025_202502_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_3f0b0b53ffcdd8c7e730ddbf5b517d76", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_3f0b0b53ffcdd8c7e730ddbf5b517d76", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_3f0b0b53ffcdd8c7e730ddbf5b517d76"}, "created_at": 1743088111.211165, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_3f0b0b53ffcdd8c7e730ddbf5b517d76\") }}", "language": "sql", "refs": [], "sources": [["staging_2025", "202502_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2025.202502_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2025", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2025', '202502_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_2_member_casual__member__casual.37e4db948e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2025_202502_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_43e73d58d977bcf3ec4a750f47464d3a.sql", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_2_member_casual__member__casual.37e4db948e", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2025_202502_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_43e73d58d977bcf3ec4a750f47464d3a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_43e73d58d977bcf3ec4a750f47464d3a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_43e73d58d977bcf3ec4a750f47464d3a"}, "created_at": 1743088111.213739, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_43e73d58d977bcf3ec4a750f47464d3a\") }}", "language": "sql", "refs": [], "sources": [["staging_2025", "202502_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2025.202502_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2025", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2025', '202502_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2025_202502_citibike_tripdata_3_ride_id.ba289fa730": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2025_202502_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2025_202502_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2025_202502_citibike_tripdata_3_ride_id.ba289fa730", "fqn": ["data_transform", "staging", "source_unique_staging_2025_202502_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2025_202502_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.216507, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2025", "202502_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2025.202502_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2025", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2025', '202502_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.1a98be6ed9": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2025_202502_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_1588cf5803aedf14e2ab59e02d4d1bc3.sql", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.1a98be6ed9", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2025_202502_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_1588cf5803aedf14e2ab59e02d4d1bc3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_1588cf5803aedf14e2ab59e02d4d1bc3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_1588cf5803aedf14e2ab59e02d4d1bc3"}, "created_at": 1743088111.217889, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_1588cf5803aedf14e2ab59e02d4d1bc3\") }}", "language": "sql", "refs": [], "sources": [["staging_2025", "202502_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2025.202502_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2025", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2025', '202502_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_3_member_casual__member__casual.e1d0807522": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2025_202502_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_fda2c49209254fc73b4ce0ed66757c8c.sql", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_3_member_casual__member__casual.e1d0807522", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2025_202502_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_fda2c49209254fc73b4ce0ed66757c8c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_fda2c49209254fc73b4ce0ed66757c8c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_fda2c49209254fc73b4ce0ed66757c8c"}, "created_at": 1743088111.220734, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_fda2c49209254fc73b4ce0ed66757c8c\") }}", "language": "sql", "refs": [], "sources": [["staging_2025", "202502_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2025.202502_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2025", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2025', '202502_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202201_citibike_tripdata_1_ride_id.d25afd57f4": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202201_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202201_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202201_citibike_tripdata_1_ride_id.d25afd57f4", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202201_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2022_202201_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.223445, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202201_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202201_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202201_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202201_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.9d1231d982": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202201_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_2fa033ed493421419ab6f66a07179721.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202201_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.9d1231d982", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202201_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_2fa033ed493421419ab6f66a07179721", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_2fa033ed493421419ab6f66a07179721", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_2fa033ed493421419ab6f66a07179721"}, "created_at": 1743088111.2245991, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_2fa033ed493421419ab6f66a07179721\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202201_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202201_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202201_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202201_citibike_tripdata_1_member_casual__member__casual.38003786b6": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202201_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_44ea232fa1280cd9e700ce7d90b04366.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202201_citibike_tripdata_1_member_casual__member__casual.38003786b6", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202201_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_44ea232fa1280cd9e700ce7d90b04366", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_44ea232fa1280cd9e700ce7d90b04366", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_44ea232fa1280cd9e700ce7d90b04366"}, "created_at": 1743088111.2271411, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_44ea232fa1280cd9e700ce7d90b04366\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202201_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202201_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202201_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202201_citibike_tripdata_2_ride_id.5c612b1128": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202201_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202201_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202201_citibike_tripdata_2_ride_id.5c612b1128", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202201_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2022_202201_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.2299368, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202201_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202201_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202201_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202201_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.cd32aaa5e2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202201_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_80255d138f5a2869ab0ef627d509bfe8.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202201_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.cd32aaa5e2", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202201_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_80255d138f5a2869ab0ef627d509bfe8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_80255d138f5a2869ab0ef627d509bfe8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_80255d138f5a2869ab0ef627d509bfe8"}, "created_at": 1743088111.2361479, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_80255d138f5a2869ab0ef627d509bfe8\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202201_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202201_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202201_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202201_citibike_tripdata_2_member_casual__member__casual.251dfae6f2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202201_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_6347ca03517f95b553fa65a46c8e0705.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202201_citibike_tripdata_2_member_casual__member__casual.251dfae6f2", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202201_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_6347ca03517f95b553fa65a46c8e0705", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_6347ca03517f95b553fa65a46c8e0705", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_6347ca03517f95b553fa65a46c8e0705"}, "created_at": 1743088111.2388868, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_6347ca03517f95b553fa65a46c8e0705\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202201_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202201_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202201_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202202_citibike_tripdata_1_ride_id.60a5bcaf27": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202202_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202202_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202202_citibike_tripdata_1_ride_id.60a5bcaf27", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202202_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2022_202202_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.241544, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202202_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202202_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202202_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202202_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.33fc30ea6e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202202_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_9ceec61403df493fc33395d092bc5c3b.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202202_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.33fc30ea6e", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202202_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_9ceec61403df493fc33395d092bc5c3b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_9ceec61403df493fc33395d092bc5c3b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_9ceec61403df493fc33395d092bc5c3b"}, "created_at": 1743088111.242541, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_9ceec61403df493fc33395d092bc5c3b\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202202_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202202_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202202_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202202_citibike_tripdata_1_member_casual__member__casual.8d8ffa16f7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202202_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_582543fd00d021d9a0f8bd6c01be7a2c.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202202_citibike_tripdata_1_member_casual__member__casual.8d8ffa16f7", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202202_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_582543fd00d021d9a0f8bd6c01be7a2c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_582543fd00d021d9a0f8bd6c01be7a2c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_582543fd00d021d9a0f8bd6c01be7a2c"}, "created_at": 1743088111.2452202, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_582543fd00d021d9a0f8bd6c01be7a2c\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202202_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202202_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202202_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202202_citibike_tripdata_2_ride_id.c374198f51": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202202_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202202_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202202_citibike_tripdata_2_ride_id.c374198f51", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202202_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2022_202202_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.2480278, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202202_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202202_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202202_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202202_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.3bd607ceac": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202202_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_9bf698fcbe2e17e45408f1ebc55469ff.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202202_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.3bd607ceac", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202202_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_9bf698fcbe2e17e45408f1ebc55469ff", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_9bf698fcbe2e17e45408f1ebc55469ff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_9bf698fcbe2e17e45408f1ebc55469ff"}, "created_at": 1743088111.249045, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_9bf698fcbe2e17e45408f1ebc55469ff\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202202_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202202_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202202_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202202_citibike_tripdata_2_member_casual__member__casual.d4b5d2e16b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202202_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_84b3c4ad2b2e73a63e744c0b4f99c869.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202202_citibike_tripdata_2_member_casual__member__casual.d4b5d2e16b", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202202_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_84b3c4ad2b2e73a63e744c0b4f99c869", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_84b3c4ad2b2e73a63e744c0b4f99c869", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_84b3c4ad2b2e73a63e744c0b4f99c869"}, "created_at": 1743088111.251722, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_84b3c4ad2b2e73a63e744c0b4f99c869\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202202_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202202_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202202_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202203_citibike_tripdata_1_ride_id.856d20e9d1": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202203_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202203_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202203_citibike_tripdata_1_ride_id.856d20e9d1", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202203_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2022_202203_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.254602, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202203_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202203_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202203_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202203_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.c4f4772db3": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202203_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_fa49ebf86bfdbafde334c19f968c3f01.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202203_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.c4f4772db3", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202203_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_fa49ebf86bfdbafde334c19f968c3f01", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_fa49ebf86bfdbafde334c19f968c3f01", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_fa49ebf86bfdbafde334c19f968c3f01"}, "created_at": 1743088111.255597, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_fa49ebf86bfdbafde334c19f968c3f01\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202203_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202203_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202203_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202203_citibike_tripdata_1_member_casual__member__casual.7d2ed3271a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202203_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_926507c27eebca07c3e5e1cd180f8ad5.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202203_citibike_tripdata_1_member_casual__member__casual.7d2ed3271a", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202203_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_926507c27eebca07c3e5e1cd180f8ad5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_926507c27eebca07c3e5e1cd180f8ad5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_926507c27eebca07c3e5e1cd180f8ad5"}, "created_at": 1743088111.2582521, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_926507c27eebca07c3e5e1cd180f8ad5\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202203_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202203_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202203_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202203_citibike_tripdata_2_ride_id.bd6eb8c903": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202203_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202203_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202203_citibike_tripdata_2_ride_id.bd6eb8c903", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202203_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2022_202203_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.260872, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202203_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202203_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202203_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202203_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.91a306b283": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202203_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_ea76493dd7769ec1ef9cce083c605c2e.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202203_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.91a306b283", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202203_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_ea76493dd7769ec1ef9cce083c605c2e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_ea76493dd7769ec1ef9cce083c605c2e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_ea76493dd7769ec1ef9cce083c605c2e"}, "created_at": 1743088111.262, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_ea76493dd7769ec1ef9cce083c605c2e\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202203_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202203_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202203_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202203_citibike_tripdata_2_member_casual__member__casual.39468999fe": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202203_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_3f87b41ae00a83abcee2fdc82176d350.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202203_citibike_tripdata_2_member_casual__member__casual.39468999fe", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202203_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_3f87b41ae00a83abcee2fdc82176d350", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_3f87b41ae00a83abcee2fdc82176d350", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_3f87b41ae00a83abcee2fdc82176d350"}, "created_at": 1743088111.264578, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_3f87b41ae00a83abcee2fdc82176d350\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202203_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202203_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202203_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202204_citibike_tripdata_1_ride_id.89f4d6a012": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202204_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202204_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202204_citibike_tripdata_1_ride_id.89f4d6a012", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202204_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2022_202204_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.267345, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202204_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202204_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202204_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.02a4709ece": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202204_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_1f7a218a929b7d97a0abb979380a61af.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.02a4709ece", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202204_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_1f7a218a929b7d97a0abb979380a61af", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_1f7a218a929b7d97a0abb979380a61af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_1f7a218a929b7d97a0abb979380a61af"}, "created_at": 1743088111.2683678, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_1f7a218a929b7d97a0abb979380a61af\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202204_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202204_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202204_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_1_member_casual__member__casual.cd7e1bd1e2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202204_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_c378fe4f33385976a28182f12d5e949f.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_1_member_casual__member__casual.cd7e1bd1e2", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202204_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_c378fe4f33385976a28182f12d5e949f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_c378fe4f33385976a28182f12d5e949f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_c378fe4f33385976a28182f12d5e949f"}, "created_at": 1743088111.274333, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_c378fe4f33385976a28182f12d5e949f\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202204_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202204_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202204_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202204_citibike_tripdata_2_ride_id.586f76883d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202204_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202204_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202204_citibike_tripdata_2_ride_id.586f76883d", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202204_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2022_202204_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.2771368, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202204_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202204_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202204_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.5d370d37ba": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202204_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_2318b0d8742ed1bea49caf07931a01e1.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.5d370d37ba", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202204_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_2318b0d8742ed1bea49caf07931a01e1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_2318b0d8742ed1bea49caf07931a01e1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_2318b0d8742ed1bea49caf07931a01e1"}, "created_at": 1743088111.278131, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_2318b0d8742ed1bea49caf07931a01e1\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202204_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202204_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202204_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_2_member_casual__member__casual.42dc017c46": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202204_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_cc4d67595bd68c5621a4cf5920aad6c3.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_2_member_casual__member__casual.42dc017c46", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202204_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_cc4d67595bd68c5621a4cf5920aad6c3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_cc4d67595bd68c5621a4cf5920aad6c3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_cc4d67595bd68c5621a4cf5920aad6c3"}, "created_at": 1743088111.2808661, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_cc4d67595bd68c5621a4cf5920aad6c3\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202204_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202204_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202204_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202204_citibike_tripdata_3_ride_id.f72aeee1bf": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202204_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202204_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202204_citibike_tripdata_3_ride_id.f72aeee1bf", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202204_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2022_202204_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.2846951, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202204_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202204_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202204_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.93b6b9e659": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202204_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_848256385cf93a76b2db0e7193236164.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.93b6b9e659", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202204_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_848256385cf93a76b2db0e7193236164", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_848256385cf93a76b2db0e7193236164", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_848256385cf93a76b2db0e7193236164"}, "created_at": 1743088111.285714, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_848256385cf93a76b2db0e7193236164\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202204_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202204_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202204_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_3_member_casual__member__casual.6822ad17cd": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202204_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_8825fba11edb4423f5cf39da6e80c889.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_3_member_casual__member__casual.6822ad17cd", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202204_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_8825fba11edb4423f5cf39da6e80c889", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_8825fba11edb4423f5cf39da6e80c889", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_8825fba11edb4423f5cf39da6e80c889"}, "created_at": 1743088111.2884648, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_8825fba11edb4423f5cf39da6e80c889\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202204_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202204_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202204_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202205_citibike_tripdata_1_ride_id.1771e82765": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202205_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202205_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202205_citibike_tripdata_1_ride_id.1771e82765", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202205_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2022_202205_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.291248, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202205_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202205_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202205_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.2d139f2946": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202205_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_096a103949f0fb4db2e4cda934367d86.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.2d139f2946", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202205_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_096a103949f0fb4db2e4cda934367d86", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_096a103949f0fb4db2e4cda934367d86", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_096a103949f0fb4db2e4cda934367d86"}, "created_at": 1743088111.292246, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_096a103949f0fb4db2e4cda934367d86\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202205_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202205_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202205_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_1_member_casual__member__casual.8a5f161f56": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202205_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_ed239a481f0f522f71b693e647557b7d.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_1_member_casual__member__casual.8a5f161f56", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202205_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_ed239a481f0f522f71b693e647557b7d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_ed239a481f0f522f71b693e647557b7d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_ed239a481f0f522f71b693e647557b7d"}, "created_at": 1743088111.29488, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_ed239a481f0f522f71b693e647557b7d\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202205_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202205_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202205_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202205_citibike_tripdata_2_ride_id.f653abb820": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202205_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202205_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202205_citibike_tripdata_2_ride_id.f653abb820", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202205_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2022_202205_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.2974908, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202205_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202205_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202205_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.5e23347676": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202205_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_40bea912835aaccca505c12984580196.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.5e23347676", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202205_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_40bea912835aaccca505c12984580196", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_40bea912835aaccca505c12984580196", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_40bea912835aaccca505c12984580196"}, "created_at": 1743088111.29865, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_40bea912835aaccca505c12984580196\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202205_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202205_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202205_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_2_member_casual__member__casual.1c6fdb96bb": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202205_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_fded7a5edf1217db0076efc1b7043a2f.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_2_member_casual__member__casual.1c6fdb96bb", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202205_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_fded7a5edf1217db0076efc1b7043a2f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_fded7a5edf1217db0076efc1b7043a2f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_fded7a5edf1217db0076efc1b7043a2f"}, "created_at": 1743088111.301127, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_fded7a5edf1217db0076efc1b7043a2f\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202205_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202205_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202205_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202205_citibike_tripdata_3_ride_id.50fd76340d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202205_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202205_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202205_citibike_tripdata_3_ride_id.50fd76340d", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202205_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2022_202205_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.303873, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202205_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202205_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202205_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.a1fe18b141": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202205_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_9d6eff77714f3c5a9a75efd2c0cb54ae.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.a1fe18b141", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202205_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_9d6eff77714f3c5a9a75efd2c0cb54ae", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_9d6eff77714f3c5a9a75efd2c0cb54ae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_9d6eff77714f3c5a9a75efd2c0cb54ae"}, "created_at": 1743088111.304855, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_9d6eff77714f3c5a9a75efd2c0cb54ae\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202205_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202205_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202205_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_3_member_casual__member__casual.dcf8cb1303": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202205_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_142c21c4f0965b975144b7c50d9b841f.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_3_member_casual__member__casual.dcf8cb1303", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202205_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_142c21c4f0965b975144b7c50d9b841f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_142c21c4f0965b975144b7c50d9b841f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_142c21c4f0965b975144b7c50d9b841f"}, "created_at": 1743088111.307464, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_142c21c4f0965b975144b7c50d9b841f\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202205_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202205_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202205_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202206_citibike_tripdata_1_ride_id.cb4b6f5043": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202206_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202206_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202206_citibike_tripdata_1_ride_id.cb4b6f5043", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202206_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2022_202206_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.31007, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202206_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202206_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202206_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.10f0df21fe": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202206_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_10b1ab194e62467ad7fcbe563b69b2f2.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.10f0df21fe", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202206_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_10b1ab194e62467ad7fcbe563b69b2f2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_10b1ab194e62467ad7fcbe563b69b2f2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_10b1ab194e62467ad7fcbe563b69b2f2"}, "created_at": 1743088111.311054, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_10b1ab194e62467ad7fcbe563b69b2f2\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202206_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202206_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202206_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_1_member_casual__member__casual.83d5d596ec": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202206_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_94a689545609842d36f6e92b659e0d26.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_1_member_casual__member__casual.83d5d596ec", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202206_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_94a689545609842d36f6e92b659e0d26", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_94a689545609842d36f6e92b659e0d26", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_94a689545609842d36f6e92b659e0d26"}, "created_at": 1743088111.313649, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_94a689545609842d36f6e92b659e0d26\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202206_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202206_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202206_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202206_citibike_tripdata_2_ride_id.77fe307ee0": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202206_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202206_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202206_citibike_tripdata_2_ride_id.77fe307ee0", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202206_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2022_202206_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.3163478, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202206_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202206_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202206_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.33b66fd674": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202206_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_2288aa33531af282a19f11c45d8d0b74.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.33b66fd674", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202206_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_2288aa33531af282a19f11c45d8d0b74", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_2288aa33531af282a19f11c45d8d0b74", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_2288aa33531af282a19f11c45d8d0b74"}, "created_at": 1743088111.317332, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_2288aa33531af282a19f11c45d8d0b74\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202206_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202206_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202206_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_2_member_casual__member__casual.951189a091": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202206_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_4b926e5737c55cc9b30b8cbbef5a2403.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_2_member_casual__member__casual.951189a091", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202206_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_4b926e5737c55cc9b30b8cbbef5a2403", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_4b926e5737c55cc9b30b8cbbef5a2403", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_4b926e5737c55cc9b30b8cbbef5a2403"}, "created_at": 1743088111.319794, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_4b926e5737c55cc9b30b8cbbef5a2403\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202206_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202206_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202206_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202206_citibike_tripdata_3_ride_id.5ce40a289c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202206_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202206_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202206_citibike_tripdata_3_ride_id.5ce40a289c", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202206_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2022_202206_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.3225012, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202206_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202206_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202206_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.1182f213d1": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202206_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_022570a07a9f180565b568e0604b3a87.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.1182f213d1", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202206_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_022570a07a9f180565b568e0604b3a87", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_022570a07a9f180565b568e0604b3a87", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_022570a07a9f180565b568e0604b3a87"}, "created_at": 1743088111.3235, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_022570a07a9f180565b568e0604b3a87\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202206_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202206_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202206_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_3_member_casual__member__casual.06fcfc06d7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202206_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_3ecc24a17afc6228114badb0ef3502f0.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_3_member_casual__member__casual.06fcfc06d7", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202206_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_3ecc24a17afc6228114badb0ef3502f0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_3ecc24a17afc6228114badb0ef3502f0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_3ecc24a17afc6228114badb0ef3502f0"}, "created_at": 1743088111.3260958, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_3ecc24a17afc6228114badb0ef3502f0\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202206_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202206_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202206_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202206_citibike_tripdata_4_ride_id.ce011569c2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202206_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202206_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202206_citibike_tripdata_4_ride_id.ce011569c2", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202206_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2022_202206_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.328663, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202206_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202206_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202206_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.b17562a472": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202206_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_9294c72f3282d61faa1dcb21297fa164.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.b17562a472", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202206_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_9294c72f3282d61faa1dcb21297fa164", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_9294c72f3282d61faa1dcb21297fa164", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_9294c72f3282d61faa1dcb21297fa164"}, "created_at": 1743088111.33646, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_9294c72f3282d61faa1dcb21297fa164\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202206_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202206_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202206_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_4_member_casual__member__casual.b1c8bf49ab": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202206_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_326624e14253c9392eba3a33091264f9.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_4_member_casual__member__casual.b1c8bf49ab", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202206_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_326624e14253c9392eba3a33091264f9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_326624e14253c9392eba3a33091264f9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_326624e14253c9392eba3a33091264f9"}, "created_at": 1743088111.3431392, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_326624e14253c9392eba3a33091264f9\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202206_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202206_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202206_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202207_citibike_tripdata_1_ride_id.f6b6f7ff7b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202207_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202207_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202207_citibike_tripdata_1_ride_id.f6b6f7ff7b", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202207_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2022_202207_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.346237, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202207_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202207_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202207_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.f870f4039e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202207_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_5a8cc5c0cb1c6c58f3f0d3ec5ed59035.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.f870f4039e", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202207_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_5a8cc5c0cb1c6c58f3f0d3ec5ed59035", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_5a8cc5c0cb1c6c58f3f0d3ec5ed59035", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_5a8cc5c0cb1c6c58f3f0d3ec5ed59035"}, "created_at": 1743088111.347239, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_5a8cc5c0cb1c6c58f3f0d3ec5ed59035\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202207_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202207_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202207_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_1_member_casual__member__casual.3b7c53faa3": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202207_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_6e07c1cf5c1a58eafe92686dcc794ee5.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_1_member_casual__member__casual.3b7c53faa3", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202207_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_6e07c1cf5c1a58eafe92686dcc794ee5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_6e07c1cf5c1a58eafe92686dcc794ee5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_6e07c1cf5c1a58eafe92686dcc794ee5"}, "created_at": 1743088111.3499541, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_6e07c1cf5c1a58eafe92686dcc794ee5\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202207_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202207_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202207_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202207_citibike_tripdata_2_ride_id.aaa4597238": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202207_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202207_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202207_citibike_tripdata_2_ride_id.aaa4597238", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202207_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2022_202207_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.355863, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202207_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202207_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202207_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.eea05106cf": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202207_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_7f1f0cd629d9b716916134a49a18fb50.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.eea05106cf", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202207_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_7f1f0cd629d9b716916134a49a18fb50", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_7f1f0cd629d9b716916134a49a18fb50", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_7f1f0cd629d9b716916134a49a18fb50"}, "created_at": 1743088111.359106, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_7f1f0cd629d9b716916134a49a18fb50\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202207_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202207_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202207_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_2_member_casual__member__casual.b148011e32": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202207_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_cd2eb81951c200b057c82d1a869c6074.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_2_member_casual__member__casual.b148011e32", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202207_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_cd2eb81951c200b057c82d1a869c6074", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_cd2eb81951c200b057c82d1a869c6074", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_cd2eb81951c200b057c82d1a869c6074"}, "created_at": 1743088111.364245, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_cd2eb81951c200b057c82d1a869c6074\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202207_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202207_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202207_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202207_citibike_tripdata_3_ride_id.d461a621eb": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202207_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202207_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202207_citibike_tripdata_3_ride_id.d461a621eb", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202207_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2022_202207_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.3671339, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202207_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202207_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202207_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c984fd71be": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202207_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_a3f056a8b4bcbcf8723ad7802d99e4ee.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c984fd71be", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202207_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_a3f056a8b4bcbcf8723ad7802d99e4ee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_a3f056a8b4bcbcf8723ad7802d99e4ee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_a3f056a8b4bcbcf8723ad7802d99e4ee"}, "created_at": 1743088111.368151, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_a3f056a8b4bcbcf8723ad7802d99e4ee\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202207_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202207_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202207_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_3_member_casual__member__casual.ef85dd4d4a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202207_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_8842b6014516dda5637469853500db91.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_3_member_casual__member__casual.ef85dd4d4a", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202207_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_8842b6014516dda5637469853500db91", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_8842b6014516dda5637469853500db91", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_8842b6014516dda5637469853500db91"}, "created_at": 1743088111.3706691, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_8842b6014516dda5637469853500db91\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202207_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202207_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202207_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202207_citibike_tripdata_4_ride_id.7b47674811": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202207_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202207_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202207_citibike_tripdata_4_ride_id.7b47674811", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202207_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2022_202207_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.373445, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202207_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202207_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202207_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.12a2797dd4": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202207_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_af81f702c26651ab4e5cc11684eeb5c5.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.12a2797dd4", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202207_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_af81f702c26651ab4e5cc11684eeb5c5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_af81f702c26651ab4e5cc11684eeb5c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_af81f702c26651ab4e5cc11684eeb5c5"}, "created_at": 1743088111.3744462, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_af81f702c26651ab4e5cc11684eeb5c5\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202207_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202207_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202207_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_4_member_casual__member__casual.4200d34dda": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202207_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_b842d3e6cb3aa3a57839d5f618ae817b.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_4_member_casual__member__casual.4200d34dda", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202207_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_b842d3e6cb3aa3a57839d5f618ae817b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_b842d3e6cb3aa3a57839d5f618ae817b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_b842d3e6cb3aa3a57839d5f618ae817b"}, "created_at": 1743088111.377103, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_b842d3e6cb3aa3a57839d5f618ae817b\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202207_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202207_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202207_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202208_citibike_tripdata_1_ride_id.b752128bb3": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202208_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202208_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202208_citibike_tripdata_1_ride_id.b752128bb3", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202208_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2022_202208_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.3797288, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202208_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202208_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202208_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d7f71ab3cc": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202208_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_b2fbdb8bc2baa66841a9e500b541e3b1.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d7f71ab3cc", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202208_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_b2fbdb8bc2baa66841a9e500b541e3b1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_b2fbdb8bc2baa66841a9e500b541e3b1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_b2fbdb8bc2baa66841a9e500b541e3b1"}, "created_at": 1743088111.3808708, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_b2fbdb8bc2baa66841a9e500b541e3b1\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202208_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202208_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202208_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_1_member_casual__member__casual.5f78276b13": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202208_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_17332dc54aba34816d17a3d46437087a.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_1_member_casual__member__casual.5f78276b13", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202208_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_17332dc54aba34816d17a3d46437087a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_17332dc54aba34816d17a3d46437087a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_17332dc54aba34816d17a3d46437087a"}, "created_at": 1743088111.383369, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_17332dc54aba34816d17a3d46437087a\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202208_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202208_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202208_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202208_citibike_tripdata_2_ride_id.84bf2fab34": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202208_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202208_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202208_citibike_tripdata_2_ride_id.84bf2fab34", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202208_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2022_202208_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.386136, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202208_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202208_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202208_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.c4a6ef76ec": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202208_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_3db53ac43f801ff15b48993217358b38.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.c4a6ef76ec", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202208_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_3db53ac43f801ff15b48993217358b38", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_3db53ac43f801ff15b48993217358b38", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_3db53ac43f801ff15b48993217358b38"}, "created_at": 1743088111.387127, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_3db53ac43f801ff15b48993217358b38\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202208_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202208_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202208_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_2_member_casual__member__casual.b2e3f7eb36": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202208_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_00b8ced388088155e0566c4a8d1a31a9.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_2_member_casual__member__casual.b2e3f7eb36", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202208_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_00b8ced388088155e0566c4a8d1a31a9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_00b8ced388088155e0566c4a8d1a31a9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_00b8ced388088155e0566c4a8d1a31a9"}, "created_at": 1743088111.3897212, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_00b8ced388088155e0566c4a8d1a31a9\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202208_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202208_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202208_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202208_citibike_tripdata_3_ride_id.229050d32c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202208_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202208_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202208_citibike_tripdata_3_ride_id.229050d32c", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202208_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2022_202208_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.392321, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202208_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202208_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202208_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.a8055c5073": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202208_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_e538a493e48a23ddac49ce543a0d7331.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.a8055c5073", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202208_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_e538a493e48a23ddac49ce543a0d7331", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_e538a493e48a23ddac49ce543a0d7331", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_e538a493e48a23ddac49ce543a0d7331"}, "created_at": 1743088111.393308, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_e538a493e48a23ddac49ce543a0d7331\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202208_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202208_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202208_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_3_member_casual__member__casual.064c792ee9": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202208_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_9bb29b6b1a7f594efc7f82645c43c734.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_3_member_casual__member__casual.064c792ee9", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202208_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_9bb29b6b1a7f594efc7f82645c43c734", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_9bb29b6b1a7f594efc7f82645c43c734", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_9bb29b6b1a7f594efc7f82645c43c734"}, "created_at": 1743088111.3959339, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_9bb29b6b1a7f594efc7f82645c43c734\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202208_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202208_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202208_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202208_citibike_tripdata_4_ride_id.bd71130699": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202208_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202208_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202208_citibike_tripdata_4_ride_id.bd71130699", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202208_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2022_202208_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.398647, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202208_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202208_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202208_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.b96136fef3": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202208_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_46a4811d47f69eb51e629d4adf4eff18.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.b96136fef3", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202208_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_46a4811d47f69eb51e629d4adf4eff18", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_46a4811d47f69eb51e629d4adf4eff18", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_46a4811d47f69eb51e629d4adf4eff18"}, "created_at": 1743088111.399648, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_46a4811d47f69eb51e629d4adf4eff18\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202208_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202208_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202208_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_4_member_casual__member__casual.7cabd0aaef": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202208_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_1e2c3b64d8e59434b5a9f669d7666357.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_4_member_casual__member__casual.7cabd0aaef", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202208_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_1e2c3b64d8e59434b5a9f669d7666357", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_1e2c3b64d8e59434b5a9f669d7666357", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_1e2c3b64d8e59434b5a9f669d7666357"}, "created_at": 1743088111.402117, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_1e2c3b64d8e59434b5a9f669d7666357\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202208_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202208_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202208_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202209_citibike_tripdata_1_ride_id.69b513376c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202209_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202209_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202209_citibike_tripdata_1_ride_id.69b513376c", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202209_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2022_202209_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.405428, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202209_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202209_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202209_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.1950bfa65e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202209_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_bb91136259e0da655e1c3c740ed9b053.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.1950bfa65e", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202209_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_bb91136259e0da655e1c3c740ed9b053", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_bb91136259e0da655e1c3c740ed9b053", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_bb91136259e0da655e1c3c740ed9b053"}, "created_at": 1743088111.406427, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_bb91136259e0da655e1c3c740ed9b053\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202209_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202209_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202209_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_1_member_casual__member__casual.43be26805b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202209_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_a728de323d48e936f2f7962baebd5f8a.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_1_member_casual__member__casual.43be26805b", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202209_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_a728de323d48e936f2f7962baebd5f8a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_a728de323d48e936f2f7962baebd5f8a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_a728de323d48e936f2f7962baebd5f8a"}, "created_at": 1743088111.409024, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_a728de323d48e936f2f7962baebd5f8a\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202209_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202209_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202209_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202209_citibike_tripdata_2_ride_id.9287eb310b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202209_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202209_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202209_citibike_tripdata_2_ride_id.9287eb310b", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202209_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2022_202209_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.4116192, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202209_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202209_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202209_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.b2eab29d1c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202209_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_eedee8ccec4012bcd06888c043ed43e4.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.b2eab29d1c", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202209_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_eedee8ccec4012bcd06888c043ed43e4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_eedee8ccec4012bcd06888c043ed43e4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_eedee8ccec4012bcd06888c043ed43e4"}, "created_at": 1743088111.412755, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_eedee8ccec4012bcd06888c043ed43e4\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202209_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202209_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202209_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_2_member_casual__member__casual.b4eca9e866": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202209_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_84d8e93ee0ae5039afa0b8ce007056cc.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_2_member_casual__member__casual.b4eca9e866", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202209_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_84d8e93ee0ae5039afa0b8ce007056cc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_84d8e93ee0ae5039afa0b8ce007056cc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_84d8e93ee0ae5039afa0b8ce007056cc"}, "created_at": 1743088111.415246, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_84d8e93ee0ae5039afa0b8ce007056cc\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202209_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202209_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202209_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202209_citibike_tripdata_3_ride_id.fe4877006a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202209_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202209_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202209_citibike_tripdata_3_ride_id.fe4877006a", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202209_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2022_202209_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.418017, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202209_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202209_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202209_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.16d81435fa": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202209_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_0cf6c167791433f187faaa5cef8a906c.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.16d81435fa", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202209_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_0cf6c167791433f187faaa5cef8a906c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_0cf6c167791433f187faaa5cef8a906c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_0cf6c167791433f187faaa5cef8a906c"}, "created_at": 1743088111.419016, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_0cf6c167791433f187faaa5cef8a906c\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202209_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202209_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202209_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_3_member_casual__member__casual.e57a1e3dfb": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202209_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_0348858aaa17aa8257863ee4ef12868c.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_3_member_casual__member__casual.e57a1e3dfb", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202209_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_0348858aaa17aa8257863ee4ef12868c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_0348858aaa17aa8257863ee4ef12868c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_0348858aaa17aa8257863ee4ef12868c"}, "created_at": 1743088111.42163, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_0348858aaa17aa8257863ee4ef12868c\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202209_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202209_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202209_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202209_citibike_tripdata_4_ride_id.c27fc508ca": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202209_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202209_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202209_citibike_tripdata_4_ride_id.c27fc508ca", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202209_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2022_202209_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.424255, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202209_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202209_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202209_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.33dede432e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202209_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_6eb78959af538d6bdac1f90a2a1e6c6f.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.33dede432e", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202209_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_6eb78959af538d6bdac1f90a2a1e6c6f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_6eb78959af538d6bdac1f90a2a1e6c6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_6eb78959af538d6bdac1f90a2a1e6c6f"}, "created_at": 1743088111.425243, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_6eb78959af538d6bdac1f90a2a1e6c6f\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202209_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202209_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202209_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_4_member_casual__member__casual.b06eb06e1d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202209_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_73624e685b2febc6f5e18f4bf8a21b94.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_4_member_casual__member__casual.b06eb06e1d", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202209_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_73624e685b2febc6f5e18f4bf8a21b94", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_73624e685b2febc6f5e18f4bf8a21b94", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_73624e685b2febc6f5e18f4bf8a21b94"}, "created_at": 1743088111.427868, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_73624e685b2febc6f5e18f4bf8a21b94\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202209_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202209_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202209_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202210_citibike_tripdata_1_ride_id.390d32fb45": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202210_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202210_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202210_citibike_tripdata_1_ride_id.390d32fb45", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202210_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2022_202210_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.430586, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202210_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202210_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202210_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d71e555f91": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202210_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_1f2eeed042df42f8b4c1d410456d8d71.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d71e555f91", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202210_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_1f2eeed042df42f8b4c1d410456d8d71", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_1f2eeed042df42f8b4c1d410456d8d71", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_1f2eeed042df42f8b4c1d410456d8d71"}, "created_at": 1743088111.431584, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_1f2eeed042df42f8b4c1d410456d8d71\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202210_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202210_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202210_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_1_member_casual__member__casual.b679530ffa": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202210_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_acdad46f7e9e0058fc9ec1de0054e141.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_1_member_casual__member__casual.b679530ffa", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202210_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_acdad46f7e9e0058fc9ec1de0054e141", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_acdad46f7e9e0058fc9ec1de0054e141", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_acdad46f7e9e0058fc9ec1de0054e141"}, "created_at": 1743088111.434072, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_acdad46f7e9e0058fc9ec1de0054e141\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202210_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202210_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202210_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202210_citibike_tripdata_2_ride_id.a356515f4c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202210_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202210_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202210_citibike_tripdata_2_ride_id.a356515f4c", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202210_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2022_202210_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.436795, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202210_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202210_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202210_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.3b148e382e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202210_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_00805fe8ad91a21b1336382c23d911d8.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.3b148e382e", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202210_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_00805fe8ad91a21b1336382c23d911d8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_00805fe8ad91a21b1336382c23d911d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_00805fe8ad91a21b1336382c23d911d8"}, "created_at": 1743088111.437784, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_00805fe8ad91a21b1336382c23d911d8\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202210_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202210_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202210_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_2_member_casual__member__casual.458e088372": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202210_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_6fb24d61e0218fd5ad4a2e7e21c29271.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_2_member_casual__member__casual.458e088372", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202210_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_6fb24d61e0218fd5ad4a2e7e21c29271", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_6fb24d61e0218fd5ad4a2e7e21c29271", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_6fb24d61e0218fd5ad4a2e7e21c29271"}, "created_at": 1743088111.440373, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_6fb24d61e0218fd5ad4a2e7e21c29271\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202210_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202210_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202210_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202210_citibike_tripdata_3_ride_id.d290fa3436": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202210_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202210_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202210_citibike_tripdata_3_ride_id.d290fa3436", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202210_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2022_202210_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.4429781, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202210_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202210_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202210_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b895dcd5af": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202210_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_7c4f9e2174146c7373d5f35efb7cd8b4.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b895dcd5af", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202210_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_7c4f9e2174146c7373d5f35efb7cd8b4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_7c4f9e2174146c7373d5f35efb7cd8b4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_7c4f9e2174146c7373d5f35efb7cd8b4"}, "created_at": 1743088111.444096, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_7c4f9e2174146c7373d5f35efb7cd8b4\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202210_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202210_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202210_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_3_member_casual__member__casual.83cf73a779": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202210_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_cdbd13a0c30f5fdd358b6a3c1df730b8.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_3_member_casual__member__casual.83cf73a779", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202210_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_cdbd13a0c30f5fdd358b6a3c1df730b8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_cdbd13a0c30f5fdd358b6a3c1df730b8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_cdbd13a0c30f5fdd358b6a3c1df730b8"}, "created_at": 1743088111.446573, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_cdbd13a0c30f5fdd358b6a3c1df730b8\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202210_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202210_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202210_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202211_citibike_tripdata_1_ride_id.901ff58b5d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202211_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202211_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202211_citibike_tripdata_1_ride_id.901ff58b5d", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202211_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2022_202211_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.4493089, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202211_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202211_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202211_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.e7ec80ec4a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202211_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_39b90724218dba6b2365cc5e7188b8fa.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.e7ec80ec4a", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202211_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_39b90724218dba6b2365cc5e7188b8fa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_39b90724218dba6b2365cc5e7188b8fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_39b90724218dba6b2365cc5e7188b8fa"}, "created_at": 1743088111.450306, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_39b90724218dba6b2365cc5e7188b8fa\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202211_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202211_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202211_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_1_member_casual__member__casual.de35c257d2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202211_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_c1f56c9ed0636257eb6e883e1d966700.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_1_member_casual__member__casual.de35c257d2", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202211_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_c1f56c9ed0636257eb6e883e1d966700", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_c1f56c9ed0636257eb6e883e1d966700", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_c1f56c9ed0636257eb6e883e1d966700"}, "created_at": 1743088111.459041, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_c1f56c9ed0636257eb6e883e1d966700\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202211_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202211_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202211_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202211_citibike_tripdata_2_ride_id.642d1a610f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202211_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202211_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202211_citibike_tripdata_2_ride_id.642d1a610f", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202211_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2022_202211_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.4637609, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202211_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202211_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202211_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.7b9d6ccb68": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202211_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_09cc4f3f2b66c4701b7c353c21832b7d.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.7b9d6ccb68", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202211_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_09cc4f3f2b66c4701b7c353c21832b7d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_09cc4f3f2b66c4701b7c353c21832b7d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_09cc4f3f2b66c4701b7c353c21832b7d"}, "created_at": 1743088111.464771, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_09cc4f3f2b66c4701b7c353c21832b7d\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202211_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202211_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202211_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_2_member_casual__member__casual.b8a04e5f28": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202211_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_decb23ac06936880e8d298c2c387c5d4.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_2_member_casual__member__casual.b8a04e5f28", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202211_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_decb23ac06936880e8d298c2c387c5d4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_decb23ac06936880e8d298c2c387c5d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_decb23ac06936880e8d298c2c387c5d4"}, "created_at": 1743088111.468083, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_decb23ac06936880e8d298c2c387c5d4\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202211_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202211_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202211_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202211_citibike_tripdata_3_ride_id.71487f10cd": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202211_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202211_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202211_citibike_tripdata_3_ride_id.71487f10cd", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202211_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2022_202211_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.470895, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202211_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202211_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202211_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b865047467": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202211_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_a873d279983b39409ff95ee07014378f.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b865047467", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202211_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_a873d279983b39409ff95ee07014378f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_a873d279983b39409ff95ee07014378f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_a873d279983b39409ff95ee07014378f"}, "created_at": 1743088111.4719071, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_a873d279983b39409ff95ee07014378f\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202211_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202211_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202211_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_3_member_casual__member__casual.10a72da3a3": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202211_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_471c3d29cc7e67a88497f0f8e54b0203.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_3_member_casual__member__casual.10a72da3a3", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202211_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_471c3d29cc7e67a88497f0f8e54b0203", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_471c3d29cc7e67a88497f0f8e54b0203", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_471c3d29cc7e67a88497f0f8e54b0203"}, "created_at": 1743088111.4744241, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_471c3d29cc7e67a88497f0f8e54b0203\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202211_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202211_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202211_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202212_citibike_tripdata_1_ride_id.822e662f10": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202212_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202212_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202212_citibike_tripdata_1_ride_id.822e662f10", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202212_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2022_202212_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.477196, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202212_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202212_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202212_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202212_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.12325c9469": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202212_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_1295b12e303424819fef200d2421bae9.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202212_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.12325c9469", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202212_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_1295b12e303424819fef200d2421bae9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_1295b12e303424819fef200d2421bae9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_1295b12e303424819fef200d2421bae9"}, "created_at": 1743088111.4782012, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_1295b12e303424819fef200d2421bae9\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202212_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202212_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202212_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202212_citibike_tripdata_1_member_casual__member__casual.6fab7bc4be": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202212_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_c648c79a3d5bd36051824fc14c2202e6.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202212_citibike_tripdata_1_member_casual__member__casual.6fab7bc4be", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202212_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_c648c79a3d5bd36051824fc14c2202e6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_c648c79a3d5bd36051824fc14c2202e6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_c648c79a3d5bd36051824fc14c2202e6"}, "created_at": 1743088111.480831, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_c648c79a3d5bd36051824fc14c2202e6\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202212_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202212_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202212_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2022_202212_citibike_tripdata_2_ride_id.10f061f8b1": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2022_202212_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2022_202212_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2022_202212_citibike_tripdata_2_ride_id.10f061f8b1", "fqn": ["data_transform", "staging", "source_unique_staging_2022_202212_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2022_202212_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.483453, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202212_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2022.202212_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2022', '202212_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202212_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.44c741a425": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202212_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_18c163079fbf814032c0e52e18326857.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202212_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.44c741a425", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202212_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_18c163079fbf814032c0e52e18326857", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_18c163079fbf814032c0e52e18326857", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_18c163079fbf814032c0e52e18326857"}, "created_at": 1743088111.4844449, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_18c163079fbf814032c0e52e18326857\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202212_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202212_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2022', '202212_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2022_202212_citibike_tripdata_2_member_casual__member__casual.f83be4c4ba": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2022_202212_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_6933c7643c458a9401cf139abcce69e4.sql", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2022_202212_citibike_tripdata_2_member_casual__member__casual.f83be4c4ba", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2022_202212_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_6933c7643c458a9401cf139abcce69e4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_6933c7643c458a9401cf139abcce69e4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_6933c7643c458a9401cf139abcce69e4"}, "created_at": 1743088111.4870899, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_6933c7643c458a9401cf139abcce69e4\") }}", "language": "sql", "refs": [], "sources": [["staging_2022", "202212_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2022.202212_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2022", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2022', '202212_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202301_citibike_tripdata_1_ride_id.81bc5c6565": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202301_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202301_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202301_citibike_tripdata_1_ride_id.81bc5c6565", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202301_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2023_202301_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.489853, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202301_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202301_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202301_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202301_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.24bd699579": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202301_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_2e46274fe29b5de208bd56875595c72c.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202301_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.24bd699579", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202301_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_2e46274fe29b5de208bd56875595c72c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_2e46274fe29b5de208bd56875595c72c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_2e46274fe29b5de208bd56875595c72c"}, "created_at": 1743088111.490855, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_2e46274fe29b5de208bd56875595c72c\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202301_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202301_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202301_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202301_citibike_tripdata_1_member_casual__member__casual.e67c36625a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202301_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_913877dc7f906f6b13be3df0765be414.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202301_citibike_tripdata_1_member_casual__member__casual.e67c36625a", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202301_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_913877dc7f906f6b13be3df0765be414", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_913877dc7f906f6b13be3df0765be414", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_913877dc7f906f6b13be3df0765be414"}, "created_at": 1743088111.493373, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_913877dc7f906f6b13be3df0765be414\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202301_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202301_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202301_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202301_citibike_tripdata_2_ride_id.95144646f2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202301_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202301_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202301_citibike_tripdata_2_ride_id.95144646f2", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202301_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2023_202301_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.4961212, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202301_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202301_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202301_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202301_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.57f725ca6e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202301_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_c2bfa4904b0c14e6e1dd2e49ca567d88.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202301_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.57f725ca6e", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202301_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_c2bfa4904b0c14e6e1dd2e49ca567d88", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_c2bfa4904b0c14e6e1dd2e49ca567d88", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_c2bfa4904b0c14e6e1dd2e49ca567d88"}, "created_at": 1743088111.4971159, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_c2bfa4904b0c14e6e1dd2e49ca567d88\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202301_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202301_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202301_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202301_citibike_tripdata_2_member_casual__member__casual.541abf690c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202301_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_7c6fcb74dd8b9d71a368359748533ab5.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202301_citibike_tripdata_2_member_casual__member__casual.541abf690c", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202301_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_7c6fcb74dd8b9d71a368359748533ab5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_7c6fcb74dd8b9d71a368359748533ab5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_7c6fcb74dd8b9d71a368359748533ab5"}, "created_at": 1743088111.499744, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_7c6fcb74dd8b9d71a368359748533ab5\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202301_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202301_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202301_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202302_citibike_tripdata_1_ride_id.df77abeebf": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202302_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202302_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202302_citibike_tripdata_1_ride_id.df77abeebf", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202302_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2023_202302_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.5023339, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202302_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202302_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202302_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202302_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.7b510489df": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202302_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_4e86a53c92ff08356d748058c553443f.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202302_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.7b510489df", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202302_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_4e86a53c92ff08356d748058c553443f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_4e86a53c92ff08356d748058c553443f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_4e86a53c92ff08356d748058c553443f"}, "created_at": 1743088111.5034728, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_4e86a53c92ff08356d748058c553443f\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202302_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202302_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202302_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202302_citibike_tripdata_1_member_casual__member__casual.aa74171390": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202302_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_8a7870b6249691ab64a68831e5e1b171.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202302_citibike_tripdata_1_member_casual__member__casual.aa74171390", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202302_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_8a7870b6249691ab64a68831e5e1b171", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_8a7870b6249691ab64a68831e5e1b171", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_8a7870b6249691ab64a68831e5e1b171"}, "created_at": 1743088111.505981, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_8a7870b6249691ab64a68831e5e1b171\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202302_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202302_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202302_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202302_citibike_tripdata_2_ride_id.49849a05ab": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202302_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202302_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202302_citibike_tripdata_2_ride_id.49849a05ab", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202302_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2023_202302_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.5087411, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202302_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202302_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202302_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202302_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.58988dbe96": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202302_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_f60a174760b748381ed26d94855be02f.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202302_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.58988dbe96", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202302_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_f60a174760b748381ed26d94855be02f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_f60a174760b748381ed26d94855be02f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_f60a174760b748381ed26d94855be02f"}, "created_at": 1743088111.5097349, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_f60a174760b748381ed26d94855be02f\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202302_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202302_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202302_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202302_citibike_tripdata_2_member_casual__member__casual.e6f6833cdf": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202302_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_389de339e9930f752168146098d66082.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202302_citibike_tripdata_2_member_casual__member__casual.e6f6833cdf", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202302_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_389de339e9930f752168146098d66082", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_389de339e9930f752168146098d66082", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_389de339e9930f752168146098d66082"}, "created_at": 1743088111.5123708, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_389de339e9930f752168146098d66082\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202302_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202302_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202302_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202303_citibike_tripdata_1_ride_id.5a9ff50cc0": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202303_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202303_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202303_citibike_tripdata_1_ride_id.5a9ff50cc0", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202303_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2023_202303_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.5149791, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202303_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202303_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202303_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.f9be5d298d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202303_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_f992da56a86460950d4cd27cae2b805c.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.f9be5d298d", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202303_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_f992da56a86460950d4cd27cae2b805c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_f992da56a86460950d4cd27cae2b805c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_f992da56a86460950d4cd27cae2b805c"}, "created_at": 1743088111.515973, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_f992da56a86460950d4cd27cae2b805c\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202303_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202303_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202303_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_1_member_casual__member__casual.e0ac68a4ae": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202303_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_427844b07bb20a9a42bdcea6e8ad6492.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_1_member_casual__member__casual.e0ac68a4ae", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202303_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_427844b07bb20a9a42bdcea6e8ad6492", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_427844b07bb20a9a42bdcea6e8ad6492", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_427844b07bb20a9a42bdcea6e8ad6492"}, "created_at": 1743088111.5186079, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_427844b07bb20a9a42bdcea6e8ad6492\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202303_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202303_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202303_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202303_citibike_tripdata_2_ride_id.3a0b9d32bd": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202303_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202303_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202303_citibike_tripdata_2_ride_id.3a0b9d32bd", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202303_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2023_202303_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.521871, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202303_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202303_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202303_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.66c6843a33": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202303_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_cdb585ae6c56009a46e8664a322c8b18.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.66c6843a33", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202303_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_cdb585ae6c56009a46e8664a322c8b18", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_cdb585ae6c56009a46e8664a322c8b18", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_cdb585ae6c56009a46e8664a322c8b18"}, "created_at": 1743088111.522871, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_cdb585ae6c56009a46e8664a322c8b18\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202303_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202303_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202303_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_2_member_casual__member__casual.34c0460743": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202303_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_98b28e64fd7188098a1162ac65bdc4fb.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_2_member_casual__member__casual.34c0460743", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202303_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_98b28e64fd7188098a1162ac65bdc4fb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_98b28e64fd7188098a1162ac65bdc4fb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_98b28e64fd7188098a1162ac65bdc4fb"}, "created_at": 1743088111.525378, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_98b28e64fd7188098a1162ac65bdc4fb\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202303_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202303_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202303_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202303_citibike_tripdata_3_ride_id.c3932d809c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202303_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202303_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202303_citibike_tripdata_3_ride_id.c3932d809c", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202303_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2023_202303_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.528121, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202303_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202303_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202303_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.be6459a9a1": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202303_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_7a97672dc64cc4212f4b0157d9483b66.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.be6459a9a1", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202303_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_7a97672dc64cc4212f4b0157d9483b66", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_7a97672dc64cc4212f4b0157d9483b66", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_7a97672dc64cc4212f4b0157d9483b66"}, "created_at": 1743088111.5291111, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_7a97672dc64cc4212f4b0157d9483b66\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202303_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202303_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202303_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_3_member_casual__member__casual.d4b1ad962f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202303_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_c73b1114a3ad34ce38492a4147768d4c.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_3_member_casual__member__casual.d4b1ad962f", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202303_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_c73b1114a3ad34ce38492a4147768d4c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_c73b1114a3ad34ce38492a4147768d4c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_c73b1114a3ad34ce38492a4147768d4c"}, "created_at": 1743088111.53173, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_c73b1114a3ad34ce38492a4147768d4c\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202303_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202303_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202303_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202304_citibike_tripdata_1_ride_id.e44aabb9e0": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202304_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202304_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202304_citibike_tripdata_1_ride_id.e44aabb9e0", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202304_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2023_202304_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.534349, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202304_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202304_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202304_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.970647df40": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202304_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_2b204bf00b7f1a5b5be88e381772be7a.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.970647df40", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202304_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_2b204bf00b7f1a5b5be88e381772be7a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_2b204bf00b7f1a5b5be88e381772be7a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_2b204bf00b7f1a5b5be88e381772be7a"}, "created_at": 1743088111.535488, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_2b204bf00b7f1a5b5be88e381772be7a\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202304_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202304_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202304_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_1_member_casual__member__casual.071818cc29": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202304_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_6ea69ec92cd2669283d5c5ed4ba8c482.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_1_member_casual__member__casual.071818cc29", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202304_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_6ea69ec92cd2669283d5c5ed4ba8c482", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_6ea69ec92cd2669283d5c5ed4ba8c482", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_6ea69ec92cd2669283d5c5ed4ba8c482"}, "created_at": 1743088111.537992, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_6ea69ec92cd2669283d5c5ed4ba8c482\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202304_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202304_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202304_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202304_citibike_tripdata_2_ride_id.2495989b65": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202304_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202304_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202304_citibike_tripdata_2_ride_id.2495989b65", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202304_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2023_202304_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.54076, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202304_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202304_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202304_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.2bb8e80167": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202304_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_4a815f8ca8149bf25d0b582e7ccb9fa3.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.2bb8e80167", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202304_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_4a815f8ca8149bf25d0b582e7ccb9fa3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_4a815f8ca8149bf25d0b582e7ccb9fa3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_4a815f8ca8149bf25d0b582e7ccb9fa3"}, "created_at": 1743088111.541759, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_4a815f8ca8149bf25d0b582e7ccb9fa3\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202304_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202304_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202304_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_2_member_casual__member__casual.9bf18b0893": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202304_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_d43a50338b10a00f18b66e7b6345b410.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_2_member_casual__member__casual.9bf18b0893", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202304_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_d43a50338b10a00f18b66e7b6345b410", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_d43a50338b10a00f18b66e7b6345b410", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_d43a50338b10a00f18b66e7b6345b410"}, "created_at": 1743088111.54439, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_d43a50338b10a00f18b66e7b6345b410\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202304_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202304_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202304_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202304_citibike_tripdata_3_ride_id.669f8ac7db": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202304_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202304_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202304_citibike_tripdata_3_ride_id.669f8ac7db", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202304_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2023_202304_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.546998, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202304_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202304_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202304_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.cd9ebd1819": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202304_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_f7fd279243d894ec3004a0ac4d20eca1.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.cd9ebd1819", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202304_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_f7fd279243d894ec3004a0ac4d20eca1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_f7fd279243d894ec3004a0ac4d20eca1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_f7fd279243d894ec3004a0ac4d20eca1"}, "created_at": 1743088111.547979, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_f7fd279243d894ec3004a0ac4d20eca1\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202304_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202304_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202304_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_3_member_casual__member__casual.19da833df1": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202304_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_884f87d4404f1b3abd503b71470c28e0.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_3_member_casual__member__casual.19da833df1", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202304_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_884f87d4404f1b3abd503b71470c28e0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_884f87d4404f1b3abd503b71470c28e0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_884f87d4404f1b3abd503b71470c28e0"}, "created_at": 1743088111.550625, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_884f87d4404f1b3abd503b71470c28e0\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202304_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202304_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202304_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202305_citibike_tripdata_1_ride_id.990d64de35": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202305_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202305_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202305_citibike_tripdata_1_ride_id.990d64de35", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202305_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2023_202305_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.553371, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202305_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202305_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202305_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.c7b0de21f7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202305_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_ef4dfa360e8b0018187df48fc01d2d5b.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.c7b0de21f7", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202305_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_ef4dfa360e8b0018187df48fc01d2d5b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_ef4dfa360e8b0018187df48fc01d2d5b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_ef4dfa360e8b0018187df48fc01d2d5b"}, "created_at": 1743088111.554377, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_ef4dfa360e8b0018187df48fc01d2d5b\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202305_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202305_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202305_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_1_member_casual__member__casual.512fe17c3c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202305_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_ada8350975e5973052355a92fb56d9df.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_1_member_casual__member__casual.512fe17c3c", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202305_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_ada8350975e5973052355a92fb56d9df", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_ada8350975e5973052355a92fb56d9df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_ada8350975e5973052355a92fb56d9df"}, "created_at": 1743088111.556845, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_ada8350975e5973052355a92fb56d9df\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202305_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202305_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202305_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202305_citibike_tripdata_2_ride_id.a660f8f7ed": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202305_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202305_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202305_citibike_tripdata_2_ride_id.a660f8f7ed", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202305_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2023_202305_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.559587, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202305_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202305_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202305_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.8ceb74d6e9": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202305_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_443f9e485b0a4a7c63de67a5cf59fe88.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.8ceb74d6e9", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202305_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_443f9e485b0a4a7c63de67a5cf59fe88", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_443f9e485b0a4a7c63de67a5cf59fe88", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_443f9e485b0a4a7c63de67a5cf59fe88"}, "created_at": 1743088111.5605729, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_443f9e485b0a4a7c63de67a5cf59fe88\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202305_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202305_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202305_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_2_member_casual__member__casual.645b5b6596": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202305_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_85525c882d52984f01a8d1ef4a4ccb91.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_2_member_casual__member__casual.645b5b6596", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202305_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_85525c882d52984f01a8d1ef4a4ccb91", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_85525c882d52984f01a8d1ef4a4ccb91", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_85525c882d52984f01a8d1ef4a4ccb91"}, "created_at": 1743088111.563204, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_85525c882d52984f01a8d1ef4a4ccb91\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202305_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202305_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202305_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202305_citibike_tripdata_3_ride_id.beb699afce": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202305_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202305_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202305_citibike_tripdata_3_ride_id.beb699afce", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202305_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2023_202305_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.565801, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202305_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202305_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202305_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.9ccd327201": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202305_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_6d9399232749bf1ca29bf3d69ca3313a.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.9ccd327201", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202305_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_6d9399232749bf1ca29bf3d69ca3313a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_6d9399232749bf1ca29bf3d69ca3313a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_6d9399232749bf1ca29bf3d69ca3313a"}, "created_at": 1743088111.5667882, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_6d9399232749bf1ca29bf3d69ca3313a\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202305_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202305_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202305_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_3_member_casual__member__casual.f8f8e1dba2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202305_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_92753ec4039062d5956d201edd9fd53a.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_3_member_casual__member__casual.f8f8e1dba2", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202305_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_92753ec4039062d5956d201edd9fd53a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_92753ec4039062d5956d201edd9fd53a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_92753ec4039062d5956d201edd9fd53a"}, "created_at": 1743088111.5694091, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_92753ec4039062d5956d201edd9fd53a\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202305_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202305_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202305_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202305_citibike_tripdata_4_ride_id.13182399ce": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202305_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202305_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202305_citibike_tripdata_4_ride_id.13182399ce", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202305_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2023_202305_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.572413, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202305_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202305_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202305_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.f392354653": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202305_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_ae8716a74d2c9e5467dfc4f5f42ece3e.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.f392354653", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202305_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_ae8716a74d2c9e5467dfc4f5f42ece3e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_ae8716a74d2c9e5467dfc4f5f42ece3e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_ae8716a74d2c9e5467dfc4f5f42ece3e"}, "created_at": 1743088111.573528, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_ae8716a74d2c9e5467dfc4f5f42ece3e\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202305_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202305_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202305_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_4_member_casual__member__casual.b023b511ed": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202305_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_f2afe4e9ee1774fd490a392ad78ccb84.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_4_member_casual__member__casual.b023b511ed", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202305_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_f2afe4e9ee1774fd490a392ad78ccb84", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_f2afe4e9ee1774fd490a392ad78ccb84", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_f2afe4e9ee1774fd490a392ad78ccb84"}, "created_at": 1743088111.5764108, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_f2afe4e9ee1774fd490a392ad78ccb84\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202305_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202305_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202305_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202306_citibike_tripdata_1_ride_id.548908d88b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202306_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202306_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202306_citibike_tripdata_1_ride_id.548908d88b", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202306_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2023_202306_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.579896, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202306_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202306_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202306_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.77a007c156": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202306_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_a3399feba35bde21b11c2d2017a82252.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.77a007c156", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202306_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_a3399feba35bde21b11c2d2017a82252", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_a3399feba35bde21b11c2d2017a82252", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_a3399feba35bde21b11c2d2017a82252"}, "created_at": 1743088111.580893, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_a3399feba35bde21b11c2d2017a82252\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202306_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202306_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202306_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_1_member_casual__member__casual.27439f1a8d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202306_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_a94a95f398c11d64e7409c5245b7d123.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_1_member_casual__member__casual.27439f1a8d", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202306_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_a94a95f398c11d64e7409c5245b7d123", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_a94a95f398c11d64e7409c5245b7d123", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_a94a95f398c11d64e7409c5245b7d123"}, "created_at": 1743088111.5835571, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_a94a95f398c11d64e7409c5245b7d123\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202306_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202306_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202306_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202306_citibike_tripdata_2_ride_id.aa62dd10cd": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202306_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202306_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202306_citibike_tripdata_2_ride_id.aa62dd10cd", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202306_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2023_202306_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.586678, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202306_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202306_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202306_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.c4d4c174b3": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202306_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_93f37f805e2f5973010d875d16582dd0.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.c4d4c174b3", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202306_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_93f37f805e2f5973010d875d16582dd0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_93f37f805e2f5973010d875d16582dd0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_93f37f805e2f5973010d875d16582dd0"}, "created_at": 1743088111.587857, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_93f37f805e2f5973010d875d16582dd0\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202306_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202306_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202306_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_2_member_casual__member__casual.1e94854976": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202306_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_d99d2f3cd5f95e65a85b21cd108df99d.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_2_member_casual__member__casual.1e94854976", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202306_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_d99d2f3cd5f95e65a85b21cd108df99d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_d99d2f3cd5f95e65a85b21cd108df99d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_d99d2f3cd5f95e65a85b21cd108df99d"}, "created_at": 1743088111.590425, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_d99d2f3cd5f95e65a85b21cd108df99d\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202306_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202306_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202306_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202306_citibike_tripdata_3_ride_id.23bf24d291": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202306_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202306_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202306_citibike_tripdata_3_ride_id.23bf24d291", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202306_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2023_202306_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.5932019, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202306_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202306_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202306_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.6e51086472": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202306_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_7848fd5ea5ee36bc699137ed6b3b1f09.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.6e51086472", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202306_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_7848fd5ea5ee36bc699137ed6b3b1f09", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_7848fd5ea5ee36bc699137ed6b3b1f09", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_7848fd5ea5ee36bc699137ed6b3b1f09"}, "created_at": 1743088111.594202, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_7848fd5ea5ee36bc699137ed6b3b1f09\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202306_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202306_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202306_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_3_member_casual__member__casual.2dca2126ea": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202306_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_c1aad6bfbcbf681d0f46bf672c292ef3.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_3_member_casual__member__casual.2dca2126ea", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202306_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_c1aad6bfbcbf681d0f46bf672c292ef3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_c1aad6bfbcbf681d0f46bf672c292ef3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_c1aad6bfbcbf681d0f46bf672c292ef3"}, "created_at": 1743088111.596857, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_c1aad6bfbcbf681d0f46bf672c292ef3\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202306_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202306_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202306_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202306_citibike_tripdata_4_ride_id.7ee4dba58b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202306_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202306_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202306_citibike_tripdata_4_ride_id.7ee4dba58b", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202306_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2023_202306_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.5995169, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202306_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202306_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202306_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.04ba57f9be": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202306_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_ae5e5785e911d214eafb02e4a9d991d1.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.04ba57f9be", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202306_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_ae5e5785e911d214eafb02e4a9d991d1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_ae5e5785e911d214eafb02e4a9d991d1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_ae5e5785e911d214eafb02e4a9d991d1"}, "created_at": 1743088111.600527, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_ae5e5785e911d214eafb02e4a9d991d1\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202306_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202306_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202306_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_4_member_casual__member__casual.46183437f7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202306_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_f4002d4ccf7015b5b1706b74e1e2a81b.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_4_member_casual__member__casual.46183437f7", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202306_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_f4002d4ccf7015b5b1706b74e1e2a81b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_f4002d4ccf7015b5b1706b74e1e2a81b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_f4002d4ccf7015b5b1706b74e1e2a81b"}, "created_at": 1743088111.603194, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_f4002d4ccf7015b5b1706b74e1e2a81b\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202306_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202306_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202306_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202307_citibike_tripdata_1_ride_id.5ed083175c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202307_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202307_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202307_citibike_tripdata_1_ride_id.5ed083175c", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202307_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2023_202307_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.605966, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202307_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202307_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202307_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.befb9dc7fc": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202307_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_69f531b109cd399594bc0ff51e0ca72e.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.befb9dc7fc", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202307_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_69f531b109cd399594bc0ff51e0ca72e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_69f531b109cd399594bc0ff51e0ca72e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_69f531b109cd399594bc0ff51e0ca72e"}, "created_at": 1743088111.606972, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_69f531b109cd399594bc0ff51e0ca72e\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202307_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202307_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202307_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_1_member_casual__member__casual.0f040b0db8": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202307_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_9e511965c92b885601344ad38a73b641.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_1_member_casual__member__casual.0f040b0db8", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202307_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_9e511965c92b885601344ad38a73b641", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_9e511965c92b885601344ad38a73b641", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_9e511965c92b885601344ad38a73b641"}, "created_at": 1743088111.60949, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_9e511965c92b885601344ad38a73b641\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202307_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202307_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202307_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202307_citibike_tripdata_2_ride_id.68c1a44ec1": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202307_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202307_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202307_citibike_tripdata_2_ride_id.68c1a44ec1", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202307_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2023_202307_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.612256, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202307_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202307_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202307_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.e967ac1960": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202307_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_81331a310ad1b527bb6e4c82afec13cb.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.e967ac1960", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202307_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_81331a310ad1b527bb6e4c82afec13cb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_81331a310ad1b527bb6e4c82afec13cb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_81331a310ad1b527bb6e4c82afec13cb"}, "created_at": 1743088111.6132538, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_81331a310ad1b527bb6e4c82afec13cb\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202307_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202307_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202307_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_2_member_casual__member__casual.f1ed4abb5d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202307_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_b170e63e2d84ff8e6e8497b2d7f9a153.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_2_member_casual__member__casual.f1ed4abb5d", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202307_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_b170e63e2d84ff8e6e8497b2d7f9a153", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_b170e63e2d84ff8e6e8497b2d7f9a153", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_b170e63e2d84ff8e6e8497b2d7f9a153"}, "created_at": 1743088111.6158762, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_b170e63e2d84ff8e6e8497b2d7f9a153\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202307_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202307_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202307_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202307_citibike_tripdata_3_ride_id.d24badf4df": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202307_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202307_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202307_citibike_tripdata_3_ride_id.d24badf4df", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202307_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2023_202307_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.618732, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202307_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202307_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202307_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c3e53cedb4": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202307_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_6dae0a31e62031bb044ba3949cf2a727.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c3e53cedb4", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202307_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_6dae0a31e62031bb044ba3949cf2a727", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_6dae0a31e62031bb044ba3949cf2a727", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_6dae0a31e62031bb044ba3949cf2a727"}, "created_at": 1743088111.6197271, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_6dae0a31e62031bb044ba3949cf2a727\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202307_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202307_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202307_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_3_member_casual__member__casual.2fbb9c7047": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202307_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_937d12daf127d5e045c0af375ec1e4a1.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_3_member_casual__member__casual.2fbb9c7047", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202307_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_937d12daf127d5e045c0af375ec1e4a1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_937d12daf127d5e045c0af375ec1e4a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_937d12daf127d5e045c0af375ec1e4a1"}, "created_at": 1743088111.6225421, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_937d12daf127d5e045c0af375ec1e4a1\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202307_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202307_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202307_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202307_citibike_tripdata_4_ride_id.5d03214987": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202307_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202307_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202307_citibike_tripdata_4_ride_id.5d03214987", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202307_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2023_202307_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.625213, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202307_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202307_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202307_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.a989a7c7ed": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202307_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_52c02c26d2fae131e85a0cb18bb5eb73.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.a989a7c7ed", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202307_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_52c02c26d2fae131e85a0cb18bb5eb73", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_52c02c26d2fae131e85a0cb18bb5eb73", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_52c02c26d2fae131e85a0cb18bb5eb73"}, "created_at": 1743088111.6261709, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_52c02c26d2fae131e85a0cb18bb5eb73\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202307_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202307_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202307_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_4_member_casual__member__casual.c18da0a869": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202307_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_86a36860b819a796f3779a1048ec2419.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_4_member_casual__member__casual.c18da0a869", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202307_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_86a36860b819a796f3779a1048ec2419", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_86a36860b819a796f3779a1048ec2419", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_86a36860b819a796f3779a1048ec2419"}, "created_at": 1743088111.628983, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_86a36860b819a796f3779a1048ec2419\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202307_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202307_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202307_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202308_citibike_tripdata_1_ride_id.1a79714889": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202308_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202308_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202308_citibike_tripdata_1_ride_id.1a79714889", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202308_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2023_202308_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.632007, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202308_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202308_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202308_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.83dd22a73f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202308_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_1668a557f31be74753c06572df22869b.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.83dd22a73f", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202308_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_1668a557f31be74753c06572df22869b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_1668a557f31be74753c06572df22869b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_1668a557f31be74753c06572df22869b"}, "created_at": 1743088111.633013, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_1668a557f31be74753c06572df22869b\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202308_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202308_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202308_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_1_member_casual__member__casual.b54c1072f8": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202308_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_aa937a96d7aa0e253dd07034dee6106e.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_1_member_casual__member__casual.b54c1072f8", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202308_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_aa937a96d7aa0e253dd07034dee6106e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_aa937a96d7aa0e253dd07034dee6106e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_aa937a96d7aa0e253dd07034dee6106e"}, "created_at": 1743088111.6363258, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_aa937a96d7aa0e253dd07034dee6106e\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202308_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202308_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202308_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202308_citibike_tripdata_2_ride_id.952717e3e1": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202308_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202308_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202308_citibike_tripdata_2_ride_id.952717e3e1", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202308_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2023_202308_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.638914, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202308_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202308_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202308_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.797ac00c56": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202308_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_bda0a0c648bb65c19fae325072d543f2.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.797ac00c56", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202308_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_bda0a0c648bb65c19fae325072d543f2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_bda0a0c648bb65c19fae325072d543f2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_bda0a0c648bb65c19fae325072d543f2"}, "created_at": 1743088111.640018, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_bda0a0c648bb65c19fae325072d543f2\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202308_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202308_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202308_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_2_member_casual__member__casual.ba3056da09": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202308_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_b0464f57b1c1d7367d99af04285d44e6.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_2_member_casual__member__casual.ba3056da09", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202308_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_b0464f57b1c1d7367d99af04285d44e6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_b0464f57b1c1d7367d99af04285d44e6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_b0464f57b1c1d7367d99af04285d44e6"}, "created_at": 1743088111.642543, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_b0464f57b1c1d7367d99af04285d44e6\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202308_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202308_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202308_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202308_citibike_tripdata_3_ride_id.af9f395666": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202308_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202308_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202308_citibike_tripdata_3_ride_id.af9f395666", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202308_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2023_202308_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.6456, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202308_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202308_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202308_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.279ec126a7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202308_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_73384171bd2ff8f5d62bc9350e8844ee.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.279ec126a7", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202308_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_73384171bd2ff8f5d62bc9350e8844ee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_73384171bd2ff8f5d62bc9350e8844ee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_73384171bd2ff8f5d62bc9350e8844ee"}, "created_at": 1743088111.646615, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_73384171bd2ff8f5d62bc9350e8844ee\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202308_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202308_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202308_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_3_member_casual__member__casual.f7fbdf8255": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202308_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_084b28a1b1378968bfbf7276bca61575.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_3_member_casual__member__casual.f7fbdf8255", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202308_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_084b28a1b1378968bfbf7276bca61575", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_084b28a1b1378968bfbf7276bca61575", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_084b28a1b1378968bfbf7276bca61575"}, "created_at": 1743088111.6493719, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_084b28a1b1378968bfbf7276bca61575\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202308_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202308_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202308_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202308_citibike_tripdata_4_ride_id.275fe7ce2a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202308_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202308_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202308_citibike_tripdata_4_ride_id.275fe7ce2a", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202308_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2023_202308_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.652274, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202308_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202308_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202308_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.a251739d4d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202308_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_ea8690786282b6638c77c08ffabfad10.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.a251739d4d", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202308_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_ea8690786282b6638c77c08ffabfad10", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_ea8690786282b6638c77c08ffabfad10", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_ea8690786282b6638c77c08ffabfad10"}, "created_at": 1743088111.6535108, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_ea8690786282b6638c77c08ffabfad10\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202308_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202308_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202308_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_4_member_casual__member__casual.b771418036": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202308_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_5f0576e5935af835e29a0d5c8026a46d.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_4_member_casual__member__casual.b771418036", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202308_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_5f0576e5935af835e29a0d5c8026a46d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_5f0576e5935af835e29a0d5c8026a46d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_5f0576e5935af835e29a0d5c8026a46d"}, "created_at": 1743088111.656472, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_5f0576e5935af835e29a0d5c8026a46d\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202308_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202308_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202308_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202309_citibike_tripdata_1_ride_id.230aeb3b4b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202309_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202309_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202309_citibike_tripdata_1_ride_id.230aeb3b4b", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202309_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2023_202309_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.659082, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202309_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202309_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202309_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.86306e4c75": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202309_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_93a035af9e709fdd3262ec352d9f3af8.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.86306e4c75", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202309_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_93a035af9e709fdd3262ec352d9f3af8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_93a035af9e709fdd3262ec352d9f3af8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_93a035af9e709fdd3262ec352d9f3af8"}, "created_at": 1743088111.6602108, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_93a035af9e709fdd3262ec352d9f3af8\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202309_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202309_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202309_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_1_member_casual__member__casual.9162740ebf": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202309_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_83c313c627e16ab38dc57c64f9c6c043.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_1_member_casual__member__casual.9162740ebf", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202309_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_83c313c627e16ab38dc57c64f9c6c043", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_83c313c627e16ab38dc57c64f9c6c043", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_83c313c627e16ab38dc57c64f9c6c043"}, "created_at": 1743088111.662736, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_83c313c627e16ab38dc57c64f9c6c043\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202309_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202309_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202309_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202309_citibike_tripdata_2_ride_id.a703cfc9fc": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202309_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202309_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202309_citibike_tripdata_2_ride_id.a703cfc9fc", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202309_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2023_202309_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.665559, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202309_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202309_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202309_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.77dc74e850": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202309_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_f33640f3d9e5da1f9906361244ade615.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.77dc74e850", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202309_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_f33640f3d9e5da1f9906361244ade615", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_f33640f3d9e5da1f9906361244ade615", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_f33640f3d9e5da1f9906361244ade615"}, "created_at": 1743088111.666571, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_f33640f3d9e5da1f9906361244ade615\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202309_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202309_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202309_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_2_member_casual__member__casual.c8eaa2ed28": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202309_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_0c70bc440fa839def4b3a55dba289ff0.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_2_member_casual__member__casual.c8eaa2ed28", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202309_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_0c70bc440fa839def4b3a55dba289ff0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_0c70bc440fa839def4b3a55dba289ff0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_0c70bc440fa839def4b3a55dba289ff0"}, "created_at": 1743088111.669256, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_0c70bc440fa839def4b3a55dba289ff0\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202309_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202309_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202309_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202309_citibike_tripdata_3_ride_id.d01f717cf2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202309_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202309_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202309_citibike_tripdata_3_ride_id.d01f717cf2", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202309_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2023_202309_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.671883, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202309_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202309_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202309_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.1a8d556210": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202309_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_95c0991098f0d79801c3fe60f3150781.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.1a8d556210", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202309_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_95c0991098f0d79801c3fe60f3150781", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_95c0991098f0d79801c3fe60f3150781", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_95c0991098f0d79801c3fe60f3150781"}, "created_at": 1743088111.6728861, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_95c0991098f0d79801c3fe60f3150781\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202309_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202309_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202309_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_3_member_casual__member__casual.b14b1303bf": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202309_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_3b77d8939e54418c8549471eb603a5fa.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_3_member_casual__member__casual.b14b1303bf", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202309_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_3b77d8939e54418c8549471eb603a5fa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_3b77d8939e54418c8549471eb603a5fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_3b77d8939e54418c8549471eb603a5fa"}, "created_at": 1743088111.675562, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_3b77d8939e54418c8549471eb603a5fa\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202309_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202309_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202309_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202309_citibike_tripdata_4_ride_id.444ada612f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202309_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202309_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202309_citibike_tripdata_4_ride_id.444ada612f", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202309_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2023_202309_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.678305, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202309_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202309_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202309_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.923d5ae346": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202309_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_2804b344aacb860a79dd7f3da8c34c5e.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.923d5ae346", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202309_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_2804b344aacb860a79dd7f3da8c34c5e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_2804b344aacb860a79dd7f3da8c34c5e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_2804b344aacb860a79dd7f3da8c34c5e"}, "created_at": 1743088111.679307, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_2804b344aacb860a79dd7f3da8c34c5e\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202309_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202309_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202309_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_4_member_casual__member__casual.cfa900e5cf": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202309_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_eeabd9559376726c8afe2daa17fbd460.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_4_member_casual__member__casual.cfa900e5cf", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202309_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_eeabd9559376726c8afe2daa17fbd460", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_eeabd9559376726c8afe2daa17fbd460", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_eeabd9559376726c8afe2daa17fbd460"}, "created_at": 1743088111.681786, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_eeabd9559376726c8afe2daa17fbd460\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202309_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202309_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202309_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202310_citibike_tripdata_1_ride_id.590853bc7c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202310_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202310_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202310_citibike_tripdata_1_ride_id.590853bc7c", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202310_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2023_202310_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.68459, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202310_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202310_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202310_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.82886257cb": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202310_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_b8e71e6b76cda3a0b94ab74d02443148.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.82886257cb", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202310_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_b8e71e6b76cda3a0b94ab74d02443148", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_b8e71e6b76cda3a0b94ab74d02443148", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_b8e71e6b76cda3a0b94ab74d02443148"}, "created_at": 1743088111.685559, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_b8e71e6b76cda3a0b94ab74d02443148\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202310_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202310_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202310_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_1_member_casual__member__casual.60b188b02a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202310_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_b18a43ff7f72d3697690cadf9cee0134.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_1_member_casual__member__casual.60b188b02a", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202310_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_b18a43ff7f72d3697690cadf9cee0134", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_b18a43ff7f72d3697690cadf9cee0134", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_b18a43ff7f72d3697690cadf9cee0134"}, "created_at": 1743088111.6881979, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_b18a43ff7f72d3697690cadf9cee0134\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202310_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202310_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202310_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202310_citibike_tripdata_2_ride_id.0e9c742b01": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202310_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202310_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202310_citibike_tripdata_2_ride_id.0e9c742b01", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202310_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2023_202310_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.69071, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202310_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202310_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202310_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d824a977e6": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202310_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_dcedd18ba483d9f44c334cda109c9bdc.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d824a977e6", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202310_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_dcedd18ba483d9f44c334cda109c9bdc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_dcedd18ba483d9f44c334cda109c9bdc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_dcedd18ba483d9f44c334cda109c9bdc"}, "created_at": 1743088111.692265, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_dcedd18ba483d9f44c334cda109c9bdc\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202310_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202310_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202310_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_2_member_casual__member__casual.6caea0aea6": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202310_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_8c9a628eec6acceeb1d4bc621edeba91.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_2_member_casual__member__casual.6caea0aea6", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202310_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_8c9a628eec6acceeb1d4bc621edeba91", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_8c9a628eec6acceeb1d4bc621edeba91", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_8c9a628eec6acceeb1d4bc621edeba91"}, "created_at": 1743088111.6947231, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_8c9a628eec6acceeb1d4bc621edeba91\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202310_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202310_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202310_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202310_citibike_tripdata_3_ride_id.c6726ceeef": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202310_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202310_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202310_citibike_tripdata_3_ride_id.c6726ceeef", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202310_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2023_202310_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.697487, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202310_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202310_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202310_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.bcb96aff07": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202310_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_fdca0d19c21a7785047e1ed840fd2ba3.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.bcb96aff07", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202310_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_fdca0d19c21a7785047e1ed840fd2ba3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_fdca0d19c21a7785047e1ed840fd2ba3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_fdca0d19c21a7785047e1ed840fd2ba3"}, "created_at": 1743088111.698486, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_fdca0d19c21a7785047e1ed840fd2ba3\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202310_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202310_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202310_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_3_member_casual__member__casual.0ba5e64a3e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202310_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_17e74ab0c772390092f37cffebc8389b.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_3_member_casual__member__casual.0ba5e64a3e", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202310_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_17e74ab0c772390092f37cffebc8389b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_17e74ab0c772390092f37cffebc8389b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_17e74ab0c772390092f37cffebc8389b"}, "created_at": 1743088111.701102, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_17e74ab0c772390092f37cffebc8389b\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202310_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202310_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202310_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202310_citibike_tripdata_4_ride_id.f455889270": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202310_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202310_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202310_citibike_tripdata_4_ride_id.f455889270", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202310_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2023_202310_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.703725, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202310_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202310_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202310_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.519a2908a6": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202310_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_9ac8561b1fdf9e5d6855daabbcfe1bbf.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.519a2908a6", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202310_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_9ac8561b1fdf9e5d6855daabbcfe1bbf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_9ac8561b1fdf9e5d6855daabbcfe1bbf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_9ac8561b1fdf9e5d6855daabbcfe1bbf"}, "created_at": 1743088111.704712, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_9ac8561b1fdf9e5d6855daabbcfe1bbf\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202310_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202310_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202310_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_4_member_casual__member__casual.76e7653260": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202310_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_58601f763221b7b7cbdd7f1cdf768963.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_4_member_casual__member__casual.76e7653260", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202310_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_58601f763221b7b7cbdd7f1cdf768963", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_58601f763221b7b7cbdd7f1cdf768963", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_58601f763221b7b7cbdd7f1cdf768963"}, "created_at": 1743088111.707338, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_58601f763221b7b7cbdd7f1cdf768963\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202310_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202310_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202310_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202311_citibike_tripdata_1_ride_id.c537ed70bc": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202311_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202311_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202311_citibike_tripdata_1_ride_id.c537ed70bc", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202311_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2023_202311_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.709941, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202311_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202311_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202311_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.804b475b49": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202311_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_c999c1deb6153769a6fb6863f29867ff.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.804b475b49", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202311_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_c999c1deb6153769a6fb6863f29867ff", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_c999c1deb6153769a6fb6863f29867ff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_c999c1deb6153769a6fb6863f29867ff"}, "created_at": 1743088111.711107, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_c999c1deb6153769a6fb6863f29867ff\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202311_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202311_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202311_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_1_member_casual__member__casual.72f204fd38": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202311_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_78a20aa1a4aa57f48c61ccae3521c8fe.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_1_member_casual__member__casual.72f204fd38", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202311_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_78a20aa1a4aa57f48c61ccae3521c8fe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_78a20aa1a4aa57f48c61ccae3521c8fe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_78a20aa1a4aa57f48c61ccae3521c8fe"}, "created_at": 1743088111.7136042, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_78a20aa1a4aa57f48c61ccae3521c8fe\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202311_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202311_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202311_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202311_citibike_tripdata_2_ride_id.c4ca9d9146": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202311_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202311_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202311_citibike_tripdata_2_ride_id.c4ca9d9146", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202311_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2023_202311_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.716367, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202311_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202311_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202311_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.bccf307e18": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202311_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_a6fee41cf97067c1e64228dc62853962.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.bccf307e18", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202311_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_a6fee41cf97067c1e64228dc62853962", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_a6fee41cf97067c1e64228dc62853962", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_a6fee41cf97067c1e64228dc62853962"}, "created_at": 1743088111.717417, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_a6fee41cf97067c1e64228dc62853962\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202311_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202311_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202311_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_2_member_casual__member__casual.2d177c4282": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202311_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_e3f240f0f7f5ce26ef8f1d8b43b51340.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_2_member_casual__member__casual.2d177c4282", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202311_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_e3f240f0f7f5ce26ef8f1d8b43b51340", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_e3f240f0f7f5ce26ef8f1d8b43b51340", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_e3f240f0f7f5ce26ef8f1d8b43b51340"}, "created_at": 1743088111.720275, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_e3f240f0f7f5ce26ef8f1d8b43b51340\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202311_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202311_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202311_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202311_citibike_tripdata_3_ride_id.a01b8419df": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202311_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202311_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202311_citibike_tripdata_3_ride_id.a01b8419df", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202311_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2023_202311_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.7228348, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202311_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202311_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202311_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.171ea52344": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202311_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_8f936237bc77ad5d3a1e6f5765274a30.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.171ea52344", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202311_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_8f936237bc77ad5d3a1e6f5765274a30", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_8f936237bc77ad5d3a1e6f5765274a30", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_8f936237bc77ad5d3a1e6f5765274a30"}, "created_at": 1743088111.723797, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_8f936237bc77ad5d3a1e6f5765274a30\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202311_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202311_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202311_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_3_member_casual__member__casual.e80c12b3aa": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202311_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_a294b56e038b637e31e2879538044b5d.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_3_member_casual__member__casual.e80c12b3aa", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202311_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_a294b56e038b637e31e2879538044b5d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_a294b56e038b637e31e2879538044b5d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_a294b56e038b637e31e2879538044b5d"}, "created_at": 1743088111.726329, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_a294b56e038b637e31e2879538044b5d\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202311_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202311_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202311_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202312_citibike_tripdata_1_ride_id.1572033f07": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202312_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202312_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202312_citibike_tripdata_1_ride_id.1572033f07", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202312_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2023_202312_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.729681, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202312_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202312_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202312_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.176e483354": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202312_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_8609925449fb25042155c12dbd847286.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.176e483354", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202312_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_8609925449fb25042155c12dbd847286", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_8609925449fb25042155c12dbd847286", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_8609925449fb25042155c12dbd847286"}, "created_at": 1743088111.7307498, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_8609925449fb25042155c12dbd847286\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202312_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202312_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202312_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_1_member_casual__member__casual.3589b387d1": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202312_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_3f6e5681017f2eb1413de114a048ab88.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_1_member_casual__member__casual.3589b387d1", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202312_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_3f6e5681017f2eb1413de114a048ab88", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_3f6e5681017f2eb1413de114a048ab88", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_3f6e5681017f2eb1413de114a048ab88"}, "created_at": 1743088111.733585, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_3f6e5681017f2eb1413de114a048ab88\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202312_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202312_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202312_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202312_citibike_tripdata_2_ride_id.5a0bb8a281": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202312_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202312_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202312_citibike_tripdata_2_ride_id.5a0bb8a281", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202312_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2023_202312_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.7364511, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202312_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202312_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202312_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.e8a6e3b4c1": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202312_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_16212218926a3fc832bc2a6b7c932271.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.e8a6e3b4c1", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202312_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_16212218926a3fc832bc2a6b7c932271", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_16212218926a3fc832bc2a6b7c932271", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_16212218926a3fc832bc2a6b7c932271"}, "created_at": 1743088111.737473, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_16212218926a3fc832bc2a6b7c932271\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202312_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202312_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202312_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_2_member_casual__member__casual.3c634055ce": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202312_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_62690f8a27cc56ff578703f01edc5db4.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_2_member_casual__member__casual.3c634055ce", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202312_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_62690f8a27cc56ff578703f01edc5db4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_62690f8a27cc56ff578703f01edc5db4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_62690f8a27cc56ff578703f01edc5db4"}, "created_at": 1743088111.740206, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_62690f8a27cc56ff578703f01edc5db4\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202312_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202312_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202312_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2023_202312_citibike_tripdata_3_ride_id.bc8b30cd14": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2023_202312_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2023_202312_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2023_202312_citibike_tripdata_3_ride_id.bc8b30cd14", "fqn": ["data_transform", "staging", "source_unique_staging_2023_202312_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2023_202312_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.742881, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202312_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2023.202312_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2023', '202312_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b15f4b9e5e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202312_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_772959182c13c9da1cc601b9d601e5c8.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b15f4b9e5e", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202312_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_772959182c13c9da1cc601b9d601e5c8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_772959182c13c9da1cc601b9d601e5c8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_772959182c13c9da1cc601b9d601e5c8"}, "created_at": 1743088111.7440078, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_772959182c13c9da1cc601b9d601e5c8\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202312_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202312_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2023', '202312_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_3_member_casual__member__casual.04c6a2e0c6": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2023_202312_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_4803cd0b88b8b4ff05af42850d1bb23e.sql", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_3_member_casual__member__casual.04c6a2e0c6", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2023_202312_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_4803cd0b88b8b4ff05af42850d1bb23e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_4803cd0b88b8b4ff05af42850d1bb23e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_4803cd0b88b8b4ff05af42850d1bb23e"}, "created_at": 1743088111.746551, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_4803cd0b88b8b4ff05af42850d1bb23e\") }}", "language": "sql", "refs": [], "sources": [["staging_2023", "202312_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2023.202312_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2023", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2023', '202312_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202401_citibike_tripdata_ride_id.9c1bfdd0e8": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202401_citibike_tripdata_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202401_citibike_tripdata_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202401_citibike_tripdata_ride_id.9c1bfdd0e8", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202401_citibike_tripdata_ride_id"], "alias": "source_unique_staging_2024_202401_citibike_tripdata_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.7499058, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202401_citibike_tripdata"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202401_citibike_tripdata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202401_citibike_tripdata')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202401_citibike_tripdata_rideable_type__electric_bike__classic_bike.9e5955f373": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202401_citibike_tripdata_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_486204ce2a3a3c22c88effb6786ab225.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202401_citibike_tripdata_rideable_type__electric_bike__classic_bike.9e5955f373", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202401_citibike_tripdata_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_486204ce2a3a3c22c88effb6786ab225", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_486204ce2a3a3c22c88effb6786ab225", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_486204ce2a3a3c22c88effb6786ab225"}, "created_at": 1743088111.750987, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_486204ce2a3a3c22c88effb6786ab225\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202401_citibike_tripdata"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202401_citibike_tripdata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202401_citibike_tripdata')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202401_citibike_tripdata_member_casual__member__casual.2af7a66c89": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202401_citibike_tripdata_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_522472872e8cacde3fb1d5aa3db8af29.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202401_citibike_tripdata_member_casual__member__casual.2af7a66c89", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202401_citibike_tripdata_member_casual__member__casual"], "alias": "source_accepted_values_staging_522472872e8cacde3fb1d5aa3db8af29", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_522472872e8cacde3fb1d5aa3db8af29", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_522472872e8cacde3fb1d5aa3db8af29"}, "created_at": 1743088111.753566, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_522472872e8cacde3fb1d5aa3db8af29\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202401_citibike_tripdata"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202401_citibike_tripdata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202401_citibike_tripdata')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202402_citibike_tripdata_ride_id.e0a561b57b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202402_citibike_tripdata_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202402_citibike_tripdata_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202402_citibike_tripdata_ride_id.e0a561b57b", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202402_citibike_tripdata_ride_id"], "alias": "source_unique_staging_2024_202402_citibike_tripdata_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.756022, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202402_citibike_tripdata"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202402_citibike_tripdata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202402_citibike_tripdata')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202402_citibike_tripdata_rideable_type__electric_bike__classic_bike.ab211f12fb": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202402_citibike_tripdata_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_931a898a806738aae5cec61305cd6055.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202402_citibike_tripdata_rideable_type__electric_bike__classic_bike.ab211f12fb", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202402_citibike_tripdata_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_931a898a806738aae5cec61305cd6055", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_931a898a806738aae5cec61305cd6055", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_931a898a806738aae5cec61305cd6055"}, "created_at": 1743088111.756947, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_931a898a806738aae5cec61305cd6055\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202402_citibike_tripdata"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202402_citibike_tripdata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202402_citibike_tripdata')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202402_citibike_tripdata_member_casual__member__casual.90a16e8e8c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202402_citibike_tripdata_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_fac89d03f727173e88bb4eec2a12dcf8.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202402_citibike_tripdata_member_casual__member__casual.90a16e8e8c", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202402_citibike_tripdata_member_casual__member__casual"], "alias": "source_accepted_values_staging_fac89d03f727173e88bb4eec2a12dcf8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_fac89d03f727173e88bb4eec2a12dcf8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_fac89d03f727173e88bb4eec2a12dcf8"}, "created_at": 1743088111.7594292, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_fac89d03f727173e88bb4eec2a12dcf8\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202402_citibike_tripdata"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202402_citibike_tripdata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202402_citibike_tripdata')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202403_citibike_tripdata_ride_id.1e9a4f4be0": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202403_citibike_tripdata_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202403_citibike_tripdata_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202403_citibike_tripdata_ride_id.1e9a4f4be0", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202403_citibike_tripdata_ride_id"], "alias": "source_unique_staging_2024_202403_citibike_tripdata_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.762196, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202403_citibike_tripdata"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202403_citibike_tripdata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202403_citibike_tripdata')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202403_citibike_tripdata_rideable_type__electric_bike__classic_bike.14f7f02bd0": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202403_citibike_tripdata_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_1146a11ae5c56edc061adf8947a8ff22.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202403_citibike_tripdata_rideable_type__electric_bike__classic_bike.14f7f02bd0", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202403_citibike_tripdata_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_1146a11ae5c56edc061adf8947a8ff22", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_1146a11ae5c56edc061adf8947a8ff22", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_1146a11ae5c56edc061adf8947a8ff22"}, "created_at": 1743088111.7632, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_1146a11ae5c56edc061adf8947a8ff22\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202403_citibike_tripdata"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202403_citibike_tripdata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202403_citibike_tripdata')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202403_citibike_tripdata_member_casual__member__casual.80a7467e2a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202403_citibike_tripdata_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_20629b43c55a8d6fb4e401480d2a77f6.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202403_citibike_tripdata_member_casual__member__casual.80a7467e2a", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202403_citibike_tripdata_member_casual__member__casual"], "alias": "source_accepted_values_staging_20629b43c55a8d6fb4e401480d2a77f6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_20629b43c55a8d6fb4e401480d2a77f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_20629b43c55a8d6fb4e401480d2a77f6"}, "created_at": 1743088111.765729, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_20629b43c55a8d6fb4e401480d2a77f6\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202403_citibike_tripdata"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202403_citibike_tripdata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202403_citibike_tripdata')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202404_citibike_tripdata_ride_id.be41092873": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202404_citibike_tripdata_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202404_citibike_tripdata_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202404_citibike_tripdata_ride_id.be41092873", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202404_citibike_tripdata_ride_id"], "alias": "source_unique_staging_2024_202404_citibike_tripdata_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.7685068, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202404_citibike_tripdata"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202404_citibike_tripdata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202404_citibike_tripdata')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202404_citibike_tripdata_rideable_type__electric_bike__classic_bike.225cddb476": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202404_citibike_tripdata_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_be8ca4af89b13756bd475c2114954f4e.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202404_citibike_tripdata_rideable_type__electric_bike__classic_bike.225cddb476", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202404_citibike_tripdata_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_be8ca4af89b13756bd475c2114954f4e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_be8ca4af89b13756bd475c2114954f4e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_be8ca4af89b13756bd475c2114954f4e"}, "created_at": 1743088111.7695081, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_be8ca4af89b13756bd475c2114954f4e\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202404_citibike_tripdata"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202404_citibike_tripdata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202404_citibike_tripdata')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202404_citibike_tripdata_member_casual__member__casual.68e71aefc6": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202404_citibike_tripdata_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_fde239cdfc502906aab48703ef90788f.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202404_citibike_tripdata_member_casual__member__casual.68e71aefc6", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202404_citibike_tripdata_member_casual__member__casual"], "alias": "source_accepted_values_staging_fde239cdfc502906aab48703ef90788f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_fde239cdfc502906aab48703ef90788f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_fde239cdfc502906aab48703ef90788f"}, "created_at": 1743088111.772167, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_fde239cdfc502906aab48703ef90788f\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202404_citibike_tripdata"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202404_citibike_tripdata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202404_citibike_tripdata')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_1_ride_id.10fd576521": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202405_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202405_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_1_ride_id.10fd576521", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202405_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2024_202405_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.774795, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202405_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202405_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202405_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.25bfb8f006": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202405_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_dc1eb63954540490ea76945926edeeb7.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.25bfb8f006", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202405_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_dc1eb63954540490ea76945926edeeb7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_dc1eb63954540490ea76945926edeeb7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_dc1eb63954540490ea76945926edeeb7"}, "created_at": 1743088111.775779, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_dc1eb63954540490ea76945926edeeb7\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202405_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202405_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202405_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_1_member_casual__member__casual.c0c9491f38": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202405_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_c70d3a1d79e52d06f4dd27a00188005a.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_1_member_casual__member__casual.c0c9491f38", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202405_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_c70d3a1d79e52d06f4dd27a00188005a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_c70d3a1d79e52d06f4dd27a00188005a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_c70d3a1d79e52d06f4dd27a00188005a"}, "created_at": 1743088111.7784069, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_c70d3a1d79e52d06f4dd27a00188005a\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202405_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202405_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202405_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_2_ride_id.8bfedf735d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202405_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202405_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_2_ride_id.8bfedf735d", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202405_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2024_202405_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.781155, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202405_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202405_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202405_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d5236d44c7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202405_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_7a9f2d3e5c0c8f25804c049ec34598d0.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d5236d44c7", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202405_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_7a9f2d3e5c0c8f25804c049ec34598d0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_7a9f2d3e5c0c8f25804c049ec34598d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_7a9f2d3e5c0c8f25804c049ec34598d0"}, "created_at": 1743088111.7821481, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_7a9f2d3e5c0c8f25804c049ec34598d0\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202405_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202405_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202405_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_2_member_casual__member__casual.e4b553fe91": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202405_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_668c1b6b2e66a52b8c1f48ce2ee415e3.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_2_member_casual__member__casual.e4b553fe91", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202405_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_668c1b6b2e66a52b8c1f48ce2ee415e3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_668c1b6b2e66a52b8c1f48ce2ee415e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_668c1b6b2e66a52b8c1f48ce2ee415e3"}, "created_at": 1743088111.7847948, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_668c1b6b2e66a52b8c1f48ce2ee415e3\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202405_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202405_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202405_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_3_ride_id.2810e73c6b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202405_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202405_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_3_ride_id.2810e73c6b", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202405_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2024_202405_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.7876108, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202405_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202405_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202405_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b36b453c0f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202405_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_1c31615988c65406f307d642293e9a1f.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b36b453c0f", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202405_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_1c31615988c65406f307d642293e9a1f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_1c31615988c65406f307d642293e9a1f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_1c31615988c65406f307d642293e9a1f"}, "created_at": 1743088111.788575, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_1c31615988c65406f307d642293e9a1f\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202405_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202405_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202405_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_3_member_casual__member__casual.be7f170068": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202405_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_77034fdf6ecc0a6b1a493012ab294218.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_3_member_casual__member__casual.be7f170068", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202405_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_77034fdf6ecc0a6b1a493012ab294218", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_77034fdf6ecc0a6b1a493012ab294218", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_77034fdf6ecc0a6b1a493012ab294218"}, "created_at": 1743088111.791116, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_77034fdf6ecc0a6b1a493012ab294218\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202405_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202405_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202405_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_4_ride_id.ec6c9bdb3e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202405_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202405_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_4_ride_id.ec6c9bdb3e", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202405_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2024_202405_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.793644, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202405_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202405_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202405_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.e3a0fb0e40": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202405_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_3790ac382be930f9014df1f4c3688b0e.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.e3a0fb0e40", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202405_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_3790ac382be930f9014df1f4c3688b0e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_3790ac382be930f9014df1f4c3688b0e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_3790ac382be930f9014df1f4c3688b0e"}, "created_at": 1743088111.794998, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_3790ac382be930f9014df1f4c3688b0e\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202405_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202405_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202405_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_4_member_casual__member__casual.4da875273a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202405_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_fe51710ad0e03050980dec1dbe27be3b.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_4_member_casual__member__casual.4da875273a", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202405_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_fe51710ad0e03050980dec1dbe27be3b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_fe51710ad0e03050980dec1dbe27be3b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_fe51710ad0e03050980dec1dbe27be3b"}, "created_at": 1743088111.797585, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_fe51710ad0e03050980dec1dbe27be3b\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202405_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202405_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202405_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_5_ride_id.f36781f59f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202405_citibike_tripdata_5_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202405_citibike_tripdata_5_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_5_ride_id.f36781f59f", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202405_citibike_tripdata_5_ride_id"], "alias": "source_unique_staging_2024_202405_citibike_tripdata_5_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.8002582, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202405_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202405_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202405_citibike_tripdata_5')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.e869852efc": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202405_citibike_tripdata_5_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_bdbcc81ecce22ea30d7dd73c583928ee.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.e869852efc", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202405_citibike_tripdata_5_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_bdbcc81ecce22ea30d7dd73c583928ee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_bdbcc81ecce22ea30d7dd73c583928ee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_bdbcc81ecce22ea30d7dd73c583928ee"}, "created_at": 1743088111.8012202, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_bdbcc81ecce22ea30d7dd73c583928ee\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202405_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202405_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202405_citibike_tripdata_5')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_5_member_casual__member__casual.3d02d47b38": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202405_citibike_tripdata_5_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_ba426430e51de7df013686f574d3a882.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_5_member_casual__member__casual.3d02d47b38", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202405_citibike_tripdata_5_member_casual__member__casual"], "alias": "source_accepted_values_staging_ba426430e51de7df013686f574d3a882", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_ba426430e51de7df013686f574d3a882", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_ba426430e51de7df013686f574d3a882"}, "created_at": 1743088111.804398, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_ba426430e51de7df013686f574d3a882\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202405_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202405_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202405_citibike_tripdata_5')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_1_ride_id.66cd4f56c6": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202406_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202406_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_1_ride_id.66cd4f56c6", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202406_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2024_202406_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.8070872, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202406_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202406_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202406_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.a7f19a61cc": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202406_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_aa896a47c46fe2df77f365f6748b375b.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.a7f19a61cc", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202406_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_aa896a47c46fe2df77f365f6748b375b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_aa896a47c46fe2df77f365f6748b375b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_aa896a47c46fe2df77f365f6748b375b"}, "created_at": 1743088111.808098, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_aa896a47c46fe2df77f365f6748b375b\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202406_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202406_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202406_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_1_member_casual__member__casual.a2d6a2f7e5": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202406_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_6c4b081db19699c21eeb842d1d592e51.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_1_member_casual__member__casual.a2d6a2f7e5", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202406_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_6c4b081db19699c21eeb842d1d592e51", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_6c4b081db19699c21eeb842d1d592e51", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_6c4b081db19699c21eeb842d1d592e51"}, "created_at": 1743088111.8107588, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_6c4b081db19699c21eeb842d1d592e51\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202406_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202406_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202406_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_2_ride_id.6c23a63cd1": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202406_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202406_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_2_ride_id.6c23a63cd1", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202406_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2024_202406_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.81355, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202406_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202406_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202406_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.c05219e414": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202406_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_fe6072cffe06f8177c629ec9c9668a98.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.c05219e414", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202406_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_fe6072cffe06f8177c629ec9c9668a98", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_fe6072cffe06f8177c629ec9c9668a98", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_fe6072cffe06f8177c629ec9c9668a98"}, "created_at": 1743088111.8145652, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_fe6072cffe06f8177c629ec9c9668a98\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202406_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202406_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202406_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_2_member_casual__member__casual.c00b5997cd": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202406_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_2aca995254c779629c052d77f1b8fae9.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_2_member_casual__member__casual.c00b5997cd", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202406_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_2aca995254c779629c052d77f1b8fae9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_2aca995254c779629c052d77f1b8fae9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_2aca995254c779629c052d77f1b8fae9"}, "created_at": 1743088111.81708, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_2aca995254c779629c052d77f1b8fae9\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202406_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202406_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202406_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_3_ride_id.50c2f7a482": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202406_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202406_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_3_ride_id.50c2f7a482", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202406_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2024_202406_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.8201432, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202406_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202406_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202406_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c2b1cfeaa7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202406_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_439f91861726da1b6d2cb3dcd09da56b.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c2b1cfeaa7", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202406_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_439f91861726da1b6d2cb3dcd09da56b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_439f91861726da1b6d2cb3dcd09da56b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_439f91861726da1b6d2cb3dcd09da56b"}, "created_at": 1743088111.821111, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_439f91861726da1b6d2cb3dcd09da56b\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202406_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202406_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202406_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_3_member_casual__member__casual.c8fc9a2b8f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202406_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_69fe5d6a35113f9556308841c7fe402e.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_3_member_casual__member__casual.c8fc9a2b8f", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202406_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_69fe5d6a35113f9556308841c7fe402e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_69fe5d6a35113f9556308841c7fe402e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_69fe5d6a35113f9556308841c7fe402e"}, "created_at": 1743088111.823658, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_69fe5d6a35113f9556308841c7fe402e\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202406_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202406_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202406_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_4_ride_id.1d0b9a609e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202406_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202406_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_4_ride_id.1d0b9a609e", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202406_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2024_202406_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.826206, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202406_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202406_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202406_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.8724801970": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202406_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_29bf95a6c85bc37b6076866830f0da6c.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.8724801970", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202406_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_29bf95a6c85bc37b6076866830f0da6c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_29bf95a6c85bc37b6076866830f0da6c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_29bf95a6c85bc37b6076866830f0da6c"}, "created_at": 1743088111.827158, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_29bf95a6c85bc37b6076866830f0da6c\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202406_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202406_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202406_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_4_member_casual__member__casual.30119db7e3": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202406_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_3707c515e9fd881b12fa46d690198175.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_4_member_casual__member__casual.30119db7e3", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202406_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_3707c515e9fd881b12fa46d690198175", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_3707c515e9fd881b12fa46d690198175", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_3707c515e9fd881b12fa46d690198175"}, "created_at": 1743088111.8307872, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_3707c515e9fd881b12fa46d690198175\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202406_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202406_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202406_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_5_ride_id.a3ecbc5671": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202406_citibike_tripdata_5_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202406_citibike_tripdata_5_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_5_ride_id.a3ecbc5671", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202406_citibike_tripdata_5_ride_id"], "alias": "source_unique_staging_2024_202406_citibike_tripdata_5_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.83374, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202406_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202406_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202406_citibike_tripdata_5')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.40c37bad28": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202406_citibike_tripdata_5_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_02800d7f181d49525f591ef81bec5e2b.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.40c37bad28", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202406_citibike_tripdata_5_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_02800d7f181d49525f591ef81bec5e2b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_02800d7f181d49525f591ef81bec5e2b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_02800d7f181d49525f591ef81bec5e2b"}, "created_at": 1743088111.834753, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_02800d7f181d49525f591ef81bec5e2b\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202406_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202406_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202406_citibike_tripdata_5')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_5_member_casual__member__casual.b4a3bc4a76": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202406_citibike_tripdata_5_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_55b2ff7bfb4c8e20e9f1b518fa8320c8.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_5_member_casual__member__casual.b4a3bc4a76", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202406_citibike_tripdata_5_member_casual__member__casual"], "alias": "source_accepted_values_staging_55b2ff7bfb4c8e20e9f1b518fa8320c8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_55b2ff7bfb4c8e20e9f1b518fa8320c8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_55b2ff7bfb4c8e20e9f1b518fa8320c8"}, "created_at": 1743088111.8373399, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_55b2ff7bfb4c8e20e9f1b518fa8320c8\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202406_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202406_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202406_citibike_tripdata_5')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_1_ride_id.91f4690f74": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202407_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202407_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_1_ride_id.91f4690f74", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202407_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2024_202407_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.840134, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202407_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202407_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202407_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.b719633391": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202407_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_62279d431485b72cfff9bbcec6b7ae01.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.b719633391", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202407_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_62279d431485b72cfff9bbcec6b7ae01", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_62279d431485b72cfff9bbcec6b7ae01", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_62279d431485b72cfff9bbcec6b7ae01"}, "created_at": 1743088111.841137, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_62279d431485b72cfff9bbcec6b7ae01\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202407_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202407_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202407_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_1_member_casual__member__casual.0b63ff5aa0": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202407_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_c78374ea0b813a3310da85831047f878.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_1_member_casual__member__casual.0b63ff5aa0", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202407_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_c78374ea0b813a3310da85831047f878", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_c78374ea0b813a3310da85831047f878", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_c78374ea0b813a3310da85831047f878"}, "created_at": 1743088111.843808, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_c78374ea0b813a3310da85831047f878\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202407_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202407_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202407_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_2_ride_id.1b35ecc34e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202407_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202407_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_2_ride_id.1b35ecc34e", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202407_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2024_202407_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.846438, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202407_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202407_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202407_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.558cc529bf": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202407_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_06b3cba965b391ef4932a28518dc4c93.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.558cc529bf", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202407_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_06b3cba965b391ef4932a28518dc4c93", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_06b3cba965b391ef4932a28518dc4c93", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_06b3cba965b391ef4932a28518dc4c93"}, "created_at": 1743088111.847598, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_06b3cba965b391ef4932a28518dc4c93\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202407_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202407_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202407_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_2_member_casual__member__casual.bf43addef2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202407_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_11c8026f62d02d82c506c699a1a6cfe2.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_2_member_casual__member__casual.bf43addef2", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202407_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_11c8026f62d02d82c506c699a1a6cfe2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_11c8026f62d02d82c506c699a1a6cfe2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_11c8026f62d02d82c506c699a1a6cfe2"}, "created_at": 1743088111.8501399, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_11c8026f62d02d82c506c699a1a6cfe2\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202407_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202407_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202407_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_3_ride_id.d7eaa3af7a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202407_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202407_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_3_ride_id.d7eaa3af7a", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202407_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2024_202407_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.8531032, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202407_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202407_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202407_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.9084d80750": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202407_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_d85c5e552b366dd0a5f623c5c975c351.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.9084d80750", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202407_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_d85c5e552b366dd0a5f623c5c975c351", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_d85c5e552b366dd0a5f623c5c975c351", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_d85c5e552b366dd0a5f623c5c975c351"}, "created_at": 1743088111.8540668, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_d85c5e552b366dd0a5f623c5c975c351\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202407_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202407_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202407_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_3_member_casual__member__casual.5eb64c744d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202407_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_befd53521235f6e80046e6e09402d8b1.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_3_member_casual__member__casual.5eb64c744d", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202407_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_befd53521235f6e80046e6e09402d8b1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_befd53521235f6e80046e6e09402d8b1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_befd53521235f6e80046e6e09402d8b1"}, "created_at": 1743088111.8566558, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_befd53521235f6e80046e6e09402d8b1\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202407_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202407_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202407_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_4_ride_id.5540e8ef36": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202407_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202407_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_4_ride_id.5540e8ef36", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202407_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2024_202407_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.859176, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202407_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202407_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202407_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.d0efba79e4": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202407_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_a8bab549141aa6857738fd5fc0c04960.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.d0efba79e4", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202407_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_a8bab549141aa6857738fd5fc0c04960", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_a8bab549141aa6857738fd5fc0c04960", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_a8bab549141aa6857738fd5fc0c04960"}, "created_at": 1743088111.860127, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_a8bab549141aa6857738fd5fc0c04960\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202407_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202407_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202407_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_4_member_casual__member__casual.20e2125326": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202407_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_524e27cb3ef6d3a6cb2a5597bd736bab.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_4_member_casual__member__casual.20e2125326", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202407_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_524e27cb3ef6d3a6cb2a5597bd736bab", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_524e27cb3ef6d3a6cb2a5597bd736bab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_524e27cb3ef6d3a6cb2a5597bd736bab"}, "created_at": 1743088111.8633559, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_524e27cb3ef6d3a6cb2a5597bd736bab\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202407_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202407_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202407_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_5_ride_id.ea3d1effd5": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202407_citibike_tripdata_5_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202407_citibike_tripdata_5_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_5_ride_id.ea3d1effd5", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202407_citibike_tripdata_5_ride_id"], "alias": "source_unique_staging_2024_202407_citibike_tripdata_5_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.8659651, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202407_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202407_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202407_citibike_tripdata_5')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.8510e1eef5": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202407_citibike_tripdata_5_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_3994a2ae5dffb53f71fefe8d62d3aadc.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.8510e1eef5", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202407_citibike_tripdata_5_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_3994a2ae5dffb53f71fefe8d62d3aadc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_3994a2ae5dffb53f71fefe8d62d3aadc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_3994a2ae5dffb53f71fefe8d62d3aadc"}, "created_at": 1743088111.867116, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_3994a2ae5dffb53f71fefe8d62d3aadc\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202407_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202407_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202407_citibike_tripdata_5')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_5_member_casual__member__casual.e45ae9c1fe": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202407_citibike_tripdata_5_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_4c638b2d7b55848388923f2aa5c166ae.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_5_member_casual__member__casual.e45ae9c1fe", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202407_citibike_tripdata_5_member_casual__member__casual"], "alias": "source_accepted_values_staging_4c638b2d7b55848388923f2aa5c166ae", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_4c638b2d7b55848388923f2aa5c166ae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_4c638b2d7b55848388923f2aa5c166ae"}, "created_at": 1743088111.869653, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_4c638b2d7b55848388923f2aa5c166ae\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202407_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202407_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202407_citibike_tripdata_5')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_1_ride_id.27471140bb": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202408_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202408_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_1_ride_id.27471140bb", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202408_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2024_202408_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.872436, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202408_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202408_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202408_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.af7a2b0803": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202408_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_9058d459790b504800bde4a95e8d05c3.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.af7a2b0803", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202408_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_9058d459790b504800bde4a95e8d05c3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_9058d459790b504800bde4a95e8d05c3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_9058d459790b504800bde4a95e8d05c3"}, "created_at": 1743088111.873429, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_9058d459790b504800bde4a95e8d05c3\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202408_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202408_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202408_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_1_member_casual__member__casual.90645fffc2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202408_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_acea71414c1a7a213e9f39b6775ba445.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_1_member_casual__member__casual.90645fffc2", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202408_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_acea71414c1a7a213e9f39b6775ba445", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_acea71414c1a7a213e9f39b6775ba445", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_acea71414c1a7a213e9f39b6775ba445"}, "created_at": 1743088111.876073, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_acea71414c1a7a213e9f39b6775ba445\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202408_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202408_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202408_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_2_ride_id.dc8e6c1013": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202408_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202408_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_2_ride_id.dc8e6c1013", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202408_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2024_202408_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.878708, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202408_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202408_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202408_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.53021c667f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202408_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_f84002d3f5fe984db3eca319e9493afd.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.53021c667f", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202408_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_f84002d3f5fe984db3eca319e9493afd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_f84002d3f5fe984db3eca319e9493afd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_f84002d3f5fe984db3eca319e9493afd"}, "created_at": 1743088111.8797, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_f84002d3f5fe984db3eca319e9493afd\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202408_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202408_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202408_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_2_member_casual__member__casual.3343eecc89": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202408_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_c254cb3bd6925a8038039e599ae5f241.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_2_member_casual__member__casual.3343eecc89", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202408_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_c254cb3bd6925a8038039e599ae5f241", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_c254cb3bd6925a8038039e599ae5f241", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_c254cb3bd6925a8038039e599ae5f241"}, "created_at": 1743088111.882358, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_c254cb3bd6925a8038039e599ae5f241\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202408_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202408_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202408_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_3_ride_id.ee75cd89ba": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202408_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202408_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_3_ride_id.ee75cd89ba", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202408_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2024_202408_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.885344, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202408_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202408_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202408_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.045af9f6fc": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202408_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_07c6da917732de42a168bd5e07b5cca7.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.045af9f6fc", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202408_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_07c6da917732de42a168bd5e07b5cca7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_07c6da917732de42a168bd5e07b5cca7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_07c6da917732de42a168bd5e07b5cca7"}, "created_at": 1743088111.886305, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_07c6da917732de42a168bd5e07b5cca7\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202408_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202408_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202408_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_3_member_casual__member__casual.9dd3cae333": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202408_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_14e888c440dca97a73c0001a9408b919.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_3_member_casual__member__casual.9dd3cae333", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202408_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_14e888c440dca97a73c0001a9408b919", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_14e888c440dca97a73c0001a9408b919", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_14e888c440dca97a73c0001a9408b919"}, "created_at": 1743088111.8888419, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_14e888c440dca97a73c0001a9408b919\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202408_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202408_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202408_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_4_ride_id.c5f8fe150d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202408_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202408_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_4_ride_id.c5f8fe150d", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202408_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2024_202408_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.891501, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202408_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202408_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202408_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.0d31aa1b38": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202408_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_71dc6b38dc98f968106949a0ae00baf3.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.0d31aa1b38", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202408_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_71dc6b38dc98f968106949a0ae00baf3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_71dc6b38dc98f968106949a0ae00baf3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_71dc6b38dc98f968106949a0ae00baf3"}, "created_at": 1743088111.892461, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_71dc6b38dc98f968106949a0ae00baf3\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202408_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202408_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202408_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_4_member_casual__member__casual.65e3e95e00": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202408_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_129f85b57e62c32c4dd77a183867854b.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_4_member_casual__member__casual.65e3e95e00", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202408_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_129f85b57e62c32c4dd77a183867854b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_129f85b57e62c32c4dd77a183867854b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_129f85b57e62c32c4dd77a183867854b"}, "created_at": 1743088111.89537, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_129f85b57e62c32c4dd77a183867854b\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202408_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202408_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202408_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_5_ride_id.b843752ea0": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202408_citibike_tripdata_5_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202408_citibike_tripdata_5_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_5_ride_id.b843752ea0", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202408_citibike_tripdata_5_ride_id"], "alias": "source_unique_staging_2024_202408_citibike_tripdata_5_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.898295, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202408_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202408_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202408_citibike_tripdata_5')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.19a1b069c2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202408_citibike_tripdata_5_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_b1beb36a141738d32072858b5920ddd8.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.19a1b069c2", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202408_citibike_tripdata_5_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_b1beb36a141738d32072858b5920ddd8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_b1beb36a141738d32072858b5920ddd8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_b1beb36a141738d32072858b5920ddd8"}, "created_at": 1743088111.899473, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_b1beb36a141738d32072858b5920ddd8\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202408_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202408_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202408_citibike_tripdata_5')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_5_member_casual__member__casual.71886dec1c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202408_citibike_tripdata_5_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_23ce1ccb47321fdb4fdc294c9eecc412.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_5_member_casual__member__casual.71886dec1c", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202408_citibike_tripdata_5_member_casual__member__casual"], "alias": "source_accepted_values_staging_23ce1ccb47321fdb4fdc294c9eecc412", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_23ce1ccb47321fdb4fdc294c9eecc412", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_23ce1ccb47321fdb4fdc294c9eecc412"}, "created_at": 1743088111.902005, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_23ce1ccb47321fdb4fdc294c9eecc412\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202408_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202408_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202408_citibike_tripdata_5')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_1_ride_id.9af5c69b56": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202409_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202409_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_1_ride_id.9af5c69b56", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202409_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2024_202409_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.904803, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202409_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202409_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202409_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.6f3eec580a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202409_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_3c885ef051751ae935aee8ec0409b2b5.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.6f3eec580a", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202409_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_3c885ef051751ae935aee8ec0409b2b5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_3c885ef051751ae935aee8ec0409b2b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_3c885ef051751ae935aee8ec0409b2b5"}, "created_at": 1743088111.905813, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_3c885ef051751ae935aee8ec0409b2b5\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202409_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202409_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202409_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_1_member_casual__member__casual.bae5aeff15": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202409_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_bbd56aa34b2c367611bb9282de761470.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_1_member_casual__member__casual.bae5aeff15", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202409_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_bbd56aa34b2c367611bb9282de761470", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_bbd56aa34b2c367611bb9282de761470", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_bbd56aa34b2c367611bb9282de761470"}, "created_at": 1743088111.908478, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_bbd56aa34b2c367611bb9282de761470\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202409_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202409_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202409_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_2_ride_id.7f34812d51": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202409_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202409_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_2_ride_id.7f34812d51", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202409_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2024_202409_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.911102, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202409_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202409_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202409_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.90bfc78098": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202409_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_50c211dd3e315819eef356cd77879cac.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.90bfc78098", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202409_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_50c211dd3e315819eef356cd77879cac", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_50c211dd3e315819eef356cd77879cac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_50c211dd3e315819eef356cd77879cac"}, "created_at": 1743088111.9121048, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_50c211dd3e315819eef356cd77879cac\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202409_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202409_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202409_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_2_member_casual__member__casual.2b24d49fdd": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202409_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_8a18c3b9c90dee4145b63563b99e0cf5.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_2_member_casual__member__casual.2b24d49fdd", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202409_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_8a18c3b9c90dee4145b63563b99e0cf5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_8a18c3b9c90dee4145b63563b99e0cf5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_8a18c3b9c90dee4145b63563b99e0cf5"}, "created_at": 1743088111.914752, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_8a18c3b9c90dee4145b63563b99e0cf5\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202409_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202409_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202409_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_3_ride_id.c63f75eb36": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202409_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202409_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_3_ride_id.c63f75eb36", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202409_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2024_202409_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.918328, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202409_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202409_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202409_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.df8da18287": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202409_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_bd2295157ae95ce1a245921a713d4b4b.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.df8da18287", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202409_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_bd2295157ae95ce1a245921a713d4b4b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_bd2295157ae95ce1a245921a713d4b4b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_bd2295157ae95ce1a245921a713d4b4b"}, "created_at": 1743088111.9193568, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_bd2295157ae95ce1a245921a713d4b4b\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202409_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202409_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202409_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_3_member_casual__member__casual.c4d49e5e42": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202409_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_178c5f58ec0349c4ef97dd951e357fa2.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_3_member_casual__member__casual.c4d49e5e42", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202409_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_178c5f58ec0349c4ef97dd951e357fa2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_178c5f58ec0349c4ef97dd951e357fa2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_178c5f58ec0349c4ef97dd951e357fa2"}, "created_at": 1743088111.921872, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_178c5f58ec0349c4ef97dd951e357fa2\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202409_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202409_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202409_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_4_ride_id.4a94a1150e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202409_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202409_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_4_ride_id.4a94a1150e", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202409_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2024_202409_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.9245682, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202409_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202409_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202409_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.aadd0d6f82": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202409_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_0b134461a1a571dda0587b5005dc0bbc.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.aadd0d6f82", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202409_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_0b134461a1a571dda0587b5005dc0bbc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_0b134461a1a571dda0587b5005dc0bbc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_0b134461a1a571dda0587b5005dc0bbc"}, "created_at": 1743088111.9255219, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_0b134461a1a571dda0587b5005dc0bbc\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202409_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202409_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202409_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_4_member_casual__member__casual.1e96cecca5": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202409_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_a2dd0e6f4d882e9581055bbeab8e554f.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_4_member_casual__member__casual.1e96cecca5", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202409_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_a2dd0e6f4d882e9581055bbeab8e554f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_a2dd0e6f4d882e9581055bbeab8e554f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_a2dd0e6f4d882e9581055bbeab8e554f"}, "created_at": 1743088111.928322, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_a2dd0e6f4d882e9581055bbeab8e554f\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202409_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202409_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202409_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_5_ride_id.144de7852e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202409_citibike_tripdata_5_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202409_citibike_tripdata_5_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_5_ride_id.144de7852e", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202409_citibike_tripdata_5_ride_id"], "alias": "source_unique_staging_2024_202409_citibike_tripdata_5_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.9311209, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202409_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202409_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202409_citibike_tripdata_5')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.e1dc23b9e9": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202409_citibike_tripdata_5_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_4e37ddc15582be1fd47841e93a72c88f.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.e1dc23b9e9", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202409_citibike_tripdata_5_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_4e37ddc15582be1fd47841e93a72c88f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_4e37ddc15582be1fd47841e93a72c88f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_4e37ddc15582be1fd47841e93a72c88f"}, "created_at": 1743088111.932085, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_4e37ddc15582be1fd47841e93a72c88f\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202409_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202409_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202409_citibike_tripdata_5')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_5_member_casual__member__casual.95628007c5": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202409_citibike_tripdata_5_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_c87da6eaee3714d7928383adadf27718.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_5_member_casual__member__casual.95628007c5", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202409_citibike_tripdata_5_member_casual__member__casual"], "alias": "source_accepted_values_staging_c87da6eaee3714d7928383adadf27718", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_c87da6eaee3714d7928383adadf27718", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_c87da6eaee3714d7928383adadf27718"}, "created_at": 1743088111.9346728, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_c87da6eaee3714d7928383adadf27718\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202409_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202409_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202409_citibike_tripdata_5')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_1_ride_id.5d27bcfc2f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202410_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202410_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_1_ride_id.5d27bcfc2f", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202410_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2024_202410_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.937404, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202410_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202410_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202410_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.1b27054fdb": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202410_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_33d6799792e8bf7331dce0d6573022b4.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.1b27054fdb", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202410_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_33d6799792e8bf7331dce0d6573022b4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_33d6799792e8bf7331dce0d6573022b4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_33d6799792e8bf7331dce0d6573022b4"}, "created_at": 1743088111.938493, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_33d6799792e8bf7331dce0d6573022b4\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202410_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202410_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202410_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_1_member_casual__member__casual.69a66b1b7b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202410_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_781d53ac9fd11407dccee2626ea27121.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_1_member_casual__member__casual.69a66b1b7b", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202410_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_781d53ac9fd11407dccee2626ea27121", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_781d53ac9fd11407dccee2626ea27121", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_781d53ac9fd11407dccee2626ea27121"}, "created_at": 1743088111.9411688, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_781d53ac9fd11407dccee2626ea27121\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202410_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202410_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202410_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_2_ride_id.c07c200646": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202410_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202410_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_2_ride_id.c07c200646", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202410_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2024_202410_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.944011, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202410_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202410_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202410_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.c978b1fe85": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202410_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_0aeda4c903b29d70e561da0e2a277f36.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.c978b1fe85", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202410_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_0aeda4c903b29d70e561da0e2a277f36", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_0aeda4c903b29d70e561da0e2a277f36", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_0aeda4c903b29d70e561da0e2a277f36"}, "created_at": 1743088111.9450371, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_0aeda4c903b29d70e561da0e2a277f36\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202410_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202410_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202410_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_2_member_casual__member__casual.94b5d6f1d8": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202410_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_8cca6b6c7aa2d697156b2e988ddcda95.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_2_member_casual__member__casual.94b5d6f1d8", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202410_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_8cca6b6c7aa2d697156b2e988ddcda95", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_8cca6b6c7aa2d697156b2e988ddcda95", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_8cca6b6c7aa2d697156b2e988ddcda95"}, "created_at": 1743088111.9477901, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_8cca6b6c7aa2d697156b2e988ddcda95\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202410_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202410_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202410_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_3_ride_id.da299a20e2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202410_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202410_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_3_ride_id.da299a20e2", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202410_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2024_202410_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.950505, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202410_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202410_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202410_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c2b9dbe50a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202410_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_f9dc40b94f951f356888986a982efd4b.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c2b9dbe50a", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202410_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_f9dc40b94f951f356888986a982efd4b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_f9dc40b94f951f356888986a982efd4b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_f9dc40b94f951f356888986a982efd4b"}, "created_at": 1743088111.9518452, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_f9dc40b94f951f356888986a982efd4b\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202410_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202410_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202410_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_3_member_casual__member__casual.b52b8e1f5f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202410_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_d4d2acd3755fe1105e6acb10ce997ed7.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_3_member_casual__member__casual.b52b8e1f5f", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202410_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_d4d2acd3755fe1105e6acb10ce997ed7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_d4d2acd3755fe1105e6acb10ce997ed7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_d4d2acd3755fe1105e6acb10ce997ed7"}, "created_at": 1743088111.9543512, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_d4d2acd3755fe1105e6acb10ce997ed7\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202410_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202410_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202410_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_4_ride_id.86ee5ee7f7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202410_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202410_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_4_ride_id.86ee5ee7f7", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202410_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2024_202410_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.9570189, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202410_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202410_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202410_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.c76da46d7e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202410_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_22f5b4a617ee7ee70b1bfe299a40273f.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.c76da46d7e", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202410_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_22f5b4a617ee7ee70b1bfe299a40273f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_22f5b4a617ee7ee70b1bfe299a40273f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_22f5b4a617ee7ee70b1bfe299a40273f"}, "created_at": 1743088111.957974, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_22f5b4a617ee7ee70b1bfe299a40273f\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202410_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202410_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202410_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_4_member_casual__member__casual.1380e42b22": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202410_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_44c0d088d4547279e697e04c968014b3.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_4_member_casual__member__casual.1380e42b22", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202410_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_44c0d088d4547279e697e04c968014b3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_44c0d088d4547279e697e04c968014b3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_44c0d088d4547279e697e04c968014b3"}, "created_at": 1743088111.960484, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_44c0d088d4547279e697e04c968014b3\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202410_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202410_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202410_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_5_ride_id.0e19fb8ad7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202410_citibike_tripdata_5_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202410_citibike_tripdata_5_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_5_ride_id.0e19fb8ad7", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202410_citibike_tripdata_5_ride_id"], "alias": "source_unique_staging_2024_202410_citibike_tripdata_5_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.963358, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202410_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202410_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202410_citibike_tripdata_5')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.c41c9a5044": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202410_citibike_tripdata_5_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_fd844e8240b52963f763a852823e91e3.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.c41c9a5044", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202410_citibike_tripdata_5_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_fd844e8240b52963f763a852823e91e3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_fd844e8240b52963f763a852823e91e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_fd844e8240b52963f763a852823e91e3"}, "created_at": 1743088111.964324, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_fd844e8240b52963f763a852823e91e3\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202410_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202410_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202410_citibike_tripdata_5')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_5_member_casual__member__casual.53205d918a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202410_citibike_tripdata_5_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_37d6ec3eb9ba4f75b285ed970576ffb1.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_5_member_casual__member__casual.53205d918a", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202410_citibike_tripdata_5_member_casual__member__casual"], "alias": "source_accepted_values_staging_37d6ec3eb9ba4f75b285ed970576ffb1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_37d6ec3eb9ba4f75b285ed970576ffb1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_37d6ec3eb9ba4f75b285ed970576ffb1"}, "created_at": 1743088111.9669068, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_37d6ec3eb9ba4f75b285ed970576ffb1\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202410_citibike_tripdata_5"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202410_citibike_tripdata_5"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202410_citibike_tripdata_5')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_6_ride_id.77681bc510": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202410_citibike_tripdata_6_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202410_citibike_tripdata_6_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_6_ride_id.77681bc510", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202410_citibike_tripdata_6_ride_id"], "alias": "source_unique_staging_2024_202410_citibike_tripdata_6_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.969422, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202410_citibike_tripdata_6"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202410_citibike_tripdata_6"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202410_citibike_tripdata_6')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_6_rideable_type__electric_bike__classic_bike.a0e21ac7c4": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202410_citibike_tripdata_6_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_94b0f00343388b947205e633968d629e.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_6_rideable_type__electric_bike__classic_bike.a0e21ac7c4", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202410_citibike_tripdata_6_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_94b0f00343388b947205e633968d629e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_94b0f00343388b947205e633968d629e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_94b0f00343388b947205e633968d629e"}, "created_at": 1743088111.970539, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_94b0f00343388b947205e633968d629e\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202410_citibike_tripdata_6"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202410_citibike_tripdata_6"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202410_citibike_tripdata_6')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_6_member_casual__member__casual.8b9a7fc94c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202410_citibike_tripdata_6_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_a80ff93cbc33c045c03b71acea3ad9fe.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_6_member_casual__member__casual.8b9a7fc94c", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202410_citibike_tripdata_6_member_casual__member__casual"], "alias": "source_accepted_values_staging_a80ff93cbc33c045c03b71acea3ad9fe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_a80ff93cbc33c045c03b71acea3ad9fe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_a80ff93cbc33c045c03b71acea3ad9fe"}, "created_at": 1743088111.973193, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_a80ff93cbc33c045c03b71acea3ad9fe\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202410_citibike_tripdata_6"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202410_citibike_tripdata_6"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202410_citibike_tripdata_6')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202411_citibike_tripdata_1_ride_id.a8bd390113": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202411_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202411_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202411_citibike_tripdata_1_ride_id.a8bd390113", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202411_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2024_202411_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.976625, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202411_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202411_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202411_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.10b749caa9": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202411_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_c46ed003e2b050f1c2e5b4c1a7897de8.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.10b749caa9", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202411_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_c46ed003e2b050f1c2e5b4c1a7897de8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_c46ed003e2b050f1c2e5b4c1a7897de8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_c46ed003e2b050f1c2e5b4c1a7897de8"}, "created_at": 1743088111.9776452, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_c46ed003e2b050f1c2e5b4c1a7897de8\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202411_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202411_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202411_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_1_member_casual__member__casual.83bcc975c4": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202411_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_172dd8666e768f1b98373089c0fa83f6.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_1_member_casual__member__casual.83bcc975c4", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202411_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_172dd8666e768f1b98373089c0fa83f6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_172dd8666e768f1b98373089c0fa83f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_172dd8666e768f1b98373089c0fa83f6"}, "created_at": 1743088111.980302, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_172dd8666e768f1b98373089c0fa83f6\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202411_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202411_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202411_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202411_citibike_tripdata_2_ride_id.26a4253341": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202411_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202411_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202411_citibike_tripdata_2_ride_id.26a4253341", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202411_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2024_202411_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.983088, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202411_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202411_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202411_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.ba3e2e4179": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202411_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_d194e3b363b3f0eb1bf9442a930517d7.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.ba3e2e4179", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202411_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_d194e3b363b3f0eb1bf9442a930517d7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_d194e3b363b3f0eb1bf9442a930517d7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_d194e3b363b3f0eb1bf9442a930517d7"}, "created_at": 1743088111.984034, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_d194e3b363b3f0eb1bf9442a930517d7\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202411_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202411_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202411_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_2_member_casual__member__casual.32388c500a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202411_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_36f4e9f4c894900117bda8719c6bf22b.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_2_member_casual__member__casual.32388c500a", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202411_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_36f4e9f4c894900117bda8719c6bf22b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_36f4e9f4c894900117bda8719c6bf22b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_36f4e9f4c894900117bda8719c6bf22b"}, "created_at": 1743088111.98673, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_36f4e9f4c894900117bda8719c6bf22b\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202411_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202411_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202411_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202411_citibike_tripdata_3_ride_id.df7b29eb96": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202411_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202411_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202411_citibike_tripdata_3_ride_id.df7b29eb96", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202411_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2024_202411_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.9893608, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202411_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202411_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202411_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c7906c8cfc": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202411_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_92f7aa455b1e94a43ceedaa3ffa361bb.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c7906c8cfc", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202411_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_92f7aa455b1e94a43ceedaa3ffa361bb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_92f7aa455b1e94a43ceedaa3ffa361bb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_92f7aa455b1e94a43ceedaa3ffa361bb"}, "created_at": 1743088111.990319, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_92f7aa455b1e94a43ceedaa3ffa361bb\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202411_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202411_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202411_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_3_member_casual__member__casual.bb2640d8bc": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202411_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_76270c16aee3ce2a0ecdcfdc7220e1a1.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_3_member_casual__member__casual.bb2640d8bc", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202411_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_76270c16aee3ce2a0ecdcfdc7220e1a1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_76270c16aee3ce2a0ecdcfdc7220e1a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_76270c16aee3ce2a0ecdcfdc7220e1a1"}, "created_at": 1743088111.993058, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_76270c16aee3ce2a0ecdcfdc7220e1a1\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202411_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202411_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202411_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202411_citibike_tripdata_4_ride_id.5450ec8fc8": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202411_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202411_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202411_citibike_tripdata_4_ride_id.5450ec8fc8", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202411_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2024_202411_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088111.996335, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202411_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202411_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202411_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.9181ad6fc0": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202411_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_35f53125407751b0490825cd225e3d16.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.9181ad6fc0", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202411_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_35f53125407751b0490825cd225e3d16", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_35f53125407751b0490825cd225e3d16", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_35f53125407751b0490825cd225e3d16"}, "created_at": 1743088111.997354, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_35f53125407751b0490825cd225e3d16\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202411_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202411_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202411_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_4_member_casual__member__casual.48ae52f5c6": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202411_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_5f26cb20783bb60e28e74bc5216a8d9b.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_4_member_casual__member__casual.48ae52f5c6", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202411_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_5f26cb20783bb60e28e74bc5216a8d9b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_5f26cb20783bb60e28e74bc5216a8d9b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_5f26cb20783bb60e28e74bc5216a8d9b"}, "created_at": 1743088112.000169, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_5f26cb20783bb60e28e74bc5216a8d9b\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202411_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202411_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202411_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202412_citibike_tripdata_1_ride_id.c11d9c9414": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202412_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202412_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202412_citibike_tripdata_1_ride_id.c11d9c9414", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202412_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2024_202412_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.002862, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202412_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202412_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202412_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.602815d31b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202412_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_57c6670a47e2f2b0aa5a0ef4cc0ce33d.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.602815d31b", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202412_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_57c6670a47e2f2b0aa5a0ef4cc0ce33d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_57c6670a47e2f2b0aa5a0ef4cc0ce33d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_57c6670a47e2f2b0aa5a0ef4cc0ce33d"}, "created_at": 1743088112.004014, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_57c6670a47e2f2b0aa5a0ef4cc0ce33d\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202412_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202412_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202412_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_1_member_casual__member__casual.1288197709": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202412_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_2236b4c83e207d34079502ba82e7fba3.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_1_member_casual__member__casual.1288197709", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202412_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_2236b4c83e207d34079502ba82e7fba3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_2236b4c83e207d34079502ba82e7fba3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_2236b4c83e207d34079502ba82e7fba3"}, "created_at": 1743088112.006548, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_2236b4c83e207d34079502ba82e7fba3\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202412_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202412_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202412_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202412_citibike_tripdata_2_ride_id.9f7c6b6835": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202412_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202412_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202412_citibike_tripdata_2_ride_id.9f7c6b6835", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202412_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2024_202412_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.009353, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202412_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202412_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202412_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.31fba28628": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202412_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_50cb1f982cdd2b4618f0a8997e5aa54a.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.31fba28628", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202412_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_50cb1f982cdd2b4618f0a8997e5aa54a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_50cb1f982cdd2b4618f0a8997e5aa54a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_50cb1f982cdd2b4618f0a8997e5aa54a"}, "created_at": 1743088112.010358, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_50cb1f982cdd2b4618f0a8997e5aa54a\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202412_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202412_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202412_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_2_member_casual__member__casual.2b7c7ec75c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202412_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_38613658adf60778636b858511c8daf7.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_2_member_casual__member__casual.2b7c7ec75c", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202412_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_38613658adf60778636b858511c8daf7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_38613658adf60778636b858511c8daf7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_38613658adf60778636b858511c8daf7"}, "created_at": 1743088112.013013, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_38613658adf60778636b858511c8daf7\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202412_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202412_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202412_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2024_202412_citibike_tripdata_3_ride_id.3f60f32258": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2024_202412_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2024_202412_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2024_202412_citibike_tripdata_3_ride_id.3f60f32258", "fqn": ["data_transform", "staging", "source_unique_staging_2024_202412_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2024_202412_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.01564, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202412_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2024.202412_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2024', '202412_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.847a432211": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202412_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_cd8c0f9a909e556dc1eeebae820d1918.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.847a432211", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202412_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_cd8c0f9a909e556dc1eeebae820d1918", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_cd8c0f9a909e556dc1eeebae820d1918", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_cd8c0f9a909e556dc1eeebae820d1918"}, "created_at": 1743088112.016636, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_cd8c0f9a909e556dc1eeebae820d1918\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202412_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202412_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2024', '202412_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_3_member_casual__member__casual.c479cdfd39": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2024_202412_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_80df0b804159aa47b3f6f074afe8751e.sql", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_3_member_casual__member__casual.c479cdfd39", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2024_202412_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_80df0b804159aa47b3f6f074afe8751e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_80df0b804159aa47b3f6f074afe8751e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_80df0b804159aa47b3f6f074afe8751e"}, "created_at": 1743088112.0195289, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_80df0b804159aa47b3f6f074afe8751e\") }}", "language": "sql", "refs": [], "sources": [["staging_2024", "202412_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2024.202412_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2024", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2024', '202412_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202101_citibike_tripdata_1_ride_id.c54fc2a035": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202101_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202101_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202101_citibike_tripdata_1_ride_id.c54fc2a035", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202101_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2021_202101_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.0221272, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202101_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202101_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202101_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202101_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.24a0988e0d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202101_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_cd917d24a6731009a0ee2585f9ea3358.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202101_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.24a0988e0d", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202101_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_cd917d24a6731009a0ee2585f9ea3358", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_cd917d24a6731009a0ee2585f9ea3358", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_cd917d24a6731009a0ee2585f9ea3358"}, "created_at": 1743088112.023262, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_cd917d24a6731009a0ee2585f9ea3358\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202101_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202101_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202101_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202101_citibike_tripdata_1_member_casual__member__casual.2b431faf6f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202101_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_395ff89208dfb7c6d32fece1250eff92.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202101_citibike_tripdata_1_member_casual__member__casual.2b431faf6f", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202101_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_395ff89208dfb7c6d32fece1250eff92", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_395ff89208dfb7c6d32fece1250eff92", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_395ff89208dfb7c6d32fece1250eff92"}, "created_at": 1743088112.025685, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_395ff89208dfb7c6d32fece1250eff92\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202101_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202101_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202101_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202101_citibike_tripdata_2_ride_id.5e6d30062a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202101_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202101_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202101_citibike_tripdata_2_ride_id.5e6d30062a", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202101_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2021_202101_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.02836, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202101_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202101_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202101_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202101_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.8a205bad62": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202101_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_be5f125f76c4bf693b83a865a7efb50d.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202101_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.8a205bad62", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202101_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_be5f125f76c4bf693b83a865a7efb50d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_be5f125f76c4bf693b83a865a7efb50d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_be5f125f76c4bf693b83a865a7efb50d"}, "created_at": 1743088112.029301, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_be5f125f76c4bf693b83a865a7efb50d\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202101_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202101_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202101_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202101_citibike_tripdata_2_member_casual__member__casual.84821b042c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202101_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_97ad6958caa2fbdb20e569314b58709a.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202101_citibike_tripdata_2_member_casual__member__casual.84821b042c", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202101_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_97ad6958caa2fbdb20e569314b58709a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_97ad6958caa2fbdb20e569314b58709a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_97ad6958caa2fbdb20e569314b58709a"}, "created_at": 1743088112.032301, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_97ad6958caa2fbdb20e569314b58709a\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202101_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202101_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202101_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202102_citibike_tripdata_1_ride_id.cb09fc8f90": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202102_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202102_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202102_citibike_tripdata_1_ride_id.cb09fc8f90", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202102_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2021_202102_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.034771, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202102_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202102_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202102_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202102_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.a9d8406edf": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202102_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_bb83a63e6e6a663805fab88a0018d95d.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202102_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.a9d8406edf", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202102_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_bb83a63e6e6a663805fab88a0018d95d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_bb83a63e6e6a663805fab88a0018d95d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_bb83a63e6e6a663805fab88a0018d95d"}, "created_at": 1743088112.035699, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_bb83a63e6e6a663805fab88a0018d95d\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202102_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202102_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202102_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202102_citibike_tripdata_1_member_casual__member__casual.c311912a3a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202102_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_13d6c7fe76cad1686c8eea29e08c8b2d.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202102_citibike_tripdata_1_member_casual__member__casual.c311912a3a", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202102_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_13d6c7fe76cad1686c8eea29e08c8b2d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_13d6c7fe76cad1686c8eea29e08c8b2d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_13d6c7fe76cad1686c8eea29e08c8b2d"}, "created_at": 1743088112.03857, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_13d6c7fe76cad1686c8eea29e08c8b2d\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202102_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202102_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202102_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202103_citibike_tripdata_1_ride_id.77c231fd86": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202103_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202103_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202103_citibike_tripdata_1_ride_id.77c231fd86", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202103_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2021_202103_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.041877, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202103_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202103_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202103_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202103_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.21fcf28c86": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202103_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_3b021e0536e0f6ac67fc4d6ec2b32774.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202103_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.21fcf28c86", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202103_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_3b021e0536e0f6ac67fc4d6ec2b32774", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_3b021e0536e0f6ac67fc4d6ec2b32774", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_3b021e0536e0f6ac67fc4d6ec2b32774"}, "created_at": 1743088112.0428858, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_3b021e0536e0f6ac67fc4d6ec2b32774\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202103_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202103_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202103_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202103_citibike_tripdata_1_member_casual__member__casual.b7b9f1a1c9": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202103_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_3f0c51142df458815fe41e6166c8b547.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202103_citibike_tripdata_1_member_casual__member__casual.b7b9f1a1c9", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202103_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_3f0c51142df458815fe41e6166c8b547", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_3f0c51142df458815fe41e6166c8b547", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_3f0c51142df458815fe41e6166c8b547"}, "created_at": 1743088112.045554, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_3f0c51142df458815fe41e6166c8b547\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202103_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202103_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202103_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202103_citibike_tripdata_2_ride_id.cb02d768fb": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202103_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202103_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202103_citibike_tripdata_2_ride_id.cb02d768fb", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202103_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2021_202103_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.048429, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202103_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202103_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202103_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202103_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.748b88414d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202103_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_9802f55f6fddac9d0b87e320162f1b59.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202103_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.748b88414d", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202103_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_9802f55f6fddac9d0b87e320162f1b59", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_9802f55f6fddac9d0b87e320162f1b59", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_9802f55f6fddac9d0b87e320162f1b59"}, "created_at": 1743088112.0494661, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_9802f55f6fddac9d0b87e320162f1b59\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202103_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202103_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202103_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202103_citibike_tripdata_2_member_casual__member__casual.13df90702e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202103_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_7860a949770d1cd633acb423aa54bf3f.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202103_citibike_tripdata_2_member_casual__member__casual.13df90702e", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202103_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_7860a949770d1cd633acb423aa54bf3f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_7860a949770d1cd633acb423aa54bf3f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_7860a949770d1cd633acb423aa54bf3f"}, "created_at": 1743088112.052364, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_7860a949770d1cd633acb423aa54bf3f\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202103_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202103_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202103_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202104_citibike_tripdata_1_ride_id.f765fb12c6": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202104_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202104_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202104_citibike_tripdata_1_ride_id.f765fb12c6", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202104_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2021_202104_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.054931, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202104_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202104_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202104_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.67171bd77f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202104_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_139faf5eee9bdd497f9541d67370ae32.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.67171bd77f", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202104_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_139faf5eee9bdd497f9541d67370ae32", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_139faf5eee9bdd497f9541d67370ae32", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_139faf5eee9bdd497f9541d67370ae32"}, "created_at": 1743088112.0560331, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_139faf5eee9bdd497f9541d67370ae32\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202104_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202104_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202104_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_1_member_casual__member__casual.eaf5b0b2d8": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202104_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_0a0a9f7d7a3662dca6d9d6a1d65bd6b5.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_1_member_casual__member__casual.eaf5b0b2d8", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202104_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_0a0a9f7d7a3662dca6d9d6a1d65bd6b5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_0a0a9f7d7a3662dca6d9d6a1d65bd6b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_0a0a9f7d7a3662dca6d9d6a1d65bd6b5"}, "created_at": 1743088112.058444, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_0a0a9f7d7a3662dca6d9d6a1d65bd6b5\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202104_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202104_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202104_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202104_citibike_tripdata_2_ride_id.8aecd28751": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202104_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202104_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202104_citibike_tripdata_2_ride_id.8aecd28751", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202104_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2021_202104_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.061431, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202104_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202104_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202104_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.10a807266a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202104_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_d296b057681b07bcd959b657e61c6a0b.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.10a807266a", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202104_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_d296b057681b07bcd959b657e61c6a0b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_d296b057681b07bcd959b657e61c6a0b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_d296b057681b07bcd959b657e61c6a0b"}, "created_at": 1743088112.062552, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_d296b057681b07bcd959b657e61c6a0b\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202104_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202104_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202104_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_2_member_casual__member__casual.91b27674a1": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202104_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_c14f341971df76e2fd46c47a2f25535c.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_2_member_casual__member__casual.91b27674a1", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202104_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_c14f341971df76e2fd46c47a2f25535c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_c14f341971df76e2fd46c47a2f25535c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_c14f341971df76e2fd46c47a2f25535c"}, "created_at": 1743088112.0656798, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_c14f341971df76e2fd46c47a2f25535c\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202104_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202104_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202104_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202104_citibike_tripdata_3_ride_id.b197dd7c4c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202104_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202104_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202104_citibike_tripdata_3_ride_id.b197dd7c4c", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202104_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2021_202104_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.068449, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202104_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202104_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202104_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.bcc1600a5a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202104_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_aef277e50a457df47b45e6c56f469847.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.bcc1600a5a", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202104_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_aef277e50a457df47b45e6c56f469847", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_aef277e50a457df47b45e6c56f469847", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_aef277e50a457df47b45e6c56f469847"}, "created_at": 1743088112.06946, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_aef277e50a457df47b45e6c56f469847\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202104_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202104_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202104_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_3_member_casual__member__casual.66f974b607": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202104_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_9adb5f96591b560acdb65e766e258288.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_3_member_casual__member__casual.66f974b607", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202104_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_9adb5f96591b560acdb65e766e258288", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_9adb5f96591b560acdb65e766e258288", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_9adb5f96591b560acdb65e766e258288"}, "created_at": 1743088112.072157, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_9adb5f96591b560acdb65e766e258288\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202104_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202104_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202104_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202105_citibike_tripdata_1_ride_id.258b56e8d5": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202105_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202105_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202105_citibike_tripdata_1_ride_id.258b56e8d5", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202105_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2021_202105_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.074954, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202105_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202105_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202105_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.5289fd62fb": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202105_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_d210af60feadfb9f02cab74e1648dad1.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.5289fd62fb", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202105_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_d210af60feadfb9f02cab74e1648dad1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_d210af60feadfb9f02cab74e1648dad1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_d210af60feadfb9f02cab74e1648dad1"}, "created_at": 1743088112.075972, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_d210af60feadfb9f02cab74e1648dad1\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202105_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202105_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202105_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_1_member_casual__member__casual.4fb310fbfd": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202105_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_49e5f4f72bb766243c91728dd86e668a.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_1_member_casual__member__casual.4fb310fbfd", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202105_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_49e5f4f72bb766243c91728dd86e668a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_49e5f4f72bb766243c91728dd86e668a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_49e5f4f72bb766243c91728dd86e668a"}, "created_at": 1743088112.078507, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_49e5f4f72bb766243c91728dd86e668a\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202105_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202105_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202105_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202105_citibike_tripdata_2_ride_id.18eada12b7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202105_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202105_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202105_citibike_tripdata_2_ride_id.18eada12b7", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202105_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2021_202105_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.081304, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202105_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202105_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202105_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.98921971ef": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202105_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_303da63c916508a52eb3a93117886ad6.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.98921971ef", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202105_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_303da63c916508a52eb3a93117886ad6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_303da63c916508a52eb3a93117886ad6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_303da63c916508a52eb3a93117886ad6"}, "created_at": 1743088112.082304, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_303da63c916508a52eb3a93117886ad6\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202105_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202105_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202105_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_2_member_casual__member__casual.bea25ded95": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202105_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_6619001dbf5938a8d251ece50a687da0.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_2_member_casual__member__casual.bea25ded95", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202105_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_6619001dbf5938a8d251ece50a687da0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_6619001dbf5938a8d251ece50a687da0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_6619001dbf5938a8d251ece50a687da0"}, "created_at": 1743088112.085171, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_6619001dbf5938a8d251ece50a687da0\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202105_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202105_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202105_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202105_citibike_tripdata_3_ride_id.ffe5f18f26": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202105_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202105_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202105_citibike_tripdata_3_ride_id.ffe5f18f26", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202105_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2021_202105_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.087989, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202105_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202105_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202105_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.739b51f382": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202105_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_672c874394d7c00bbcdb1e7058da1b59.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.739b51f382", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202105_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_672c874394d7c00bbcdb1e7058da1b59", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_672c874394d7c00bbcdb1e7058da1b59", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_672c874394d7c00bbcdb1e7058da1b59"}, "created_at": 1743088112.089789, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_672c874394d7c00bbcdb1e7058da1b59\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202105_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202105_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202105_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_3_member_casual__member__casual.83a551dd7a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202105_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_f79642eb641132eff21752264212aa13.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_3_member_casual__member__casual.83a551dd7a", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202105_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_f79642eb641132eff21752264212aa13", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_f79642eb641132eff21752264212aa13", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_f79642eb641132eff21752264212aa13"}, "created_at": 1743088112.092291, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_f79642eb641132eff21752264212aa13\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202105_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202105_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202105_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202106_citibike_tripdata_1_ride_id.40ab30ec21": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202106_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202106_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202106_citibike_tripdata_1_ride_id.40ab30ec21", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202106_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2021_202106_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.0950668, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202106_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202106_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202106_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.cf44063f90": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202106_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_1fbfe8675a7b6cdc6ea3c047a59c37fb.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.cf44063f90", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202106_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_1fbfe8675a7b6cdc6ea3c047a59c37fb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_1fbfe8675a7b6cdc6ea3c047a59c37fb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_1fbfe8675a7b6cdc6ea3c047a59c37fb"}, "created_at": 1743088112.0960672, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_1fbfe8675a7b6cdc6ea3c047a59c37fb\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202106_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202106_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202106_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_1_member_casual__member__casual.0374989de7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202106_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_69a7016a2057611f3658ee78e7632505.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_1_member_casual__member__casual.0374989de7", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202106_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_69a7016a2057611f3658ee78e7632505", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_69a7016a2057611f3658ee78e7632505", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_69a7016a2057611f3658ee78e7632505"}, "created_at": 1743088112.098758, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_69a7016a2057611f3658ee78e7632505\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202106_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202106_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202106_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202106_citibike_tripdata_2_ride_id.45c70ca55a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202106_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202106_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202106_citibike_tripdata_2_ride_id.45c70ca55a", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202106_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2021_202106_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.101398, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202106_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202106_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202106_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d247f397da": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202106_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_9844e9a739fd545046adc0425e100158.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d247f397da", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202106_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_9844e9a739fd545046adc0425e100158", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_9844e9a739fd545046adc0425e100158", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_9844e9a739fd545046adc0425e100158"}, "created_at": 1743088112.102401, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_9844e9a739fd545046adc0425e100158\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202106_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202106_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202106_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_2_member_casual__member__casual.7f7733a1f3": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202106_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_bfa5cfd3b070f7d0d995d01b996e65e6.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_2_member_casual__member__casual.7f7733a1f3", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202106_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_bfa5cfd3b070f7d0d995d01b996e65e6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_bfa5cfd3b070f7d0d995d01b996e65e6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_bfa5cfd3b070f7d0d995d01b996e65e6"}, "created_at": 1743088112.105098, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_bfa5cfd3b070f7d0d995d01b996e65e6\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202106_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202106_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202106_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202106_citibike_tripdata_3_ride_id.f87b8dd150": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202106_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202106_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202106_citibike_tripdata_3_ride_id.f87b8dd150", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202106_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2021_202106_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.1077461, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202106_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202106_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202106_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.6a590a79b8": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202106_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_08363a48c60029be898b0921fffba321.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.6a590a79b8", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202106_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_08363a48c60029be898b0921fffba321", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_08363a48c60029be898b0921fffba321", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_08363a48c60029be898b0921fffba321"}, "created_at": 1743088112.108902, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_08363a48c60029be898b0921fffba321\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202106_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202106_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202106_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_3_member_casual__member__casual.0b8a955605": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202106_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_bb1ea8f9648a44d56d4cb7121a19abde.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_3_member_casual__member__casual.0b8a955605", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202106_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_bb1ea8f9648a44d56d4cb7121a19abde", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_bb1ea8f9648a44d56d4cb7121a19abde", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_bb1ea8f9648a44d56d4cb7121a19abde"}, "created_at": 1743088112.11142, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_bb1ea8f9648a44d56d4cb7121a19abde\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202106_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202106_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202106_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202106_citibike_tripdata_4_ride_id.14065d7a65": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202106_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202106_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202106_citibike_tripdata_4_ride_id.14065d7a65", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202106_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2021_202106_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.1142201, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202106_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202106_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202106_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.cb6cdd1270": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202106_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_61def2306e8e0081db7f18ec86de91da.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.cb6cdd1270", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202106_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_61def2306e8e0081db7f18ec86de91da", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_61def2306e8e0081db7f18ec86de91da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_61def2306e8e0081db7f18ec86de91da"}, "created_at": 1743088112.115228, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_61def2306e8e0081db7f18ec86de91da\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202106_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202106_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202106_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_4_member_casual__member__casual.060131e290": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202106_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_6da98acf3313c6ff45372f7f461fec1b.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_4_member_casual__member__casual.060131e290", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202106_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_6da98acf3313c6ff45372f7f461fec1b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_6da98acf3313c6ff45372f7f461fec1b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_6da98acf3313c6ff45372f7f461fec1b"}, "created_at": 1743088112.1180632, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_6da98acf3313c6ff45372f7f461fec1b\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202106_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202106_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202106_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202107_citibike_tripdata_1_ride_id.4a24d94602": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202107_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202107_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202107_citibike_tripdata_1_ride_id.4a24d94602", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202107_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2021_202107_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.121089, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202107_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202107_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202107_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.e5eec0cb2a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202107_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_d47eeac3ebf72b05467231dd1ce41724.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.e5eec0cb2a", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202107_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_d47eeac3ebf72b05467231dd1ce41724", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_d47eeac3ebf72b05467231dd1ce41724", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_d47eeac3ebf72b05467231dd1ce41724"}, "created_at": 1743088112.122109, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_d47eeac3ebf72b05467231dd1ce41724\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202107_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202107_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202107_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_1_member_casual__member__casual.8bc6a43143": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202107_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_8421d6091025e105bb81dc418af8b4c9.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_1_member_casual__member__casual.8bc6a43143", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202107_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_8421d6091025e105bb81dc418af8b4c9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_8421d6091025e105bb81dc418af8b4c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_8421d6091025e105bb81dc418af8b4c9"}, "created_at": 1743088112.124877, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_8421d6091025e105bb81dc418af8b4c9\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202107_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202107_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202107_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202107_citibike_tripdata_2_ride_id.a27fc40e13": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202107_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202107_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202107_citibike_tripdata_2_ride_id.a27fc40e13", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202107_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2021_202107_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.1276958, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202107_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202107_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202107_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d17df087bd": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202107_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_fb56fe7760128d999972fa5f76630f53.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d17df087bd", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202107_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_fb56fe7760128d999972fa5f76630f53", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_fb56fe7760128d999972fa5f76630f53", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_fb56fe7760128d999972fa5f76630f53"}, "created_at": 1743088112.128685, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_fb56fe7760128d999972fa5f76630f53\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202107_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202107_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202107_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_2_member_casual__member__casual.9bfcb30451": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202107_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_a3ac322e55708ebf7f1377c9551c0ed4.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_2_member_casual__member__casual.9bfcb30451", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202107_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_a3ac322e55708ebf7f1377c9551c0ed4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_a3ac322e55708ebf7f1377c9551c0ed4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_a3ac322e55708ebf7f1377c9551c0ed4"}, "created_at": 1743088112.131115, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_a3ac322e55708ebf7f1377c9551c0ed4\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202107_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202107_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202107_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202107_citibike_tripdata_3_ride_id.dfeb4d67da": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202107_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202107_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202107_citibike_tripdata_3_ride_id.dfeb4d67da", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202107_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2021_202107_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.133776, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202107_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202107_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202107_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.506404c0c7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202107_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_19f945e8884c44935913f695da01e1b4.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.506404c0c7", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202107_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_19f945e8884c44935913f695da01e1b4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_19f945e8884c44935913f695da01e1b4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_19f945e8884c44935913f695da01e1b4"}, "created_at": 1743088112.134742, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_19f945e8884c44935913f695da01e1b4\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202107_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202107_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202107_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_3_member_casual__member__casual.7d30beb88d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202107_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_10b1c0b827ea15e9fd1e172afcd94f6c.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_3_member_casual__member__casual.7d30beb88d", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202107_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_10b1c0b827ea15e9fd1e172afcd94f6c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_10b1c0b827ea15e9fd1e172afcd94f6c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_10b1c0b827ea15e9fd1e172afcd94f6c"}, "created_at": 1743088112.1373599, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_10b1c0b827ea15e9fd1e172afcd94f6c\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202107_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202107_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202107_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202107_citibike_tripdata_4_ride_id.8a373eccf2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202107_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202107_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202107_citibike_tripdata_4_ride_id.8a373eccf2", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202107_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2021_202107_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.140298, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202107_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202107_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202107_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.87de44504b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202107_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_fe877d939f8c799731d8df43dfd8afd5.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.87de44504b", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202107_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_fe877d939f8c799731d8df43dfd8afd5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_fe877d939f8c799731d8df43dfd8afd5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_fe877d939f8c799731d8df43dfd8afd5"}, "created_at": 1743088112.141408, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_fe877d939f8c799731d8df43dfd8afd5\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202107_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202107_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202107_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_4_member_casual__member__casual.c76d5158e0": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202107_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_a24fb9fca386b51537d631df9644f787.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_4_member_casual__member__casual.c76d5158e0", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202107_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_a24fb9fca386b51537d631df9644f787", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_a24fb9fca386b51537d631df9644f787", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_a24fb9fca386b51537d631df9644f787"}, "created_at": 1743088112.143847, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_a24fb9fca386b51537d631df9644f787\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202107_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202107_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202107_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202108_citibike_tripdata_1_ride_id.fccd7246ad": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202108_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202108_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202108_citibike_tripdata_1_ride_id.fccd7246ad", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202108_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2021_202108_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.147062, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202108_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202108_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202108_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d1bdd31477": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202108_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_50f803860910a9750b83ee0e3154d85e.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d1bdd31477", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202108_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_50f803860910a9750b83ee0e3154d85e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_50f803860910a9750b83ee0e3154d85e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_50f803860910a9750b83ee0e3154d85e"}, "created_at": 1743088112.148179, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_50f803860910a9750b83ee0e3154d85e\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202108_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202108_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202108_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_1_member_casual__member__casual.cc08f301ce": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202108_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_a207495effd3e574f00ec5a4e595cc80.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_1_member_casual__member__casual.cc08f301ce", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202108_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_a207495effd3e574f00ec5a4e595cc80", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_a207495effd3e574f00ec5a4e595cc80", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_a207495effd3e574f00ec5a4e595cc80"}, "created_at": 1743088112.151016, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_a207495effd3e574f00ec5a4e595cc80\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202108_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202108_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202108_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202108_citibike_tripdata_2_ride_id.1213a78a85": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202108_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202108_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202108_citibike_tripdata_2_ride_id.1213a78a85", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202108_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2021_202108_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.1539142, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202108_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202108_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202108_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.4a120cef16": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202108_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_f6396b61a0c01e38bc24a9025cd2864b.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.4a120cef16", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202108_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_f6396b61a0c01e38bc24a9025cd2864b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_f6396b61a0c01e38bc24a9025cd2864b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_f6396b61a0c01e38bc24a9025cd2864b"}, "created_at": 1743088112.154954, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_f6396b61a0c01e38bc24a9025cd2864b\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202108_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202108_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202108_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_2_member_casual__member__casual.30aaba5086": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202108_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_2023cc0d3dae8ac81eb9f480c001dbed.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_2_member_casual__member__casual.30aaba5086", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202108_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_2023cc0d3dae8ac81eb9f480c001dbed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_2023cc0d3dae8ac81eb9f480c001dbed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_2023cc0d3dae8ac81eb9f480c001dbed"}, "created_at": 1743088112.15782, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_2023cc0d3dae8ac81eb9f480c001dbed\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202108_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202108_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202108_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202108_citibike_tripdata_3_ride_id.8851d96b04": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202108_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202108_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202108_citibike_tripdata_3_ride_id.8851d96b04", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202108_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2021_202108_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.1609, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202108_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202108_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202108_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.e952f53885": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202108_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_630c32aa05c57b0d3abb1815b5c1948b.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.e952f53885", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202108_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_630c32aa05c57b0d3abb1815b5c1948b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_630c32aa05c57b0d3abb1815b5c1948b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_630c32aa05c57b0d3abb1815b5c1948b"}, "created_at": 1743088112.1620631, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_630c32aa05c57b0d3abb1815b5c1948b\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202108_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202108_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202108_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_3_member_casual__member__casual.abe085f3c5": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202108_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_b6d8a26f38b419d603fe74937c2d014c.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_3_member_casual__member__casual.abe085f3c5", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202108_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_b6d8a26f38b419d603fe74937c2d014c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_b6d8a26f38b419d603fe74937c2d014c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_b6d8a26f38b419d603fe74937c2d014c"}, "created_at": 1743088112.1645749, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_b6d8a26f38b419d603fe74937c2d014c\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202108_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202108_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202108_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202108_citibike_tripdata_4_ride_id.e317ef0e40": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202108_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202108_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202108_citibike_tripdata_4_ride_id.e317ef0e40", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202108_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2021_202108_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.1673448, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202108_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202108_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202108_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.2b6464adab": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202108_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_7aafc83a1e8ef187d318a4ace2739a40.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.2b6464adab", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202108_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_7aafc83a1e8ef187d318a4ace2739a40", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_7aafc83a1e8ef187d318a4ace2739a40", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_7aafc83a1e8ef187d318a4ace2739a40"}, "created_at": 1743088112.168364, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_7aafc83a1e8ef187d318a4ace2739a40\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202108_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202108_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202108_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_4_member_casual__member__casual.860266a4b9": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202108_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_716ae0c6a43540783e3d86ac9e0c712b.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_4_member_casual__member__casual.860266a4b9", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202108_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_716ae0c6a43540783e3d86ac9e0c712b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_716ae0c6a43540783e3d86ac9e0c712b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_716ae0c6a43540783e3d86ac9e0c712b"}, "created_at": 1743088112.1710641, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_716ae0c6a43540783e3d86ac9e0c712b\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202108_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202108_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202108_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202109_citibike_tripdata_1_ride_id.a26d2aedeb": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202109_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202109_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202109_citibike_tripdata_1_ride_id.a26d2aedeb", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202109_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2021_202109_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.173724, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202109_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202109_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202109_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.14d685dbfb": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202109_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_ac542ed53ea81dc613bdb2dab0281deb.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.14d685dbfb", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202109_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_ac542ed53ea81dc613bdb2dab0281deb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_ac542ed53ea81dc613bdb2dab0281deb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_ac542ed53ea81dc613bdb2dab0281deb"}, "created_at": 1743088112.174725, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_ac542ed53ea81dc613bdb2dab0281deb\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202109_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202109_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202109_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_1_member_casual__member__casual.cd66eb2de2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202109_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_a73b9a94566bf280b5f621a5f5d95a5b.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_1_member_casual__member__casual.cd66eb2de2", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202109_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_a73b9a94566bf280b5f621a5f5d95a5b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_a73b9a94566bf280b5f621a5f5d95a5b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_a73b9a94566bf280b5f621a5f5d95a5b"}, "created_at": 1743088112.177372, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_a73b9a94566bf280b5f621a5f5d95a5b\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202109_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202109_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202109_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202109_citibike_tripdata_2_ride_id.8b61779d71": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202109_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202109_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202109_citibike_tripdata_2_ride_id.8b61779d71", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202109_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2021_202109_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.1801128, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202109_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202109_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202109_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d5429f412b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202109_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_e9214e2895de12e6cddb2b36a7a3e899.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d5429f412b", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202109_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_e9214e2895de12e6cddb2b36a7a3e899", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_e9214e2895de12e6cddb2b36a7a3e899", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_e9214e2895de12e6cddb2b36a7a3e899"}, "created_at": 1743088112.181108, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_e9214e2895de12e6cddb2b36a7a3e899\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202109_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202109_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202109_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_2_member_casual__member__casual.5b52d33ab6": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202109_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_62abd33f8835e3c4ab0aa82544a9d4a3.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_2_member_casual__member__casual.5b52d33ab6", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202109_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_62abd33f8835e3c4ab0aa82544a9d4a3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_62abd33f8835e3c4ab0aa82544a9d4a3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_62abd33f8835e3c4ab0aa82544a9d4a3"}, "created_at": 1743088112.1836102, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_62abd33f8835e3c4ab0aa82544a9d4a3\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202109_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202109_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202109_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202109_citibike_tripdata_3_ride_id.fcba893a9a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202109_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202109_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202109_citibike_tripdata_3_ride_id.fcba893a9a", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202109_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2021_202109_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.18649, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202109_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202109_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202109_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.a327bf3797": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202109_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_0aa23f085433afab39b6dfb483066422.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.a327bf3797", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202109_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_0aa23f085433afab39b6dfb483066422", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_0aa23f085433afab39b6dfb483066422", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_0aa23f085433afab39b6dfb483066422"}, "created_at": 1743088112.187412, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_0aa23f085433afab39b6dfb483066422\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202109_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202109_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202109_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_3_member_casual__member__casual.f088e7ad5a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202109_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_a7ea2b7401eaa083e7b39c282d7c00f5.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_3_member_casual__member__casual.f088e7ad5a", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202109_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_a7ea2b7401eaa083e7b39c282d7c00f5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_a7ea2b7401eaa083e7b39c282d7c00f5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_a7ea2b7401eaa083e7b39c282d7c00f5"}, "created_at": 1743088112.189877, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_a7ea2b7401eaa083e7b39c282d7c00f5\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202109_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202109_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202109_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202109_citibike_tripdata_4_ride_id.c8d278b17e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202109_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202109_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202109_citibike_tripdata_4_ride_id.c8d278b17e", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202109_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2021_202109_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.192289, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202109_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202109_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202109_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.2d013538ac": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202109_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_9d1cf00bb246abb5838eb3e2203f8e27.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.2d013538ac", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202109_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_9d1cf00bb246abb5838eb3e2203f8e27", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_9d1cf00bb246abb5838eb3e2203f8e27", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_9d1cf00bb246abb5838eb3e2203f8e27"}, "created_at": 1743088112.1933281, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_9d1cf00bb246abb5838eb3e2203f8e27\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202109_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202109_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202109_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_4_member_casual__member__casual.1bca846f67": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202109_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_8c91f02dd771d3a7c541002e9e85d37f.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_4_member_casual__member__casual.1bca846f67", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202109_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_8c91f02dd771d3a7c541002e9e85d37f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_8c91f02dd771d3a7c541002e9e85d37f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_8c91f02dd771d3a7c541002e9e85d37f"}, "created_at": 1743088112.196532, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_8c91f02dd771d3a7c541002e9e85d37f\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202109_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202109_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202109_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202110_citibike_tripdata_1_ride_id.6bd06769a9": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202110_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202110_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202110_citibike_tripdata_1_ride_id.6bd06769a9", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202110_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2021_202110_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.199599, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202110_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202110_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202110_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.c229074449": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202110_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_7428328581c3de520a66167ab9d0afc7.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.c229074449", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202110_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_7428328581c3de520a66167ab9d0afc7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_7428328581c3de520a66167ab9d0afc7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_7428328581c3de520a66167ab9d0afc7"}, "created_at": 1743088112.2006211, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_7428328581c3de520a66167ab9d0afc7\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202110_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202110_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202110_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_1_member_casual__member__casual.8f3a45ba98": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202110_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_fe2ed2cbdb6c9704282a6fabe1f1e274.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_1_member_casual__member__casual.8f3a45ba98", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202110_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_fe2ed2cbdb6c9704282a6fabe1f1e274", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_fe2ed2cbdb6c9704282a6fabe1f1e274", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_fe2ed2cbdb6c9704282a6fabe1f1e274"}, "created_at": 1743088112.203896, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_fe2ed2cbdb6c9704282a6fabe1f1e274\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202110_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202110_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202110_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202110_citibike_tripdata_2_ride_id.32c6ee955d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202110_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202110_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202110_citibike_tripdata_2_ride_id.32c6ee955d", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202110_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2021_202110_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.20661, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202110_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202110_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202110_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.a401e5db20": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202110_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_73bb54757e8156a7ee8fc4f11957f49f.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.a401e5db20", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202110_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_73bb54757e8156a7ee8fc4f11957f49f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_73bb54757e8156a7ee8fc4f11957f49f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_73bb54757e8156a7ee8fc4f11957f49f"}, "created_at": 1743088112.207603, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_73bb54757e8156a7ee8fc4f11957f49f\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202110_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202110_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202110_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_2_member_casual__member__casual.8944c18c5f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202110_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_bc6947b613f26a51bbc910b4f7cc02f0.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_2_member_casual__member__casual.8944c18c5f", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202110_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_bc6947b613f26a51bbc910b4f7cc02f0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_bc6947b613f26a51bbc910b4f7cc02f0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_bc6947b613f26a51bbc910b4f7cc02f0"}, "created_at": 1743088112.2102778, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_bc6947b613f26a51bbc910b4f7cc02f0\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202110_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202110_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202110_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202110_citibike_tripdata_3_ride_id.ffe71673fd": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202110_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202110_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202110_citibike_tripdata_3_ride_id.ffe71673fd", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202110_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2021_202110_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.212914, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202110_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202110_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202110_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b94eb150fa": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202110_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_96b0e4bc32b068746e40442e60eaa83e.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b94eb150fa", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202110_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_96b0e4bc32b068746e40442e60eaa83e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_96b0e4bc32b068746e40442e60eaa83e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_96b0e4bc32b068746e40442e60eaa83e"}, "created_at": 1743088112.2140749, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_96b0e4bc32b068746e40442e60eaa83e\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202110_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202110_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202110_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_3_member_casual__member__casual.b509ddd8d4": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202110_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_b74567515112c81710063e88ed618fd3.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_3_member_casual__member__casual.b509ddd8d4", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202110_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_b74567515112c81710063e88ed618fd3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_b74567515112c81710063e88ed618fd3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_b74567515112c81710063e88ed618fd3"}, "created_at": 1743088112.216578, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_b74567515112c81710063e88ed618fd3\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202110_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202110_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202110_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202110_citibike_tripdata_4_ride_id.f72b7ed84b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202110_citibike_tripdata_4_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202110_citibike_tripdata_4_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202110_citibike_tripdata_4_ride_id.f72b7ed84b", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202110_citibike_tripdata_4_ride_id"], "alias": "source_unique_staging_2021_202110_citibike_tripdata_4_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.2194822, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202110_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202110_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202110_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.c899723d08": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202110_citibike_tripdata_4_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_dd80b7b9c87407c693b3c73608121f80.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.c899723d08", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202110_citibike_tripdata_4_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_dd80b7b9c87407c693b3c73608121f80", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_dd80b7b9c87407c693b3c73608121f80", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_dd80b7b9c87407c693b3c73608121f80"}, "created_at": 1743088112.220469, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_dd80b7b9c87407c693b3c73608121f80\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202110_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202110_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202110_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_4_member_casual__member__casual.b315cea45a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202110_citibike_tripdata_4_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_d0003cc5785538118146424fd539b471.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_4_member_casual__member__casual.b315cea45a", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202110_citibike_tripdata_4_member_casual__member__casual"], "alias": "source_accepted_values_staging_d0003cc5785538118146424fd539b471", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_d0003cc5785538118146424fd539b471", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_d0003cc5785538118146424fd539b471"}, "created_at": 1743088112.22306, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_d0003cc5785538118146424fd539b471\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202110_citibike_tripdata_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202110_citibike_tripdata_4"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202110_citibike_tripdata_4')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202111_citibike_tripdata_1_ride_id.ef6d9c0518": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202111_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202111_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202111_citibike_tripdata_1_ride_id.ef6d9c0518", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202111_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2021_202111_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.225621, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202111_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202111_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202111_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.e09e5b3640": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202111_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_ad80cb6d471348933922ab3bbe4cffae.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.e09e5b3640", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202111_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_ad80cb6d471348933922ab3bbe4cffae", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_ad80cb6d471348933922ab3bbe4cffae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_ad80cb6d471348933922ab3bbe4cffae"}, "created_at": 1743088112.2265759, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_ad80cb6d471348933922ab3bbe4cffae\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202111_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202111_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202111_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_1_member_casual__member__casual.4da73b0077": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202111_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_fe07862274eab090e255325123c90927.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_1_member_casual__member__casual.4da73b0077", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202111_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_fe07862274eab090e255325123c90927", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_fe07862274eab090e255325123c90927", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_fe07862274eab090e255325123c90927"}, "created_at": 1743088112.229228, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_fe07862274eab090e255325123c90927\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202111_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202111_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202111_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202111_citibike_tripdata_2_ride_id.6551fc2143": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202111_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202111_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202111_citibike_tripdata_2_ride_id.6551fc2143", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202111_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2021_202111_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.232013, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202111_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202111_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202111_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.480f8285ce": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202111_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_1842acc7c5e1dba7fd0e1b627d4947a0.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.480f8285ce", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202111_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_1842acc7c5e1dba7fd0e1b627d4947a0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_1842acc7c5e1dba7fd0e1b627d4947a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_1842acc7c5e1dba7fd0e1b627d4947a0"}, "created_at": 1743088112.233022, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_1842acc7c5e1dba7fd0e1b627d4947a0\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202111_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202111_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202111_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_2_member_casual__member__casual.715afd4fbd": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202111_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_08b682e79a0a52b1ba8ef351842faf44.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_2_member_casual__member__casual.715afd4fbd", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202111_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_08b682e79a0a52b1ba8ef351842faf44", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_08b682e79a0a52b1ba8ef351842faf44", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_08b682e79a0a52b1ba8ef351842faf44"}, "created_at": 1743088112.2355368, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_08b682e79a0a52b1ba8ef351842faf44\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202111_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202111_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202111_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202111_citibike_tripdata_3_ride_id.cf8b52b071": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202111_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202111_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202111_citibike_tripdata_3_ride_id.cf8b52b071", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202111_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2021_202111_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.2382982, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202111_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202111_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202111_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c340f0742d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202111_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_aa852aa0961d5a2f9c5549666065d542.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c340f0742d", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202111_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_aa852aa0961d5a2f9c5549666065d542", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_aa852aa0961d5a2f9c5549666065d542", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_aa852aa0961d5a2f9c5549666065d542"}, "created_at": 1743088112.239291, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_aa852aa0961d5a2f9c5549666065d542\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202111_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202111_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202111_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_3_member_casual__member__casual.c606d0b9a5": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202111_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_19747c97482a02033eb98c296526f794.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_3_member_casual__member__casual.c606d0b9a5", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202111_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_19747c97482a02033eb98c296526f794", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_19747c97482a02033eb98c296526f794", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_19747c97482a02033eb98c296526f794"}, "created_at": 1743088112.241933, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_19747c97482a02033eb98c296526f794\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202111_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202111_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202111_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202112_citibike_tripdata_1_ride_id.4da4b782ec": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202112_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202112_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202112_citibike_tripdata_1_ride_id.4da4b782ec", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202112_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2021_202112_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.2445529, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202112_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202112_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202112_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202112_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.380ecfe5ef": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202112_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_b5afe579750e2f7a145517dd49246956.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202112_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.380ecfe5ef", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202112_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_b5afe579750e2f7a145517dd49246956", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_b5afe579750e2f7a145517dd49246956", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_b5afe579750e2f7a145517dd49246956"}, "created_at": 1743088112.2456791, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_b5afe579750e2f7a145517dd49246956\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202112_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202112_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202112_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202112_citibike_tripdata_1_member_casual__member__casual.868a8816ca": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202112_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_e5c6157bd123e60e2cfa407557bce6ee.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202112_citibike_tripdata_1_member_casual__member__casual.868a8816ca", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202112_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_e5c6157bd123e60e2cfa407557bce6ee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_e5c6157bd123e60e2cfa407557bce6ee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_e5c6157bd123e60e2cfa407557bce6ee"}, "created_at": 1743088112.2481952, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_e5c6157bd123e60e2cfa407557bce6ee\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202112_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202112_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202112_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2021_202112_citibike_tripdata_2_ride_id.408522cf2b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2021_202112_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2021_202112_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2021_202112_citibike_tripdata_2_ride_id.408522cf2b", "fqn": ["data_transform", "staging", "source_unique_staging_2021_202112_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2021_202112_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.2510562, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202112_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2021.202112_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2021', '202112_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202112_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.42a6584623": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202112_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_b2c257b8f59f1c9c7eb0303d513eb494.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202112_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.42a6584623", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202112_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_b2c257b8f59f1c9c7eb0303d513eb494", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_b2c257b8f59f1c9c7eb0303d513eb494", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_b2c257b8f59f1c9c7eb0303d513eb494"}, "created_at": 1743088112.252036, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_b2c257b8f59f1c9c7eb0303d513eb494\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202112_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202112_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2021', '202112_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2021_202112_citibike_tripdata_2_member_casual__member__casual.d2a15a3818": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2021_202112_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_1d3c0f09ba7f658f4a353d0936395cc3.sql", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2021_202112_citibike_tripdata_2_member_casual__member__casual.d2a15a3818", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2021_202112_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_1d3c0f09ba7f658f4a353d0936395cc3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_1d3c0f09ba7f658f4a353d0936395cc3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_1d3c0f09ba7f658f4a353d0936395cc3"}, "created_at": 1743088112.254666, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_1d3c0f09ba7f658f4a353d0936395cc3\") }}", "language": "sql", "refs": [], "sources": [["staging_2021", "202112_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2021.202112_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2021", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2021', '202112_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202001_citibike_tripdata_1_ride_id.4261206b1a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202001_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202001_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202001_citibike_tripdata_1_ride_id.4261206b1a", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202001_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2020_202001_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.257215, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202001_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202001_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202001_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202001_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d00ba7dbb3": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202001_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_acef4284e5fedb28e3bd291471d03da1.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202001_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d00ba7dbb3", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202001_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_acef4284e5fedb28e3bd291471d03da1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_acef4284e5fedb28e3bd291471d03da1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_acef4284e5fedb28e3bd291471d03da1"}, "created_at": 1743088112.258163, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_acef4284e5fedb28e3bd291471d03da1\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202001_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202001_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202001_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202001_citibike_tripdata_1_member_casual__member__casual.44cc8596cf": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202001_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_46553dde47792a2759419be655de95a7.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202001_citibike_tripdata_1_member_casual__member__casual.44cc8596cf", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202001_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_46553dde47792a2759419be655de95a7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_46553dde47792a2759419be655de95a7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_46553dde47792a2759419be655de95a7"}, "created_at": 1743088112.261272, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_46553dde47792a2759419be655de95a7\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202001_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202001_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202001_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202001_citibike_tripdata_2_ride_id.409cf6d4d5": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202001_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202001_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202001_citibike_tripdata_2_ride_id.409cf6d4d5", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202001_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2020_202001_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.2638562, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202001_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202001_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202001_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202001_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.14124ed531": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202001_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_fc45cd6bef11ff0e7fcb994132e784e9.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202001_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.14124ed531", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202001_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_fc45cd6bef11ff0e7fcb994132e784e9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_fc45cd6bef11ff0e7fcb994132e784e9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_fc45cd6bef11ff0e7fcb994132e784e9"}, "created_at": 1743088112.265002, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_fc45cd6bef11ff0e7fcb994132e784e9\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202001_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202001_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202001_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202001_citibike_tripdata_2_member_casual__member__casual.105c3d285a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202001_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_c75f04f7b3eb5abd148e6233dc165897.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202001_citibike_tripdata_2_member_casual__member__casual.105c3d285a", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202001_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_c75f04f7b3eb5abd148e6233dc165897", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_c75f04f7b3eb5abd148e6233dc165897", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_c75f04f7b3eb5abd148e6233dc165897"}, "created_at": 1743088112.267495, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_c75f04f7b3eb5abd148e6233dc165897\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202001_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202001_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202001_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202002_citibike_tripdata_1_ride_id.8601ab65ec": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202002_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202002_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202002_citibike_tripdata_1_ride_id.8601ab65ec", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202002_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2020_202002_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.270249, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202002_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202002_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202002_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202002_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.f3e8709109": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202002_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_f5146fdcd514d67bdcb6adb52dd4889c.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202002_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.f3e8709109", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202002_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_f5146fdcd514d67bdcb6adb52dd4889c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_f5146fdcd514d67bdcb6adb52dd4889c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_f5146fdcd514d67bdcb6adb52dd4889c"}, "created_at": 1743088112.271231, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_f5146fdcd514d67bdcb6adb52dd4889c\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202002_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202002_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202002_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202002_citibike_tripdata_1_member_casual__member__casual.9068fac9df": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202002_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_c47344b4e4a4c028c85c2462590fa6cf.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202002_citibike_tripdata_1_member_casual__member__casual.9068fac9df", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202002_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_c47344b4e4a4c028c85c2462590fa6cf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_c47344b4e4a4c028c85c2462590fa6cf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_c47344b4e4a4c028c85c2462590fa6cf"}, "created_at": 1743088112.273848, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_c47344b4e4a4c028c85c2462590fa6cf\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202002_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202002_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202002_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202002_citibike_tripdata_2_ride_id.49ab7c2eb0": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202002_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202002_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202002_citibike_tripdata_2_ride_id.49ab7c2eb0", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202002_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2020_202002_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.276462, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202002_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202002_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202002_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202002_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.b654b93119": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202002_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_69372e7c0f70c5a87b2119aa876bc0d9.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202002_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.b654b93119", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202002_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_69372e7c0f70c5a87b2119aa876bc0d9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_69372e7c0f70c5a87b2119aa876bc0d9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_69372e7c0f70c5a87b2119aa876bc0d9"}, "created_at": 1743088112.277445, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_69372e7c0f70c5a87b2119aa876bc0d9\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202002_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202002_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202002_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202002_citibike_tripdata_2_member_casual__member__casual.93543152ed": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202002_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_3733e25bbb876e31a4634afa14ea8374.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202002_citibike_tripdata_2_member_casual__member__casual.93543152ed", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202002_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_3733e25bbb876e31a4634afa14ea8374", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_3733e25bbb876e31a4634afa14ea8374", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_3733e25bbb876e31a4634afa14ea8374"}, "created_at": 1743088112.280061, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_3733e25bbb876e31a4634afa14ea8374\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202002_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202002_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202002_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202003_citibike_tripdata_1_ride_id.affd78e3c1": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202003_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202003_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202003_citibike_tripdata_1_ride_id.affd78e3c1", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202003_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2020_202003_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.282781, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202003_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202003_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202003_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202003_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.ade85bb3b7": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202003_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_ab811a96344494527dcc31fa1e2b0a0f.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202003_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.ade85bb3b7", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202003_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_ab811a96344494527dcc31fa1e2b0a0f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_ab811a96344494527dcc31fa1e2b0a0f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_ab811a96344494527dcc31fa1e2b0a0f"}, "created_at": 1743088112.283767, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_ab811a96344494527dcc31fa1e2b0a0f\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202003_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202003_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202003_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202003_citibike_tripdata_1_member_casual__member__casual.adc7f375b2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202003_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_0fc56421b324049a3753b17f506ebea1.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202003_citibike_tripdata_1_member_casual__member__casual.adc7f375b2", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202003_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_0fc56421b324049a3753b17f506ebea1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_0fc56421b324049a3753b17f506ebea1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_0fc56421b324049a3753b17f506ebea1"}, "created_at": 1743088112.286452, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_0fc56421b324049a3753b17f506ebea1\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202003_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202003_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202003_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202003_citibike_tripdata_2_ride_id.7948dcbf8c": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202003_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202003_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202003_citibike_tripdata_2_ride_id.7948dcbf8c", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202003_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2020_202003_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.289196, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202003_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202003_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202003_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202003_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.ce1e7a6683": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202003_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_f337afa3b72bb76f96530fa2e609aefd.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202003_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.ce1e7a6683", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202003_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_f337afa3b72bb76f96530fa2e609aefd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_f337afa3b72bb76f96530fa2e609aefd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_f337afa3b72bb76f96530fa2e609aefd"}, "created_at": 1743088112.2901518, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_f337afa3b72bb76f96530fa2e609aefd\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202003_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202003_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202003_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202003_citibike_tripdata_2_member_casual__member__casual.fc383b9e6a": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202003_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_c2181e16c4f82b56bc2e83f45b150271.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202003_citibike_tripdata_2_member_casual__member__casual.fc383b9e6a", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202003_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_c2181e16c4f82b56bc2e83f45b150271", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_c2181e16c4f82b56bc2e83f45b150271", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_c2181e16c4f82b56bc2e83f45b150271"}, "created_at": 1743088112.292681, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_c2181e16c4f82b56bc2e83f45b150271\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202003_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202003_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202003_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202004_citibike_tripdata_1_ride_id.6e99a3dacc": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202004_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202004_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202004_citibike_tripdata_1_ride_id.6e99a3dacc", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202004_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2020_202004_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.295447, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202004_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202004_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202004_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202004_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.e97ec4c3d5": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202004_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_d9b3ade14575c77fe05e1a982790b3c5.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202004_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.e97ec4c3d5", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202004_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_d9b3ade14575c77fe05e1a982790b3c5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_d9b3ade14575c77fe05e1a982790b3c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_d9b3ade14575c77fe05e1a982790b3c5"}, "created_at": 1743088112.296603, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_d9b3ade14575c77fe05e1a982790b3c5\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202004_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202004_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202004_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202004_citibike_tripdata_1_member_casual__member__casual.4b69881c15": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202004_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_88f3e33cf27ba76b3d9f0082eb518750.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202004_citibike_tripdata_1_member_casual__member__casual.4b69881c15", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202004_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_88f3e33cf27ba76b3d9f0082eb518750", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_88f3e33cf27ba76b3d9f0082eb518750", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_88f3e33cf27ba76b3d9f0082eb518750"}, "created_at": 1743088112.299146, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_88f3e33cf27ba76b3d9f0082eb518750\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202004_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202004_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202004_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202005_citibike_tripdata_1_ride_id.e127959e40": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202005_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202005_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202005_citibike_tripdata_1_ride_id.e127959e40", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202005_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2020_202005_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.3018072, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202005_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202005_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202005_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202005_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d893005ba2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202005_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_9583ddd5891b38d76a0d76676932514e.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202005_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d893005ba2", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202005_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_9583ddd5891b38d76a0d76676932514e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_9583ddd5891b38d76a0d76676932514e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_9583ddd5891b38d76a0d76676932514e"}, "created_at": 1743088112.3027682, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_9583ddd5891b38d76a0d76676932514e\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202005_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202005_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202005_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202005_citibike_tripdata_1_member_casual__member__casual.2325ca6095": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202005_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_680660d73e0217190689bee565afd1df.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202005_citibike_tripdata_1_member_casual__member__casual.2325ca6095", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202005_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_680660d73e0217190689bee565afd1df", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_680660d73e0217190689bee565afd1df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_680660d73e0217190689bee565afd1df"}, "created_at": 1743088112.305419, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_680660d73e0217190689bee565afd1df\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202005_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202005_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202005_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202005_citibike_tripdata_2_ride_id.8109c8f605": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202005_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202005_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202005_citibike_tripdata_2_ride_id.8109c8f605", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202005_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2020_202005_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.3080928, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202005_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202005_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202005_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202005_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.e6a49616c5": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202005_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_f425f471b1276899c9ced6dea8926f20.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202005_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.e6a49616c5", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202005_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_f425f471b1276899c9ced6dea8926f20", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_f425f471b1276899c9ced6dea8926f20", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_f425f471b1276899c9ced6dea8926f20"}, "created_at": 1743088112.309077, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_f425f471b1276899c9ced6dea8926f20\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202005_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202005_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202005_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202005_citibike_tripdata_2_member_casual__member__casual.762faaeb56": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202005_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_a41308bf3251cd9c60ed9d54012a0c41.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202005_citibike_tripdata_2_member_casual__member__casual.762faaeb56", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202005_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_a41308bf3251cd9c60ed9d54012a0c41", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_a41308bf3251cd9c60ed9d54012a0c41", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_a41308bf3251cd9c60ed9d54012a0c41"}, "created_at": 1743088112.311737, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_a41308bf3251cd9c60ed9d54012a0c41\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202005_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202005_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202005_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202006_citibike_tripdata_1_ride_id.a2790e72d3": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202006_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202006_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202006_citibike_tripdata_1_ride_id.a2790e72d3", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202006_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2020_202006_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.314358, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202006_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202006_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202006_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202006_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.6e273b7d21": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202006_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_008bdf0894ad8f4367cc3aee664eb6c5.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202006_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.6e273b7d21", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202006_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_008bdf0894ad8f4367cc3aee664eb6c5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_008bdf0894ad8f4367cc3aee664eb6c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_008bdf0894ad8f4367cc3aee664eb6c5"}, "created_at": 1743088112.316111, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_008bdf0894ad8f4367cc3aee664eb6c5\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202006_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202006_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202006_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202006_citibike_tripdata_1_member_casual__member__casual.81ebfbb8a6": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202006_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_21ab4a21718cfcafbb500c2d561a8a93.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202006_citibike_tripdata_1_member_casual__member__casual.81ebfbb8a6", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202006_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_21ab4a21718cfcafbb500c2d561a8a93", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_21ab4a21718cfcafbb500c2d561a8a93", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_21ab4a21718cfcafbb500c2d561a8a93"}, "created_at": 1743088112.318827, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_21ab4a21718cfcafbb500c2d561a8a93\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202006_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202006_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202006_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202006_citibike_tripdata_2_ride_id.6c635769aa": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202006_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202006_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202006_citibike_tripdata_2_ride_id.6c635769aa", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202006_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2020_202006_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.3215759, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202006_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202006_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202006_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202006_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.cbd326cee8": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202006_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_b1739440c3bb1e7dc3252fcb687fb7e5.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202006_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.cbd326cee8", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202006_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_b1739440c3bb1e7dc3252fcb687fb7e5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_b1739440c3bb1e7dc3252fcb687fb7e5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_b1739440c3bb1e7dc3252fcb687fb7e5"}, "created_at": 1743088112.322544, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_b1739440c3bb1e7dc3252fcb687fb7e5\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202006_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202006_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202006_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202006_citibike_tripdata_2_member_casual__member__casual.281045dad3": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202006_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_9a36fbce831188004f4cff7dbf2c26cd.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202006_citibike_tripdata_2_member_casual__member__casual.281045dad3", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202006_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_9a36fbce831188004f4cff7dbf2c26cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_9a36fbce831188004f4cff7dbf2c26cd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_9a36fbce831188004f4cff7dbf2c26cd"}, "created_at": 1743088112.325084, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_9a36fbce831188004f4cff7dbf2c26cd\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202006_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202006_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202006_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202007_citibike_tripdata_1_ride_id.b185028041": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202007_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202007_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202007_citibike_tripdata_1_ride_id.b185028041", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202007_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2020_202007_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.327845, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202007_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202007_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202007_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.fc0b2e3e77": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202007_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_60196ba3f8c308219f1894a7dd2e73a7.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.fc0b2e3e77", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202007_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_60196ba3f8c308219f1894a7dd2e73a7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_60196ba3f8c308219f1894a7dd2e73a7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_60196ba3f8c308219f1894a7dd2e73a7"}, "created_at": 1743088112.329035, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_60196ba3f8c308219f1894a7dd2e73a7\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202007_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202007_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202007_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_1_member_casual__member__casual.c29dfcd473": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202007_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_ebac866ef2ac403f4c445157dba62d09.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_1_member_casual__member__casual.c29dfcd473", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202007_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_ebac866ef2ac403f4c445157dba62d09", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_ebac866ef2ac403f4c445157dba62d09", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_ebac866ef2ac403f4c445157dba62d09"}, "created_at": 1743088112.33218, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_ebac866ef2ac403f4c445157dba62d09\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202007_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202007_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202007_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202007_citibike_tripdata_2_ride_id.cacf5d17c2": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202007_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202007_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202007_citibike_tripdata_2_ride_id.cacf5d17c2", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202007_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2020_202007_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.335076, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202007_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202007_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202007_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.048f185030": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202007_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_5e12951da932f124417a48dbdca20937.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.048f185030", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202007_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_5e12951da932f124417a48dbdca20937", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_5e12951da932f124417a48dbdca20937", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_5e12951da932f124417a48dbdca20937"}, "created_at": 1743088112.3360791, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_5e12951da932f124417a48dbdca20937\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202007_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202007_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202007_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_2_member_casual__member__casual.9067daae8b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202007_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_4963f21248baab26af9f3de1079429c5.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_2_member_casual__member__casual.9067daae8b", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202007_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_4963f21248baab26af9f3de1079429c5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_4963f21248baab26af9f3de1079429c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_4963f21248baab26af9f3de1079429c5"}, "created_at": 1743088112.338617, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_4963f21248baab26af9f3de1079429c5\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202007_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202007_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202007_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202007_citibike_tripdata_3_ride_id.ba55dee410": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202007_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202007_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202007_citibike_tripdata_3_ride_id.ba55dee410", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202007_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2020_202007_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.3414028, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202007_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202007_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202007_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.1463226fa0": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202007_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_eb4c03d9ab3e9cfa443c7bd3b8c3fdf0.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.1463226fa0", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202007_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_eb4c03d9ab3e9cfa443c7bd3b8c3fdf0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_eb4c03d9ab3e9cfa443c7bd3b8c3fdf0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_eb4c03d9ab3e9cfa443c7bd3b8c3fdf0"}, "created_at": 1743088112.342396, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_eb4c03d9ab3e9cfa443c7bd3b8c3fdf0\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202007_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202007_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202007_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_3_member_casual__member__casual.7b4d3cbacc": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202007_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_6aa9c059ad661ee3ecaefdd1fd04f0c9.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_3_member_casual__member__casual.7b4d3cbacc", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202007_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_6aa9c059ad661ee3ecaefdd1fd04f0c9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_6aa9c059ad661ee3ecaefdd1fd04f0c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_6aa9c059ad661ee3ecaefdd1fd04f0c9"}, "created_at": 1743088112.3450592, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_6aa9c059ad661ee3ecaefdd1fd04f0c9\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202007_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202007_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202007_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202008_citibike_tripdata_1_ride_id.86c7faaf1f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202008_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202008_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202008_citibike_tripdata_1_ride_id.86c7faaf1f", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202008_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2020_202008_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.347724, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202008_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202008_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202008_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.3669cd2eeb": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202008_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_3b1432fbb50f9986aa4eee5d982e5ed8.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.3669cd2eeb", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202008_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_3b1432fbb50f9986aa4eee5d982e5ed8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_3b1432fbb50f9986aa4eee5d982e5ed8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_3b1432fbb50f9986aa4eee5d982e5ed8"}, "created_at": 1743088112.348858, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_3b1432fbb50f9986aa4eee5d982e5ed8\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202008_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202008_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202008_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_1_member_casual__member__casual.9e70548609": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202008_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_170efc36407b3844ff30b8b029e10110.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_1_member_casual__member__casual.9e70548609", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202008_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_170efc36407b3844ff30b8b029e10110", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_170efc36407b3844ff30b8b029e10110", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_170efc36407b3844ff30b8b029e10110"}, "created_at": 1743088112.351525, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_170efc36407b3844ff30b8b029e10110\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202008_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202008_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202008_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202008_citibike_tripdata_2_ride_id.669577147b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202008_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202008_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202008_citibike_tripdata_2_ride_id.669577147b", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202008_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2020_202008_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.3543098, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202008_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202008_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202008_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.35791b39a0": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202008_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_8a901519a87166b464517c57df9c5103.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.35791b39a0", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202008_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_8a901519a87166b464517c57df9c5103", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_8a901519a87166b464517c57df9c5103", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_8a901519a87166b464517c57df9c5103"}, "created_at": 1743088112.3552809, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_8a901519a87166b464517c57df9c5103\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202008_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202008_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202008_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_2_member_casual__member__casual.8a344840dd": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202008_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_b9272224c19ad6f02f83429a191b2da7.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_2_member_casual__member__casual.8a344840dd", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202008_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_b9272224c19ad6f02f83429a191b2da7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_b9272224c19ad6f02f83429a191b2da7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_b9272224c19ad6f02f83429a191b2da7"}, "created_at": 1743088112.35779, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_b9272224c19ad6f02f83429a191b2da7\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202008_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202008_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202008_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202008_citibike_tripdata_3_ride_id.71862e4439": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202008_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202008_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202008_citibike_tripdata_3_ride_id.71862e4439", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202008_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2020_202008_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.360289, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202008_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202008_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202008_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.dc33adc6aa": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202008_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_0a62b40bb24150bc62766ff8a4c5ccd2.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.dc33adc6aa", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202008_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_0a62b40bb24150bc62766ff8a4c5ccd2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_0a62b40bb24150bc62766ff8a4c5ccd2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_0a62b40bb24150bc62766ff8a4c5ccd2"}, "created_at": 1743088112.361259, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_0a62b40bb24150bc62766ff8a4c5ccd2\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202008_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202008_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202008_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_3_member_casual__member__casual.4536657f3e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202008_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_d95ea46342f7e2887373738e6216d334.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_3_member_casual__member__casual.4536657f3e", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202008_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_d95ea46342f7e2887373738e6216d334", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_d95ea46342f7e2887373738e6216d334", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_d95ea46342f7e2887373738e6216d334"}, "created_at": 1743088112.363717, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_d95ea46342f7e2887373738e6216d334\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202008_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202008_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202008_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202009_citibike_tripdata_1_ride_id.f0fb99328b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202009_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202009_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202009_citibike_tripdata_1_ride_id.f0fb99328b", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202009_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2020_202009_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.3661282, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202009_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202009_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202009_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.fe0035d52e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202009_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_d0c6ce07d8c7a0737f29c57935cbf0f1.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.fe0035d52e", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202009_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_d0c6ce07d8c7a0737f29c57935cbf0f1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_d0c6ce07d8c7a0737f29c57935cbf0f1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_d0c6ce07d8c7a0737f29c57935cbf0f1"}, "created_at": 1743088112.367192, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_d0c6ce07d8c7a0737f29c57935cbf0f1\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202009_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202009_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202009_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_1_member_casual__member__casual.f853b35dfd": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202009_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_87a3c66f6e913496c57618df56760ccd.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_1_member_casual__member__casual.f853b35dfd", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202009_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_87a3c66f6e913496c57618df56760ccd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_87a3c66f6e913496c57618df56760ccd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_87a3c66f6e913496c57618df56760ccd"}, "created_at": 1743088112.369502, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_87a3c66f6e913496c57618df56760ccd\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202009_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202009_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202009_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202009_citibike_tripdata_2_ride_id.e4d1d77c74": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202009_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202009_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202009_citibike_tripdata_2_ride_id.e4d1d77c74", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202009_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2020_202009_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.373205, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202009_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202009_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202009_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.f75167f70f": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202009_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_34c8068c987c0936b03dcd4b5374ffd0.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.f75167f70f", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202009_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_34c8068c987c0936b03dcd4b5374ffd0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_34c8068c987c0936b03dcd4b5374ffd0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_34c8068c987c0936b03dcd4b5374ffd0"}, "created_at": 1743088112.374275, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_34c8068c987c0936b03dcd4b5374ffd0\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202009_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202009_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202009_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_2_member_casual__member__casual.42b16aa931": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202009_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_7c677ab77fe1c5f237a0870d4b0c5ba9.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_2_member_casual__member__casual.42b16aa931", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202009_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_7c677ab77fe1c5f237a0870d4b0c5ba9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_7c677ab77fe1c5f237a0870d4b0c5ba9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_7c677ab77fe1c5f237a0870d4b0c5ba9"}, "created_at": 1743088112.3771, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_7c677ab77fe1c5f237a0870d4b0c5ba9\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202009_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202009_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202009_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202009_citibike_tripdata_3_ride_id.17555a51e0": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202009_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202009_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202009_citibike_tripdata_3_ride_id.17555a51e0", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202009_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2020_202009_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.3796968, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202009_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202009_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202009_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.89137c2f23": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202009_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_581330e3ab2cb8e36ce3b49f7e39eb43.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.89137c2f23", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202009_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_581330e3ab2cb8e36ce3b49f7e39eb43", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_581330e3ab2cb8e36ce3b49f7e39eb43", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_581330e3ab2cb8e36ce3b49f7e39eb43"}, "created_at": 1743088112.38067, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_581330e3ab2cb8e36ce3b49f7e39eb43\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202009_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202009_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202009_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_3_member_casual__member__casual.06e4cc1a66": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202009_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_9b02cf4de38d598ee497d5477564223f.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_3_member_casual__member__casual.06e4cc1a66", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202009_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_9b02cf4de38d598ee497d5477564223f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_9b02cf4de38d598ee497d5477564223f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_9b02cf4de38d598ee497d5477564223f"}, "created_at": 1743088112.383301, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_9b02cf4de38d598ee497d5477564223f\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202009_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202009_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202009_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202010_citibike_tripdata_1_ride_id.6b5fc4748b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202010_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202010_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202010_citibike_tripdata_1_ride_id.6b5fc4748b", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202010_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2020_202010_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.38624, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202010_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202010_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202010_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.a1db329b10": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202010_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_ce16c1bdc97a02d03d8f761932bd75d1.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.a1db329b10", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202010_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_ce16c1bdc97a02d03d8f761932bd75d1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_ce16c1bdc97a02d03d8f761932bd75d1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_ce16c1bdc97a02d03d8f761932bd75d1"}, "created_at": 1743088112.3871858, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_ce16c1bdc97a02d03d8f761932bd75d1\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202010_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202010_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202010_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_1_member_casual__member__casual.c369b4ae5e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202010_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_9211f034b1a0b486299ca5e156008edb.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_1_member_casual__member__casual.c369b4ae5e", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202010_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_9211f034b1a0b486299ca5e156008edb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_9211f034b1a0b486299ca5e156008edb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_9211f034b1a0b486299ca5e156008edb"}, "created_at": 1743088112.38956, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_9211f034b1a0b486299ca5e156008edb\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202010_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202010_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202010_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202010_citibike_tripdata_2_ride_id.dd128b141b": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202010_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202010_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202010_citibike_tripdata_2_ride_id.dd128b141b", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202010_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2020_202010_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.392138, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202010_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202010_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202010_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.393d064471": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202010_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_8a5bcbc67cd5e988043a888e3363f6d4.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.393d064471", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202010_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_8a5bcbc67cd5e988043a888e3363f6d4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_8a5bcbc67cd5e988043a888e3363f6d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_8a5bcbc67cd5e988043a888e3363f6d4"}, "created_at": 1743088112.39307, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_8a5bcbc67cd5e988043a888e3363f6d4\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202010_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202010_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202010_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_2_member_casual__member__casual.a6fe045335": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202010_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_0f7fc78dcd127cd7c42c644b66979251.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_2_member_casual__member__casual.a6fe045335", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202010_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_0f7fc78dcd127cd7c42c644b66979251", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_0f7fc78dcd127cd7c42c644b66979251", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_0f7fc78dcd127cd7c42c644b66979251"}, "created_at": 1743088112.3963342, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_0f7fc78dcd127cd7c42c644b66979251\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202010_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202010_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202010_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202010_citibike_tripdata_3_ride_id.f9aed44f07": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202010_citibike_tripdata_3_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202010_citibike_tripdata_3_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202010_citibike_tripdata_3_ride_id.f9aed44f07", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202010_citibike_tripdata_3_ride_id"], "alias": "source_unique_staging_2020_202010_citibike_tripdata_3_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.399206, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202010_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202010_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202010_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.5b0cc5a5fb": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202010_citibike_tripdata_3_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_0515a9cbab90bd20759c17376e527c9e.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.5b0cc5a5fb", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202010_citibike_tripdata_3_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_0515a9cbab90bd20759c17376e527c9e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_0515a9cbab90bd20759c17376e527c9e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_0515a9cbab90bd20759c17376e527c9e"}, "created_at": 1743088112.4001641, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_0515a9cbab90bd20759c17376e527c9e\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202010_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202010_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202010_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_3_member_casual__member__casual.6887ca0f19": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202010_citibike_tripdata_3_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_f3eb4be9c822ddde7748fadc3c3b392f.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_3_member_casual__member__casual.6887ca0f19", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202010_citibike_tripdata_3_member_casual__member__casual"], "alias": "source_accepted_values_staging_f3eb4be9c822ddde7748fadc3c3b392f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_f3eb4be9c822ddde7748fadc3c3b392f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_f3eb4be9c822ddde7748fadc3c3b392f"}, "created_at": 1743088112.4027798, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_f3eb4be9c822ddde7748fadc3c3b392f\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202010_citibike_tripdata_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202010_citibike_tripdata_3"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202010_citibike_tripdata_3')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202011_citibike_tripdata_1_ride_id.977b9f4133": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202011_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202011_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202011_citibike_tripdata_1_ride_id.977b9f4133", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202011_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2020_202011_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.405437, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202011_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202011_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202011_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202011_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.144abdec5e": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202011_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_b7e5deb01c19cd9ac7cba422cb5af838.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202011_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.144abdec5e", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202011_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_b7e5deb01c19cd9ac7cba422cb5af838", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_b7e5deb01c19cd9ac7cba422cb5af838", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_b7e5deb01c19cd9ac7cba422cb5af838"}, "created_at": 1743088112.40641, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_b7e5deb01c19cd9ac7cba422cb5af838\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202011_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202011_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202011_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202011_citibike_tripdata_1_member_casual__member__casual.d078de3826": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202011_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_a1e113b7d0b2f7a78fa245b269797f70.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202011_citibike_tripdata_1_member_casual__member__casual.d078de3826", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202011_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_a1e113b7d0b2f7a78fa245b269797f70", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_a1e113b7d0b2f7a78fa245b269797f70", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_a1e113b7d0b2f7a78fa245b269797f70"}, "created_at": 1743088112.4089038, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_a1e113b7d0b2f7a78fa245b269797f70\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202011_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202011_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202011_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202011_citibike_tripdata_2_ride_id.bcd9c01318": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202011_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202011_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202011_citibike_tripdata_2_ride_id.bcd9c01318", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202011_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2020_202011_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.411665, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202011_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202011_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202011_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202011_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.582d3de83d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202011_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_ed5facb7ce532f55fd30757bbda6b1d9.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202011_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.582d3de83d", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202011_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_ed5facb7ce532f55fd30757bbda6b1d9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_ed5facb7ce532f55fd30757bbda6b1d9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_ed5facb7ce532f55fd30757bbda6b1d9"}, "created_at": 1743088112.412676, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_ed5facb7ce532f55fd30757bbda6b1d9\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202011_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202011_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202011_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202011_citibike_tripdata_2_member_casual__member__casual.76b0cbdd09": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202011_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_69d977bf1bcae3e06db740758b249bac.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202011_citibike_tripdata_2_member_casual__member__casual.76b0cbdd09", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202011_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_69d977bf1bcae3e06db740758b249bac", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_69d977bf1bcae3e06db740758b249bac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_69d977bf1bcae3e06db740758b249bac"}, "created_at": 1743088112.415335, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_69d977bf1bcae3e06db740758b249bac\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202011_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202011_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202011_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202012_citibike_tripdata_1_ride_id.07247252f8": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202012_citibike_tripdata_1_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202012_citibike_tripdata_1_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202012_citibike_tripdata_1_ride_id.07247252f8", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202012_citibike_tripdata_1_ride_id"], "alias": "source_unique_staging_2020_202012_citibike_tripdata_1_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.418118, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202012_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202012_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202012_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202012_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.081d8e1411": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202012_citibike_tripdata_1_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_fe74ea93e49776f4ab05389b34fcc79b.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202012_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.081d8e1411", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202012_citibike_tripdata_1_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_fe74ea93e49776f4ab05389b34fcc79b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_fe74ea93e49776f4ab05389b34fcc79b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_fe74ea93e49776f4ab05389b34fcc79b"}, "created_at": 1743088112.41925, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_fe74ea93e49776f4ab05389b34fcc79b\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202012_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202012_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202012_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202012_citibike_tripdata_1_member_casual__member__casual.a43499a4ec": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202012_citibike_tripdata_1_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_a02f7b911fdbca0ed99029be670dcae9.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202012_citibike_tripdata_1_member_casual__member__casual.a43499a4ec", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202012_citibike_tripdata_1_member_casual__member__casual"], "alias": "source_accepted_values_staging_a02f7b911fdbca0ed99029be670dcae9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_a02f7b911fdbca0ed99029be670dcae9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_a02f7b911fdbca0ed99029be670dcae9"}, "created_at": 1743088112.421752, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_a02f7b911fdbca0ed99029be670dcae9\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202012_citibike_tripdata_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202012_citibike_tripdata_1"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202012_citibike_tripdata_1')) }}"}, "namespace": null}}, "test.data_transform.source_unique_staging_2020_202012_citibike_tripdata_2_ride_id.995b0180fc": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_unique_staging_2020_202012_citibike_tripdata_2_ride_id", "resource_type": "test", "package_name": "data_transform", "path": "source_unique_staging_2020_202012_citibike_tripdata_2_ride_id.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_unique_staging_2020_202012_citibike_tripdata_2_ride_id.995b0180fc", "fqn": ["data_transform", "staging", "source_unique_staging_2020_202012_citibike_tripdata_2_ride_id"], "alias": "source_unique_staging_2020_202012_citibike_tripdata_2_ride_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743088112.4244008, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202012_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.data_transform.staging_2020.202012_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ride_id", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "ride_id", "model": "{{ get_where_subquery(source('staging_2020', '202012_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202012_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.3e6163dc4d": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202012_citibike_tripdata_2_rideable_type__electric_bike__classic_bike", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_d3254f5c67ae1a1c9dfa568db7c68256.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202012_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.3e6163dc4d", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202012_citibike_tripdata_2_rideable_type__electric_bike__classic_bike"], "alias": "source_accepted_values_staging_d3254f5c67ae1a1c9dfa568db7c68256", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_d3254f5c67ae1a1c9dfa568db7c68256", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_d3254f5c67ae1a1c9dfa568db7c68256"}, "created_at": 1743088112.425359, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_d3254f5c67ae1a1c9dfa568db7c68256\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202012_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202012_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rideable_type", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["electric_bike", "classic_bike"], "column_name": "rideable_type", "model": "{{ get_where_subquery(source('staging_2020', '202012_citibike_tripdata_2')) }}"}, "namespace": null}}, "test.data_transform.source_accepted_values_staging_2020_202012_citibike_tripdata_2_member_casual__member__casual.6cfabc4395": {"database": "dev", "schema": "main_dbt_test__audit", "name": "source_accepted_values_staging_2020_202012_citibike_tripdata_2_member_casual__member__casual", "resource_type": "test", "package_name": "data_transform", "path": "source_accepted_values_staging_cb2a54dc9ec96c3c2e45925036842f73.sql", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "test.data_transform.source_accepted_values_staging_2020_202012_citibike_tripdata_2_member_casual__member__casual.6cfabc4395", "fqn": ["data_transform", "staging", "source_accepted_values_staging_2020_202012_citibike_tripdata_2_member_casual__member__casual"], "alias": "source_accepted_values_staging_cb2a54dc9ec96c3c2e45925036842f73", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_staging_cb2a54dc9ec96c3c2e45925036842f73", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_accepted_values_staging_cb2a54dc9ec96c3c2e45925036842f73"}, "created_at": 1743088112.429054, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_staging_cb2a54dc9ec96c3c2e45925036842f73\") }}", "language": "sql", "refs": [], "sources": [["staging_2020", "202012_citibike_tripdata_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.data_transform.staging_2020.202012_citibike_tripdata_2"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "member_casual", "file_key_name": "sources.staging_2020", "attached_node": null, "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["member", "casual"], "column_name": "member_casual", "model": "{{ get_where_subquery(source('staging_2020', '202012_citibike_tripdata_2')) }}"}, "namespace": null}}}, "sources": {"source.data_transform.staging_2025.202501_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202501_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2025__sources.yml", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "source.data_transform.staging_2025.202501_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2025", "202501_citibike_tripdata_1"], "source_name": "staging_2025", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202501_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202501_citibike_tripdata_1\"", "created_at": 1743088111.173162, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2025.202501_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202501_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2025__sources.yml", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "source.data_transform.staging_2025.202501_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2025", "202501_citibike_tripdata_2"], "source_name": "staging_2025", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202501_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202501_citibike_tripdata_2\"", "created_at": 1743088111.1873322, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2025.202501_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202501_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2025__sources.yml", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "source.data_transform.staging_2025.202501_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2025", "202501_citibike_tripdata_3"], "source_name": "staging_2025", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202501_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202501_citibike_tripdata_3\"", "created_at": 1743088111.202126, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2025.202502_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202502_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2025__sources.yml", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "source.data_transform.staging_2025.202502_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2025", "202502_citibike_tripdata_1"], "source_name": "staging_2025", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202502_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202502_citibike_tripdata_1\"", "created_at": 1743088111.2095082, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2025.202502_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202502_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2025__sources.yml", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "source.data_transform.staging_2025.202502_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2025", "202502_citibike_tripdata_2"], "source_name": "staging_2025", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202502_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202502_citibike_tripdata_2\"", "created_at": 1743088111.2158809, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2025.202502_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202502_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2025__sources.yml", "original_file_path": "models/staging/_staging_2025__sources.yml", "unique_id": "source.data_transform.staging_2025.202502_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2025", "202502_citibike_tripdata_3"], "source_name": "staging_2025", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202502_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202502_citibike_tripdata_3\"", "created_at": 1743088111.222773, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202201_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202201_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202201_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2022", "202201_citibike_tripdata_1"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202201_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202201_citibike_tripdata_1\"", "created_at": 1743088111.2292979, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202201_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202201_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202201_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2022", "202201_citibike_tripdata_2"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202201_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202201_citibike_tripdata_2\"", "created_at": 1743088111.240912, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202202_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202202_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202202_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2022", "202202_citibike_tripdata_1"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202202_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202202_citibike_tripdata_1\"", "created_at": 1743088111.24739, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202202_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202202_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202202_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2022", "202202_citibike_tripdata_2"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202202_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202202_citibike_tripdata_2\"", "created_at": 1743088111.253972, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202203_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202203_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202203_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2022", "202203_citibike_tripdata_1"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202203_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202203_citibike_tripdata_1\"", "created_at": 1743088111.260236, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202203_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202203_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202203_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2022", "202203_citibike_tripdata_2"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202203_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202203_citibike_tripdata_2\"", "created_at": 1743088111.266717, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202204_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202204_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202204_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2022", "202204_citibike_tripdata_1"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202204_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202204_citibike_tripdata_1\"", "created_at": 1743088111.2764952, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202204_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202204_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202204_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2022", "202204_citibike_tripdata_2"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202204_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202204_citibike_tripdata_2\"", "created_at": 1743088111.2840059, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202204_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202204_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202204_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2022", "202204_citibike_tripdata_3"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202204_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202204_citibike_tripdata_3\"", "created_at": 1743088111.2906182, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202205_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202205_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202205_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2022", "202205_citibike_tripdata_1"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202205_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202205_citibike_tripdata_1\"", "created_at": 1743088111.296865, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202205_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202205_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202205_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2022", "202205_citibike_tripdata_2"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202205_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202205_citibike_tripdata_2\"", "created_at": 1743088111.303248, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202205_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202205_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202205_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2022", "202205_citibike_tripdata_3"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202205_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202205_citibike_tripdata_3\"", "created_at": 1743088111.3094459, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202206_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202206_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202206_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2022", "202206_citibike_tripdata_1"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202206_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202206_citibike_tripdata_1\"", "created_at": 1743088111.315725, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202206_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202206_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202206_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2022", "202206_citibike_tripdata_2"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202206_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202206_citibike_tripdata_2\"", "created_at": 1743088111.32188, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202206_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202206_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202206_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2022", "202206_citibike_tripdata_3"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202206_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202206_citibike_tripdata_3\"", "created_at": 1743088111.328043, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202206_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202206_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202206_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2022", "202206_citibike_tripdata_4"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202206_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202206_citibike_tripdata_4\"", "created_at": 1743088111.3455858, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202207_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202207_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202207_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2022", "202207_citibike_tripdata_1"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202207_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202207_citibike_tripdata_1\"", "created_at": 1743088111.35358, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202207_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202207_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202207_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2022", "202207_citibike_tripdata_2"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202207_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202207_citibike_tripdata_2\"", "created_at": 1743088111.3664908, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202207_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202207_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202207_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2022", "202207_citibike_tripdata_3"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202207_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202207_citibike_tripdata_3\"", "created_at": 1743088111.3728158, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202207_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202207_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202207_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2022", "202207_citibike_tripdata_4"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202207_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202207_citibike_tripdata_4\"", "created_at": 1743088111.379104, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202208_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202208_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202208_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2022", "202208_citibike_tripdata_1"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202208_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202208_citibike_tripdata_1\"", "created_at": 1743088111.385513, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202208_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202208_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202208_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2022", "202208_citibike_tripdata_2"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202208_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202208_citibike_tripdata_2\"", "created_at": 1743088111.391696, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202208_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202208_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202208_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2022", "202208_citibike_tripdata_3"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202208_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202208_citibike_tripdata_3\"", "created_at": 1743088111.398025, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202208_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202208_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202208_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2022", "202208_citibike_tripdata_4"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202208_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202208_citibike_tripdata_4\"", "created_at": 1743088111.404806, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202209_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202209_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202209_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2022", "202209_citibike_tripdata_1"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202209_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202209_citibike_tripdata_1\"", "created_at": 1743088111.410999, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202209_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202209_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202209_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2022", "202209_citibike_tripdata_2"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202209_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202209_citibike_tripdata_2\"", "created_at": 1743088111.417386, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202209_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202209_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202209_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2022", "202209_citibike_tripdata_3"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202209_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202209_citibike_tripdata_3\"", "created_at": 1743088111.42362, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202209_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202209_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202209_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2022", "202209_citibike_tripdata_4"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202209_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202209_citibike_tripdata_4\"", "created_at": 1743088111.4299588, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202210_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202210_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202210_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2022", "202210_citibike_tripdata_1"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202210_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202210_citibike_tripdata_1\"", "created_at": 1743088111.436169, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202210_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202210_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202210_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2022", "202210_citibike_tripdata_2"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202210_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202210_citibike_tripdata_2\"", "created_at": 1743088111.442357, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202210_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202210_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202210_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2022", "202210_citibike_tripdata_3"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202210_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202210_citibike_tripdata_3\"", "created_at": 1743088111.4486809, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202211_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202211_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202211_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2022", "202211_citibike_tripdata_1"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202211_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202211_citibike_tripdata_1\"", "created_at": 1743088111.463103, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202211_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202211_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202211_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2022", "202211_citibike_tripdata_2"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202211_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202211_citibike_tripdata_2\"", "created_at": 1743088111.470252, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202211_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202211_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202211_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2022", "202211_citibike_tripdata_3"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202211_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202211_citibike_tripdata_3\"", "created_at": 1743088111.476567, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202212_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202212_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202212_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2022", "202212_citibike_tripdata_1"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202212_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202212_citibike_tripdata_1\"", "created_at": 1743088111.4828281, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2022.202212_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202212_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2022__sources.yml", "original_file_path": "models/staging/_staging_2022__sources.yml", "unique_id": "source.data_transform.staging_2022.202212_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2022", "202212_citibike_tripdata_2"], "source_name": "staging_2022", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202212_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202212_citibike_tripdata_2\"", "created_at": 1743088111.4892192, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202301_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202301_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202301_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2023", "202301_citibike_tripdata_1"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202301_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202301_citibike_tripdata_1\"", "created_at": 1743088111.49549, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202301_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202301_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202301_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2023", "202301_citibike_tripdata_2"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202301_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202301_citibike_tripdata_2\"", "created_at": 1743088111.5017128, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202302_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202302_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202302_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2023", "202302_citibike_tripdata_1"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202302_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202302_citibike_tripdata_1\"", "created_at": 1743088111.50811, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202302_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202302_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202302_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2023", "202302_citibike_tripdata_2"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202302_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202302_citibike_tripdata_2\"", "created_at": 1743088111.514352, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202303_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202303_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202303_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2023", "202303_citibike_tripdata_1"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202303_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202303_citibike_tripdata_1\"", "created_at": 1743088111.52123, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202303_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202303_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202303_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2023", "202303_citibike_tripdata_2"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202303_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202303_citibike_tripdata_2\"", "created_at": 1743088111.527498, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202303_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202303_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202303_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2023", "202303_citibike_tripdata_3"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202303_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202303_citibike_tripdata_3\"", "created_at": 1743088111.533727, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202304_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202304_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202304_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2023", "202304_citibike_tripdata_1"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202304_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202304_citibike_tripdata_1\"", "created_at": 1743088111.540131, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202304_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202304_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202304_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2023", "202304_citibike_tripdata_2"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202304_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202304_citibike_tripdata_2\"", "created_at": 1743088111.546376, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202304_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202304_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202304_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2023", "202304_citibike_tripdata_3"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202304_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202304_citibike_tripdata_3\"", "created_at": 1743088111.552598, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202305_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202305_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202305_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2023", "202305_citibike_tripdata_1"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202305_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202305_citibike_tripdata_1\"", "created_at": 1743088111.5589602, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202305_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202305_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202305_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2023", "202305_citibike_tripdata_2"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202305_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202305_citibike_tripdata_2\"", "created_at": 1743088111.5651789, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202305_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202305_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202305_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2023", "202305_citibike_tripdata_3"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202305_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202305_citibike_tripdata_3\"", "created_at": 1743088111.571498, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202305_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202305_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202305_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2023", "202305_citibike_tripdata_4"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202305_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202305_citibike_tripdata_4\"", "created_at": 1743088111.579245, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202306_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202306_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202306_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2023", "202306_citibike_tripdata_1"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202306_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202306_citibike_tripdata_1\"", "created_at": 1743088111.586022, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202306_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202306_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202306_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2023", "202306_citibike_tripdata_2"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202306_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202306_citibike_tripdata_2\"", "created_at": 1743088111.5925708, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202306_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202306_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202306_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2023", "202306_citibike_tripdata_3"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202306_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202306_citibike_tripdata_3\"", "created_at": 1743088111.598885, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202306_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202306_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202306_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2023", "202306_citibike_tripdata_4"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202306_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202306_citibike_tripdata_4\"", "created_at": 1743088111.6051872, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202307_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202307_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202307_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2023", "202307_citibike_tripdata_1"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202307_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202307_citibike_tripdata_1\"", "created_at": 1743088111.611626, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202307_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202307_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202307_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2023", "202307_citibike_tripdata_2"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202307_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202307_citibike_tripdata_2\"", "created_at": 1743088111.618057, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202307_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202307_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202307_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2023", "202307_citibike_tripdata_3"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202307_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202307_citibike_tripdata_3\"", "created_at": 1743088111.6246111, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202307_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202307_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202307_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2023", "202307_citibike_tripdata_4"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202307_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202307_citibike_tripdata_4\"", "created_at": 1743088111.6313689, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202308_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202308_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202308_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2023", "202308_citibike_tripdata_1"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202308_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202308_citibike_tripdata_1\"", "created_at": 1743088111.638307, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202308_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202308_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202308_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2023", "202308_citibike_tripdata_2"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202308_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202308_citibike_tripdata_2\"", "created_at": 1743088111.644952, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202308_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202308_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202308_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2023", "202308_citibike_tripdata_3"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202308_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202308_citibike_tripdata_3\"", "created_at": 1743088111.651631, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202308_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202308_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202308_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2023", "202308_citibike_tripdata_4"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202308_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202308_citibike_tripdata_4\"", "created_at": 1743088111.658462, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202309_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202309_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202309_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2023", "202309_citibike_tripdata_1"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202309_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202309_citibike_tripdata_1\"", "created_at": 1743088111.664918, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202309_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202309_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202309_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2023", "202309_citibike_tripdata_2"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202309_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202309_citibike_tripdata_2\"", "created_at": 1743088111.671251, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202309_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202309_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202309_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2023", "202309_citibike_tripdata_3"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202309_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202309_citibike_tripdata_3\"", "created_at": 1743088111.677666, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202309_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202309_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202309_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2023", "202309_citibike_tripdata_4"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202309_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202309_citibike_tripdata_4\"", "created_at": 1743088111.683935, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202310_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202310_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202310_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2023", "202310_citibike_tripdata_1"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202310_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202310_citibike_tripdata_1\"", "created_at": 1743088111.6901062, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202310_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202310_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202310_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2023", "202310_citibike_tripdata_2"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202310_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202310_citibike_tripdata_2\"", "created_at": 1743088111.6968598, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202310_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202310_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202310_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2023", "202310_citibike_tripdata_3"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202310_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202310_citibike_tripdata_3\"", "created_at": 1743088111.703101, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202310_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202310_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202310_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2023", "202310_citibike_tripdata_4"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202310_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202310_citibike_tripdata_4\"", "created_at": 1743088111.7093172, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202311_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202311_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202311_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2023", "202311_citibike_tripdata_1"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202311_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202311_citibike_tripdata_1\"", "created_at": 1743088111.7157419, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202311_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202311_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202311_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2023", "202311_citibike_tripdata_2"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202311_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202311_citibike_tripdata_2\"", "created_at": 1743088111.722219, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202311_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202311_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202311_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2023", "202311_citibike_tripdata_3"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202311_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202311_citibike_tripdata_3\"", "created_at": 1743088111.72892, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202312_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202312_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202312_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2023", "202312_citibike_tripdata_1"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202312_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202312_citibike_tripdata_1\"", "created_at": 1743088111.735803, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202312_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202312_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202312_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2023", "202312_citibike_tripdata_2"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202312_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202312_citibike_tripdata_2\"", "created_at": 1743088111.742249, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2023.202312_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202312_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2023__sources.yml", "original_file_path": "models/staging/_staging_2023__sources.yml", "unique_id": "source.data_transform.staging_2023.202312_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2023", "202312_citibike_tripdata_3"], "source_name": "staging_2023", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202312_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202312_citibike_tripdata_3\"", "created_at": 1743088111.749259, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202401_citibike_tripdata": {"database": "dev", "schema": "staging", "name": "202401_citibike_tripdata", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202401_citibike_tripdata", "fqn": ["data_transform", "staging", "staging_2024", "202401_citibike_tripdata"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202401_citibike_tripdata", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202401_citibike_tripdata\"", "created_at": 1743088111.755435, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202402_citibike_tripdata": {"database": "dev", "schema": "staging", "name": "202402_citibike_tripdata", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202402_citibike_tripdata", "fqn": ["data_transform", "staging", "staging_2024", "202402_citibike_tripdata"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202402_citibike_tripdata", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202402_citibike_tripdata\"", "created_at": 1743088111.76141, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202403_citibike_tripdata": {"database": "dev", "schema": "staging", "name": "202403_citibike_tripdata", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202403_citibike_tripdata", "fqn": ["data_transform", "staging", "staging_2024", "202403_citibike_tripdata"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202403_citibike_tripdata", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202403_citibike_tripdata\"", "created_at": 1743088111.7678678, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202404_citibike_tripdata": {"database": "dev", "schema": "staging", "name": "202404_citibike_tripdata", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202404_citibike_tripdata", "fqn": ["data_transform", "staging", "staging_2024", "202404_citibike_tripdata"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202404_citibike_tripdata", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202404_citibike_tripdata\"", "created_at": 1743088111.774166, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202405_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202405_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202405_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2024", "202405_citibike_tripdata_1"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202405_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202405_citibike_tripdata_1\"", "created_at": 1743088111.7805161, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202405_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202405_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202405_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2024", "202405_citibike_tripdata_2"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202405_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202405_citibike_tripdata_2\"", "created_at": 1743088111.7870011, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202405_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202405_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202405_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2024", "202405_citibike_tripdata_3"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202405_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202405_citibike_tripdata_3\"", "created_at": 1743088111.7930398, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202405_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202405_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202405_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2024", "202405_citibike_tripdata_4"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202405_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202405_citibike_tripdata_4\"", "created_at": 1743088111.799647, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202405_citibike_tripdata_5": {"database": "dev", "schema": "staging", "name": "202405_citibike_tripdata_5", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202405_citibike_tripdata_5", "fqn": ["data_transform", "staging", "staging_2024", "202405_citibike_tripdata_5"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202405_citibike_tripdata_5", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202405_citibike_tripdata_5\"", "created_at": 1743088111.8064551, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202406_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202406_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202406_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2024", "202406_citibike_tripdata_1"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202406_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202406_citibike_tripdata_1\"", "created_at": 1743088111.812768, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202406_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202406_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202406_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2024", "202406_citibike_tripdata_2"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202406_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202406_citibike_tripdata_2\"", "created_at": 1743088111.819509, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202406_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202406_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202406_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2024", "202406_citibike_tripdata_3"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202406_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202406_citibike_tripdata_3\"", "created_at": 1743088111.8256068, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202406_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202406_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202406_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2024", "202406_citibike_tripdata_4"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202406_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202406_citibike_tripdata_4\"", "created_at": 1743088111.8330922, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202406_citibike_tripdata_5": {"database": "dev", "schema": "staging", "name": "202406_citibike_tripdata_5", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202406_citibike_tripdata_5", "fqn": ["data_transform", "staging", "staging_2024", "202406_citibike_tripdata_5"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202406_citibike_tripdata_5", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202406_citibike_tripdata_5\"", "created_at": 1743088111.839493, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202407_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202407_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202407_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2024", "202407_citibike_tripdata_1"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202407_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202407_citibike_tripdata_1\"", "created_at": 1743088111.8458052, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202407_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202407_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202407_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2024", "202407_citibike_tripdata_2"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202407_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202407_citibike_tripdata_2\"", "created_at": 1743088111.8524742, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202407_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202407_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202407_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2024", "202407_citibike_tripdata_3"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202407_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202407_citibike_tripdata_3\"", "created_at": 1743088111.858578, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202407_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202407_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202407_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2024", "202407_citibike_tripdata_4"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202407_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202407_citibike_tripdata_4\"", "created_at": 1743088111.865343, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202407_citibike_tripdata_5": {"database": "dev", "schema": "staging", "name": "202407_citibike_tripdata_5", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202407_citibike_tripdata_5", "fqn": ["data_transform", "staging", "staging_2024", "202407_citibike_tripdata_5"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202407_citibike_tripdata_5", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202407_citibike_tripdata_5\"", "created_at": 1743088111.871808, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202408_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202408_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202408_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2024", "202408_citibike_tripdata_1"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202408_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202408_citibike_tripdata_1\"", "created_at": 1743088111.8780742, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202408_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202408_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202408_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2024", "202408_citibike_tripdata_2"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202408_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202408_citibike_tripdata_2\"", "created_at": 1743088111.884705, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202408_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202408_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202408_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2024", "202408_citibike_tripdata_3"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202408_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202408_citibike_tripdata_3\"", "created_at": 1743088111.8909, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202408_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202408_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202408_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2024", "202408_citibike_tripdata_4"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202408_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202408_citibike_tripdata_4\"", "created_at": 1743088111.897629, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202408_citibike_tripdata_5": {"database": "dev", "schema": "staging", "name": "202408_citibike_tripdata_5", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202408_citibike_tripdata_5", "fqn": ["data_transform", "staging", "staging_2024", "202408_citibike_tripdata_5"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202408_citibike_tripdata_5", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202408_citibike_tripdata_5\"", "created_at": 1743088111.904167, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202409_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202409_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202409_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2024", "202409_citibike_tripdata_1"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202409_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202409_citibike_tripdata_1\"", "created_at": 1743088111.9104729, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202409_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202409_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202409_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2024", "202409_citibike_tripdata_2"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202409_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202409_citibike_tripdata_2\"", "created_at": 1743088111.9167428, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202409_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202409_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202409_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2024", "202409_citibike_tripdata_3"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202409_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202409_citibike_tripdata_3\"", "created_at": 1743088111.923955, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202409_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202409_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202409_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2024", "202409_citibike_tripdata_4"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202409_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202409_citibike_tripdata_4\"", "created_at": 1743088111.930506, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202409_citibike_tripdata_5": {"database": "dev", "schema": "staging", "name": "202409_citibike_tripdata_5", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202409_citibike_tripdata_5", "fqn": ["data_transform", "staging", "staging_2024", "202409_citibike_tripdata_5"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202409_citibike_tripdata_5", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202409_citibike_tripdata_5\"", "created_at": 1743088111.936733, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202410_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202410_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202410_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2024", "202410_citibike_tripdata_1"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202410_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202410_citibike_tripdata_1\"", "created_at": 1743088111.9433699, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202410_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202410_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202410_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2024", "202410_citibike_tripdata_2"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202410_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202410_citibike_tripdata_2\"", "created_at": 1743088111.949864, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202410_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202410_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202410_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2024", "202410_citibike_tripdata_3"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202410_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202410_citibike_tripdata_3\"", "created_at": 1743088111.956416, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202410_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202410_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202410_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2024", "202410_citibike_tripdata_4"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202410_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202410_citibike_tripdata_4\"", "created_at": 1743088111.962719, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202410_citibike_tripdata_5": {"database": "dev", "schema": "staging", "name": "202410_citibike_tripdata_5", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202410_citibike_tripdata_5", "fqn": ["data_transform", "staging", "staging_2024", "202410_citibike_tripdata_5"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202410_citibike_tripdata_5", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202410_citibike_tripdata_5\"", "created_at": 1743088111.9688141, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202410_citibike_tripdata_6": {"database": "dev", "schema": "staging", "name": "202410_citibike_tripdata_6", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202410_citibike_tripdata_6", "fqn": ["data_transform", "staging", "staging_2024", "202410_citibike_tripdata_6"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202410_citibike_tripdata_6", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202410_citibike_tripdata_6\"", "created_at": 1743088111.975967, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202411_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202411_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202411_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2024", "202411_citibike_tripdata_1"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202411_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202411_citibike_tripdata_1\"", "created_at": 1743088111.982473, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202411_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202411_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202411_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2024", "202411_citibike_tripdata_2"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202411_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202411_citibike_tripdata_2\"", "created_at": 1743088111.9887621, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202411_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202411_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202411_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2024", "202411_citibike_tripdata_3"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202411_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202411_citibike_tripdata_3\"", "created_at": 1743088111.995683, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202411_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202411_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202411_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2024", "202411_citibike_tripdata_4"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202411_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202411_citibike_tripdata_4\"", "created_at": 1743088112.002217, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202412_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202412_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202412_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2024", "202412_citibike_tripdata_1"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202412_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202412_citibike_tripdata_1\"", "created_at": 1743088112.008716, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202412_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202412_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202412_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2024", "202412_citibike_tripdata_2"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202412_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202412_citibike_tripdata_2\"", "created_at": 1743088112.015002, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2024.202412_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202412_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2024__sources.yml", "original_file_path": "models/staging/_staging_2024__sources.yml", "unique_id": "source.data_transform.staging_2024.202412_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2024", "202412_citibike_tripdata_3"], "source_name": "staging_2024", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202412_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202412_citibike_tripdata_3\"", "created_at": 1743088112.0215192, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202101_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202101_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202101_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2021", "202101_citibike_tripdata_1"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202101_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202101_citibike_tripdata_1\"", "created_at": 1743088112.027769, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202101_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202101_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202101_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2021", "202101_citibike_tripdata_2"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202101_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202101_citibike_tripdata_2\"", "created_at": 1743088112.034184, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202102_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202102_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202102_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2021", "202102_citibike_tripdata_1"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202102_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202102_citibike_tripdata_1\"", "created_at": 1743088112.0412102, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202103_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202103_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202103_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2021", "202103_citibike_tripdata_1"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202103_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202103_citibike_tripdata_1\"", "created_at": 1743088112.0477812, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202103_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202103_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202103_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2021", "202103_citibike_tripdata_2"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202103_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202103_citibike_tripdata_2\"", "created_at": 1743088112.054327, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202104_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202104_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202104_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2021", "202104_citibike_tripdata_1"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202104_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202104_citibike_tripdata_1\"", "created_at": 1743088112.0605068, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202104_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202104_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202104_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2021", "202104_citibike_tripdata_2"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202104_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202104_citibike_tripdata_2\"", "created_at": 1743088112.067774, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202104_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202104_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202104_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2021", "202104_citibike_tripdata_3"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202104_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202104_citibike_tripdata_3\"", "created_at": 1743088112.074181, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202105_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202105_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202105_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2021", "202105_citibike_tripdata_1"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202105_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202105_citibike_tripdata_1\"", "created_at": 1743088112.080668, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202105_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202105_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202105_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2021", "202105_citibike_tripdata_2"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202105_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202105_citibike_tripdata_2\"", "created_at": 1743088112.087362, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202105_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202105_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202105_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2021", "202105_citibike_tripdata_3"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202105_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202105_citibike_tripdata_3\"", "created_at": 1743088112.0944262, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202106_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202106_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202106_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2021", "202106_citibike_tripdata_1"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202106_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202106_citibike_tripdata_1\"", "created_at": 1743088112.1007721, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202106_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202106_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202106_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2021", "202106_citibike_tripdata_2"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202106_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202106_citibike_tripdata_2\"", "created_at": 1743088112.107109, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202106_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202106_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202106_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2021", "202106_citibike_tripdata_3"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202106_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202106_citibike_tripdata_3\"", "created_at": 1743088112.113583, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202106_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202106_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202106_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2021", "202106_citibike_tripdata_4"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202106_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202106_citibike_tripdata_4\"", "created_at": 1743088112.120409, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202107_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202107_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202107_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2021", "202107_citibike_tripdata_1"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202107_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202107_citibike_tripdata_1\"", "created_at": 1743088112.127039, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202107_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202107_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202107_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2021", "202107_citibike_tripdata_2"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202107_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202107_citibike_tripdata_2\"", "created_at": 1743088112.133167, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202107_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202107_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202107_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2021", "202107_citibike_tripdata_3"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202107_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202107_citibike_tripdata_3\"", "created_at": 1743088112.1396532, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202107_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202107_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202107_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2021", "202107_citibike_tripdata_4"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202107_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202107_citibike_tripdata_4\"", "created_at": 1743088112.146455, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202108_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202108_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202108_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2021", "202108_citibike_tripdata_1"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202108_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202108_citibike_tripdata_1\"", "created_at": 1743088112.1532521, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202108_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202108_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202108_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2021", "202108_citibike_tripdata_2"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202108_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202108_citibike_tripdata_2\"", "created_at": 1743088112.1602519, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202108_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202108_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202108_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2021", "202108_citibike_tripdata_3"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202108_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202108_citibike_tripdata_3\"", "created_at": 1743088112.166731, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202108_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202108_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202108_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2021", "202108_citibike_tripdata_4"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202108_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202108_citibike_tripdata_4\"", "created_at": 1743088112.173088, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202109_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202109_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202109_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2021", "202109_citibike_tripdata_1"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202109_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202109_citibike_tripdata_1\"", "created_at": 1743088112.1794848, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202109_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202109_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202109_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2021", "202109_citibike_tripdata_2"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202109_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202109_citibike_tripdata_2\"", "created_at": 1743088112.1858912, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202109_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202109_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202109_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2021", "202109_citibike_tripdata_3"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202109_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202109_citibike_tripdata_3\"", "created_at": 1743088112.191711, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202109_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202109_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202109_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2021", "202109_citibike_tripdata_4"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202109_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202109_citibike_tripdata_4\"", "created_at": 1743088112.1989279, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202110_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202110_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202110_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2021", "202110_citibike_tripdata_1"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202110_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202110_citibike_tripdata_1\"", "created_at": 1743088112.205973, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202110_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202110_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202110_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2021", "202110_citibike_tripdata_2"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202110_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202110_citibike_tripdata_2\"", "created_at": 1743088112.212286, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202110_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202110_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202110_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2021", "202110_citibike_tripdata_3"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202110_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202110_citibike_tripdata_3\"", "created_at": 1743088112.218858, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202110_citibike_tripdata_4": {"database": "dev", "schema": "staging", "name": "202110_citibike_tripdata_4", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202110_citibike_tripdata_4", "fqn": ["data_transform", "staging", "staging_2021", "202110_citibike_tripdata_4"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202110_citibike_tripdata_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202110_citibike_tripdata_4\"", "created_at": 1743088112.225014, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202111_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202111_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202111_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2021", "202111_citibike_tripdata_1"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202111_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202111_citibike_tripdata_1\"", "created_at": 1743088112.231376, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202111_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202111_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202111_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2021", "202111_citibike_tripdata_2"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202111_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202111_citibike_tripdata_2\"", "created_at": 1743088112.237665, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202111_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202111_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202111_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2021", "202111_citibike_tripdata_3"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202111_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202111_citibike_tripdata_3\"", "created_at": 1743088112.243924, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202112_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202112_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202112_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2021", "202112_citibike_tripdata_1"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202112_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202112_citibike_tripdata_1\"", "created_at": 1743088112.250433, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2021.202112_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202112_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2021__sources.yml", "original_file_path": "models/staging/_staging_2021__sources.yml", "unique_id": "source.data_transform.staging_2021.202112_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2021", "202112_citibike_tripdata_2"], "source_name": "staging_2021", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202112_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202112_citibike_tripdata_2\"", "created_at": 1743088112.256608, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202001_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202001_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202001_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2020", "202001_citibike_tripdata_1"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202001_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202001_citibike_tripdata_1\"", "created_at": 1743088112.263235, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202001_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202001_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202001_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2020", "202001_citibike_tripdata_2"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202001_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202001_citibike_tripdata_2\"", "created_at": 1743088112.269621, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202002_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202002_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202002_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2020", "202002_citibike_tripdata_1"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202002_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202002_citibike_tripdata_1\"", "created_at": 1743088112.27584, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202002_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202002_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202002_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2020", "202002_citibike_tripdata_2"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202002_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202002_citibike_tripdata_2\"", "created_at": 1743088112.2821581, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202003_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202003_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202003_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2020", "202003_citibike_tripdata_1"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202003_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202003_citibike_tripdata_1\"", "created_at": 1743088112.288585, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202003_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202003_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202003_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2020", "202003_citibike_tripdata_2"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202003_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202003_citibike_tripdata_2\"", "created_at": 1743088112.2947998, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202004_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202004_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202004_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2020", "202004_citibike_tripdata_1"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202004_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202004_citibike_tripdata_1\"", "created_at": 1743088112.301203, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202005_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202005_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202005_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2020", "202005_citibike_tripdata_1"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202005_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202005_citibike_tripdata_1\"", "created_at": 1743088112.307452, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202005_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202005_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202005_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2020", "202005_citibike_tripdata_2"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202005_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202005_citibike_tripdata_2\"", "created_at": 1743088112.3137221, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202006_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202006_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202006_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2020", "202006_citibike_tripdata_1"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202006_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202006_citibike_tripdata_1\"", "created_at": 1743088112.32097, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202006_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202006_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202006_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2020", "202006_citibike_tripdata_2"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202006_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202006_citibike_tripdata_2\"", "created_at": 1743088112.327004, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202007_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202007_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202007_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2020", "202007_citibike_tripdata_1"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202007_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202007_citibike_tripdata_1\"", "created_at": 1743088112.334419, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202007_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202007_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202007_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2020", "202007_citibike_tripdata_2"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202007_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202007_citibike_tripdata_2\"", "created_at": 1743088112.3407738, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202007_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202007_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202007_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2020", "202007_citibike_tripdata_3"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202007_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202007_citibike_tripdata_3\"", "created_at": 1743088112.3470871, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202008_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202008_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202008_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2020", "202008_citibike_tripdata_1"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202008_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202008_citibike_tripdata_1\"", "created_at": 1743088112.353703, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202008_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202008_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202008_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2020", "202008_citibike_tripdata_2"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202008_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202008_citibike_tripdata_2\"", "created_at": 1743088112.359694, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202008_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202008_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202008_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2020", "202008_citibike_tripdata_3"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202008_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202008_citibike_tripdata_3\"", "created_at": 1743088112.365551, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202009_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202009_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202009_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2020", "202009_citibike_tripdata_1"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202009_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202009_citibike_tripdata_1\"", "created_at": 1743088112.372459, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202009_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202009_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202009_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2020", "202009_citibike_tripdata_2"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202009_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202009_citibike_tripdata_2\"", "created_at": 1743088112.379086, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202009_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202009_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202009_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2020", "202009_citibike_tripdata_3"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202009_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202009_citibike_tripdata_3\"", "created_at": 1743088112.38546, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202010_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202010_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202010_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2020", "202010_citibike_tripdata_1"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202010_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202010_citibike_tripdata_1\"", "created_at": 1743088112.391551, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202010_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202010_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202010_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2020", "202010_citibike_tripdata_2"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202010_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202010_citibike_tripdata_2\"", "created_at": 1743088112.398582, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202010_citibike_tripdata_3": {"database": "dev", "schema": "staging", "name": "202010_citibike_tripdata_3", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202010_citibike_tripdata_3", "fqn": ["data_transform", "staging", "staging_2020", "202010_citibike_tripdata_3"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202010_citibike_tripdata_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202010_citibike_tripdata_3\"", "created_at": 1743088112.404823, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202011_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202011_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202011_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2020", "202011_citibike_tripdata_1"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202011_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202011_citibike_tripdata_1\"", "created_at": 1743088112.411036, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202011_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202011_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202011_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2020", "202011_citibike_tripdata_2"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202011_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202011_citibike_tripdata_2\"", "created_at": 1743088112.4174888, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202012_citibike_tripdata_1": {"database": "dev", "schema": "staging", "name": "202012_citibike_tripdata_1", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202012_citibike_tripdata_1", "fqn": ["data_transform", "staging", "staging_2020", "202012_citibike_tripdata_1"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202012_citibike_tripdata_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202012_citibike_tripdata_1\"", "created_at": 1743088112.423797, "unrendered_database": "dev", "unrendered_schema": "staging"}, "source.data_transform.staging_2020.202012_citibike_tripdata_2": {"database": "dev", "schema": "staging", "name": "202012_citibike_tripdata_2", "resource_type": "source", "package_name": "data_transform", "path": "models/staging/_staging_2020__sources.yml", "original_file_path": "models/staging/_staging_2020__sources.yml", "unique_id": "source.data_transform.staging_2020.202012_citibike_tripdata_2", "fqn": ["data_transform", "staging", "staging_2020", "202012_citibike_tripdata_2"], "source_name": "staging_2020", "source_description": "Raw .csv files from CitiBike", "loader": "", "identifier": "202012_citibike_tripdata_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title.", "columns": {"ride_id": {"name": "ride_id", "description": "Unique identifier for a ride", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "rideable_type": {"name": "rideable_type", "description": "An enum, describing whether the bike was electric or acoustic", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "started_at": {"name": "started_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ended_at": {"name": "ended_at", "description": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_name": {"name": "start_station_name", "description": "The name of the station where the ride started, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_station_id": {"name": "start_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_name": {"name": "end_station_name", "description": "The name of the station where the ride ended, usually an intersection.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_station_id": {"name": "end_station_id", "description": "Unique identifier for the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lat": {"name": "start_lat", "description": "Latitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "start_lng": {"name": "start_lng", "description": "Longitude of the starting station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lat": {"name": "end_lat", "description": "Latitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "end_lng": {"name": "end_lng", "description": "Longitude of the ending station", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "member_casual": {"name": "member_casual", "description": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"staging\".\"202012_citibike_tripdata_2\"", "created_at": 1743088112.431539, "unrendered_database": "dev", "unrendered_schema": "staging"}}, "macros": {"macro.data_transform.format_date": {"name": "format_date", "resource_type": "macro", "package_name": "data_transform", "path": "macros/format_date.sql", "original_file_path": "macros/format_date.sql", "unique_id": "macro.data_transform.format_date", "macro_sql": "{% macro format_date(column_name) %}\n    (\n        coalesce(\n            date_trunc('second',try_strptime({{ column_name }}, '%Y-%m-%d %H:%M:%S.%f')),\n            date_trunc('second',try_strptime({{ column_name }}, '%Y-%m-%d %H:%M:%S'))\n        )\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Convert string to timestamp, and format to \"second\" precision.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://macros/_macros__schema.yml", "arguments": [{"name": "column_name", "type": "string", "description": "The column you want to convert to timestamp. Must be in this format - '%Y-%m-%d %H:%M:%S.%f'"}], "created_at": 1743088111.162945, "supported_languages": null}, "macro.data_transform.remove_unwanted_station_ids": {"name": "remove_unwanted_station_ids", "resource_type": "macro", "package_name": "data_transform", "path": "macros/remove_unwanted_station_ids.sql", "original_file_path": "macros/remove_unwanted_station_ids.sql", "unique_id": "macro.data_transform.remove_unwanted_station_ids", "macro_sql": "{% macro remove_unwanted_station_ids(column_name) %}\n    where {{ column_name }} not in ('Lab - NYC', 'SYS032') and {{ column_name }} is not Null\n{% endmacro %}", "depends_on": {"macros": []}, "description": "As of March 2025, there are three `start_station_id` values that have inconsistent `start_station_name` values, as well as inconsistent `start_lat` and `start_lng`. To simplify determining whether a `start_station_id` falls in the Congestion Pricing Zone, it's easier to remove records with these values. The impact is small at around ~50K records. For context, `fct_citibike_rides` has ~160M records. So ultimately, across all data, about 0.0003% of records are removed.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://macros/_macros__schema.yml", "arguments": [{"name": "column_name", "type": "string", "description": "Column to apply the remove condition, must be <some_string>_station_id"}], "created_at": 1743088111.163199, "supported_languages": null}, "macro.data_transform.create_station_groups": {"name": "create_station_groups", "resource_type": "macro", "package_name": "data_transform", "path": "macros/create_station_groups.sql", "original_file_path": "macros/create_station_groups.sql", "unique_id": "macro.data_transform.create_station_groups", "macro_sql": "{% macro create_station_groups(model, start_or_end) %}\n    select \n        {{ start_or_end }}_station_name as citibike_station_name, \n        {{ start_or_end }}_station_id as citibike_station_id, \n        round({{ start_or_end }}_lat, 6) as station_latitude, \n        round({{ start_or_end }}_lng, 6) as station_longitude\n    from {{ model }}\n    group by\n        {{ start_or_end }}_station_name, \n        {{ start_or_end }}_station_id, \n        round({{ start_or_end }}_lat, 6), \n        round({{ start_or_end }}_lng, 6) \n{% endmacro %}", "depends_on": {"macros": []}, "description": "Pass in either 'start' or 'end' to parameter `start_or_end`. The macro will create distinct groups of `<start_or_end>_station_id`, `<start_or_end>_station_name`, `<start_or_end>_station_latitude`, and `<start_or_end>_station_longitude`.  Additionally, it will round the latitude and longitude values to 6 decimal points to handle floating point errors.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "data_transform://macros/_macros__schema.yml", "arguments": [{"name": "model", "type": "string", "description": "Target model to find distinct station groups"}, {"name": "start_or_end", "type": "string", "description": "Either 'start' or 'end'"}], "created_at": 1743088111.163095, "supported_languages": null}, "macro.data_transform.test_unique_station_id": {"name": "test_unique_station_id", "resource_type": "macro", "package_name": "data_transform", "path": "tests/generic/test_unique_station_id.sql", "original_file_path": "tests/generic/test_unique_station_id.sql", "unique_id": "macro.data_transform.test_unique_station_id", "macro_sql": "{% test unique_station_id(model)%}\n    select \n        start_station_id,  \n        start_lat,\n        start_lng,\n        count(*)\n    from {{ model }} \n    group by\n        start_station_id,\n        start_lat,\n        start_lng\n    having count(*) > 1\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.4479659, "supported_languages": null}, "macro.data_transform.test_validate_month": {"name": "test_validate_month", "resource_type": "macro", "package_name": "data_transform", "path": "tests/generic/test_validate_month.sql", "original_file_path": "tests/generic/test_validate_month.sql", "unique_id": "macro.data_transform.test_validate_month", "macro_sql": "{% test validate_month(model, started_at_col, ended_at_col, month_idx)%}\n    select * \n    from {{ model }} \n    where \n        month({{ started_at_col }}) != {{ month_idx }} and month({{ ended_at_col }}) != {{ month_idx }}\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.4483032, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_binding_char": {"name": "duckdb__get_binding_char", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_binding_char", "macro_sql": "{% macro duckdb__get_binding_char() %}\n  {{ return(adapter.get_binding_char()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.4488919, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_batch_size": {"name": "duckdb__get_batch_size", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_batch_size", "macro_sql": "{% macro duckdb__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.449037, "supported_languages": null}, "macro.dbt_duckdb.duckdb__load_csv_rows": {"name": "duckdb__load_csv_rows", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__load_csv_rows", "macro_sql": "{% macro duckdb__load_csv_rows(model, agate_table) %}\n    {% if config.get('fast', true) %}\n        {% set seed_file_path = adapter.get_seed_file_path(model) %}\n        {% set delimiter = config.get('delimiter', ',') %}\n        {% set sql %}\n          COPY {{ this.render() }} FROM '{{ seed_file_path }}' (FORMAT CSV, HEADER TRUE, DELIMITER '{{ delimiter }}')\n        {% endset %}\n        {% do adapter.add_query(sql, abridge_sql_log=True) %}\n        {{ return(sql) }}\n    {% endif %}\n\n    {% set batch_size = get_batch_size() %}\n    {% set agate_table = adapter.convert_datetimes_to_strs(agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    {{ get_binding_char() }}\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.4513018, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_merge_sql": {"name": "duckdb__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_merge_sql", "macro_sql": "{% macro duckdb__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }} as DBT_INTERNAL_TARGET\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = DBT_INTERNAL_TARGET.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and DBT_INTERNAL_TARGET.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.452138, "supported_languages": null}, "macro.dbt_duckdb.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(False, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.452644, "supported_languages": null}, "macro.dbt_duckdb.duckdb__post_snapshot": {"name": "duckdb__post_snapshot", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__post_snapshot", "macro_sql": "{% macro duckdb__post_snapshot(staging_relation) %}\n    {% do return(drop_relation(staging_relation)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.452829, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_catalog": {"name": "duckdb__get_catalog", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_catalog", "macro_sql": "{% macro duckdb__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    with relations AS (\n      select\n        t.table_name\n        , t.database_name\n        , t.schema_name\n        , 'BASE TABLE' as table_type\n        , {{ adapter.catalog_comment('t') }} as table_comment\n      from duckdb_tables() t\n      WHERE t.database_name = '{{ database }}'\n      UNION ALL\n      SELECT v.view_name as table_name\n      , v.database_name\n      , v.schema_name\n      , 'VIEW' as table_type\n      , {{ adapter.catalog_comment('v') }} as table_comment\n      from duckdb_views() v\n      WHERE v.database_name = '{{ database }}'\n    )\n    select\n        '{{ database }}' as table_database,\n        r.schema_name as table_schema,\n        r.table_name,\n        r.table_type,\n        r.table_comment,\n        c.column_name,\n        c.column_index as column_index,\n        c.data_type as column_type,\n        {{ adapter.catalog_comment('c') }} as column_comment,\n        '' as table_owner\n    FROM relations r JOIN duckdb_columns() c ON r.schema_name = c.schema_name AND r.table_name = c.table_name\n    WHERE (\n        {%- for schema in schemas -%}\n          upper(r.schema_name) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n    ORDER BY\n        r.schema_name,\n        r.table_name,\n        c.column_index\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.45381, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_schema": {"name": "duckdb__create_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_schema", "macro_sql": "{% macro duckdb__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    {% set sql %}\n        select type from duckdb_databases()\n        where lower(database_name)='{{ relation.database | lower }}'\n        and type='sqlite'\n    {% endset %}\n    {% set results = run_query(sql) %}\n    {% if results|length == 0 %}\n        create schema if not exists {{ relation.without_identifier() }}\n    {% else %}\n        {% if relation.schema!='main' %}\n            {{ exceptions.raise_compiler_error(\n                \"Schema must be 'main' when writing to sqlite \"\n                ~ \"instead got \" ~ relation.schema\n            )}}\n        {% endif %}\n    {% endif %}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.4560819, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_schema": {"name": "duckdb__drop_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_schema", "macro_sql": "{% macro duckdb__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.4563031, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_schemas": {"name": "duckdb__list_schemas", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_schemas", "macro_sql": "{% macro duckdb__list_schemas(database) -%}\n  {% set sql %}\n    select schema_name\n    from system.information_schema.schemata\n    {% if database is not none %}\n    where lower(catalog_name) = '{{ database | lower }}'\n    {% endif %}\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.456703, "supported_languages": null}, "macro.dbt_duckdb.duckdb__check_schema_exists": {"name": "duckdb__check_schema_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__check_schema_exists", "macro_sql": "{% macro duckdb__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from system.information_schema.schemata\n        where lower(schema_name) = '{{ schema | lower }}'\n        and lower(catalog_name) = '{{ information_schema.database | lower }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.457251, "supported_languages": null}, "macro.dbt_duckdb.get_column_names": {"name": "get_column_names", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.get_column_names", "macro_sql": "{% macro get_column_names() %}\n  {# loop through user_provided_columns to get column names #}\n    {%- set user_provided_columns = model['columns'] -%}\n    (\n    {% for i in user_provided_columns %}\n      {% set col = user_provided_columns[i] %}\n      {{ col['name'] }} {{ \",\" if not loop.last }}\n    {% endfor %}\n  )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.4576828, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_table_as": {"name": "duckdb__create_table_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_table_as", "macro_sql": "{% macro duckdb__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(compiled_code) }}\n    {% endif %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create {% if temporary: -%}temporary{%- endif %} table\n      {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% if contract_config.enforced and not temporary %}\n    {#-- DuckDB doesnt support constraints on temp tables --#}\n    {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} {{ get_column_names() }} (\n      {{ get_select_subquery(compiled_code) }}\n    );\n  {% else %}\n    as (\n      {{ compiled_code }}\n    );\n  {% endif %}\n  {%- elif language == 'python' -%}\n    {{ py_write_table(temporary=temporary, relation=relation, compiled_code=compiled_code) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"duckdb__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_duckdb.get_column_names", "macro.dbt.get_select_subquery", "macro.dbt_duckdb.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.458909, "supported_languages": null}, "macro.dbt_duckdb.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.py_write_table", "macro_sql": "{% macro py_write_table(temporary, relation, compiled_code) -%}\n{{ compiled_code }}\n\ndef materialize(df, con):\n    try:\n        import pyarrow\n        pyarrow_available = True\n    except ImportError:\n        pyarrow_available = False\n    finally:\n        if pyarrow_available and isinstance(df, pyarrow.Table):\n            # https://github.com/duckdb/duckdb/issues/6584\n            import pyarrow.dataset\n    tmp_name = '__dbt_python_model_df_' + '{{ relation.identifier }}'\n    con.register(tmp_name, df)\n    con.execute('create table {{ relation }} as select * from ' + tmp_name)\n    con.unregister(tmp_name)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.459167, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_view_as": {"name": "duckdb__create_view_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_view_as", "macro_sql": "{% macro duckdb__create_view_as(relation, sql) -%}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.459646, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_columns_in_relation": {"name": "duckdb__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_columns_in_relation", "macro_sql": "{% macro duckdb__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from system.information_schema.columns\n      where table_name = '{{ relation.identifier }}'\n      {% if relation.schema %}\n      and lower(table_schema) = '{{ relation.schema | lower }}'\n      {% endif %}\n      {% if relation.database %}\n      and lower(table_catalog) = '{{ relation.database | lower }}'\n      {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.460256, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_relations_without_caching": {"name": "duckdb__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_relations_without_caching", "macro_sql": "{% macro duckdb__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      CASE table_type\n        WHEN 'BASE TABLE' THEN 'table'\n        WHEN 'VIEW' THEN 'view'\n        WHEN 'LOCAL TEMPORARY' THEN 'table'\n        END as type\n    from system.information_schema.tables\n    where lower(table_schema) = '{{ schema_relation.schema | lower }}'\n    and lower(table_catalog) = '{{ schema_relation.database | lower }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.4606872, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_relation": {"name": "duckdb__drop_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_relation", "macro_sql": "{% macro duckdb__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.4609458, "supported_languages": null}, "macro.dbt_duckdb.duckdb__rename_relation": {"name": "duckdb__rename_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__rename_relation", "macro_sql": "{% macro duckdb__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter {{ to_relation.type }} {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.4613278, "supported_languages": null}, "macro.dbt_duckdb.duckdb__make_temp_relation": {"name": "duckdb__make_temp_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__make_temp_relation", "macro_sql": "{% macro duckdb__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.py_current_timestring"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.461725, "supported_languages": null}, "macro.dbt_duckdb.duckdb__current_timestamp": {"name": "duckdb__current_timestamp", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__current_timestamp", "macro_sql": "{% macro duckdb__current_timestamp() -%}\n  now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.461819, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_string_as_time": {"name": "duckdb__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_string_as_time", "macro_sql": "{% macro duckdb__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.462026, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_get_time": {"name": "duckdb__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_get_time", "macro_sql": "{% macro duckdb__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.462146, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_incremental_default_sql": {"name": "duckdb__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_incremental_default_sql", "macro_sql": "{% macro duckdb__get_incremental_default_sql(arg_dict) %}\n  {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.4623191, "supported_languages": null}, "macro.dbt_duckdb.location_exists": {"name": "location_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.location_exists", "macro_sql": "{% macro location_exists(location) -%}\n  {% do return(adapter.location_exists(location)) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.462492, "supported_languages": null}, "macro.dbt_duckdb.write_to_file": {"name": "write_to_file", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.write_to_file", "macro_sql": "{% macro write_to_file(relation, location, options) -%}\n  {% call statement('write_to_file') -%}\n    copy {{ relation }} to '{{ location }}' ({{ options }})\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.4627478, "supported_languages": null}, "macro.dbt_duckdb.store_relation": {"name": "store_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.store_relation", "macro_sql": "{% macro store_relation(plugin, relation, location, format, config) -%}\n  {%- set column_list = adapter.get_columns_in_relation(relation) -%}\n  {% do adapter.store_relation(plugin, relation, column_list, location, format, config) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.463098, "supported_languages": null}, "macro.dbt_duckdb.render_write_options": {"name": "render_write_options", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.render_write_options", "macro_sql": "{% macro render_write_options(config) -%}\n  {% set options = config.get('options', {}) %}\n  {% if options is not mapping %}\n    {% do exceptions.raise_compiler_error(\"The options argument must be a dictionary\") %}\n  {% endif %}\n\n  {% for k in options %}\n    {% set _ = options.update({k: render(options[k])}) %}\n  {% endfor %}\n\n  {# legacy top-level write options #}\n  {% if config.get('format') %}\n    {% set _ = options.update({'format': render(config.get('format'))}) %}\n  {% endif %}\n  {% if config.get('delimiter') %}\n    {% set _ = options.update({'delimiter': render(config.get('delimiter'))}) %}\n  {% endif %}\n\n  {% do return(options) %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.464183, "supported_languages": null}, "macro.dbt_duckdb.duckdb__apply_grants": {"name": "duckdb__apply_grants", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__apply_grants", "macro_sql": "{% macro duckdb__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n      {{ adapter.warn_once('Grants for relations are not supported by DuckDB') }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.464446, "supported_languages": null}, "macro.dbt_duckdb.duckdb_escape_comment": {"name": "duckdb_escape_comment", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_duckdb.duckdb_escape_comment", "macro_sql": "{% macro duckdb_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.465261, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_relation_comment": {"name": "duckdb__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_relation_comment", "macro_sql": "{% macro duckdb__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = duckdb_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.465516, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_column_comment": {"name": "duckdb__alter_column_comment", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_column_comment", "macro_sql": "{% macro duckdb__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = duckdb_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.466186, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql": {"name": "duckdb__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/incremental_helper.sql", "original_file_path": "macros/incremental_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql", "macro_sql": "{% macro duckdb__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }} as DBT_INCREMENTAL_TARGET\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = DBT_INCREMENTAL_TARGET.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.46766, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns": {"name": "duckdb__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/columns.sql", "original_file_path": "macros/columns.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns", "macro_sql": "{% macro duckdb__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n    {% for column in add_columns %}\n      {% set sql -%}\n         alter {{ relation.type }} {{ relation }} add column\n           {{ column.name }} {{ column.data_type }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n  {% if remove_columns %}\n    {% for column in remove_columns %}\n      {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n          {{ column.name }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.46861, "supported_languages": null}, "macro.dbt_duckdb.materialization_table_duckdb": {"name": "materialization_table_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_duckdb.materialization_table_duckdb", "macro_sql": "{% materialization table, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set language = model['language'] -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main', language=language) -%}\n    {{- create_table_as(False, intermediate_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.47118, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_external_duckdb": {"name": "materialization_external_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/external.sql", "original_file_path": "macros/materializations/external.sql", "unique_id": "macro.dbt_duckdb.materialization_external_duckdb", "macro_sql": "{% materialization external, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set location = render(config.get('location', default=external_location(this, config))) -%})\n  {%- set rendered_options = render_write_options(config) -%}\n\n  {%- set format = config.get('format') -%}\n  {%- set allowed_formats = ['csv', 'parquet', 'json'] -%}\n  {%- if format -%}\n      {%- if format not in allowed_formats -%}\n          {{ exceptions.raise_compiler_error(\"Invalid format: \" ~ format ~ \". Allowed formats are: \" ~ allowed_formats | join(', ')) }}\n      {%- endif -%}\n  {%- else -%}\n    {%- set format = location.split('.')[-1].lower() if '.' in location else 'parquet' -%}\n    {%- set format = format if format in allowed_formats else 'parquet' -%}\n  {%- endif -%}\n\n  {%- set write_options = adapter.external_write_options(location, rendered_options) -%}\n  {%- set read_location = adapter.external_read_location(location, rendered_options) -%}\n  {%- set parquet_read_options = config.get('parquet_read_options', {'union_by_name': False}) -%}\n  {%- set json_read_options = config.get('json_read_options', {'auto_detect': True}) -%}\n  {%- set csv_read_options = config.get('csv_read_options', {'auto_detect': True}) -%}\n\n  -- set language - python or sql\n  {%- set language = model['language'] -%}\n\n  {%- set target_relation = this.incorporate(type='view') %}\n\n  -- Continue as normal materialization\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set temp_relation =  make_intermediate_relation(this.incorporate(type='table'), suffix='__dbt_tmp') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation, suffix='__dbt_int') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_temp_relation = load_cached_relation(temp_relation) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_temp_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('create_table', language=language) -%}\n    {{- create_table_as(False, temp_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- check if relation is empty\n  {%- set count_query -%}\n    select count(*) as row_count from {{ temp_relation }}\n  {%- endset -%}\n  {%- set row_count = run_query(count_query) -%}\n\n  -- if relation is empty, write a non-empty table with column names and null values\n  {% call statement('main', language='sql') -%}\n    {% if row_count[0][0] == 0 %}\n    insert into {{ temp_relation }} values (\n      {%- for col in get_columns_in_relation(temp_relation) -%}\n      NULL,\n      {%- endfor -%}\n    )\n    {% endif %}\n  {%- endcall %}\n\n  -- write a temp relation into file\n  {{ write_to_file(temp_relation, location, write_options) }}\n\n-- create a view on top of the location\n  {% call statement('main', language='sql') -%}\n    {% if format == 'json' %}\n      create or replace view {{ intermediate_relation }} as (\n        select * from read_json('{{ read_location }}'\n        {%- for key, value in json_read_options.items() -%}\n          , {{ key }}=\n          {%- if value is string -%}\n            '{{ value }}'\n          {%- else -%}\n            {{ value }}\n          {%- endif -%}\n        {%- endfor -%}\n        )\n        -- if relation is empty, filter by all columns having null values\n        {% if row_count[0][0] == 0 %}\n          where 1\n          {%- for col in get_columns_in_relation(temp_relation) -%}\n            {{ print(' ') }} AND {{ col.column }} is not NULL\n          {%- endfor -%}\n        {% endif %}\n      );\n    {% elif format == 'parquet' %}\n      create or replace view {{ intermediate_relation }} as (\n        select * from read_parquet('{{ read_location }}'\n        {%- for key, value in parquet_read_options.items() -%}\n          , {{ key }}=\n          {%- if value is string -%}\n            '{{ value }}'\n          {%- else -%}\n            {{ value }}\n          {%- endif -%}\n        {%- endfor -%}\n        )\n        -- if relation is empty, filter by all columns having null values\n        {% if row_count[0][0] == 0 %}\n          where 1\n          {%- for col in get_columns_in_relation(temp_relation) -%}\n            {{ print(' ') }} AND {{ col.column }} is not NULL\n          {%- endfor -%}\n        {% endif %}\n      );\n    {% elif format == 'csv' %}\n    create or replace view {{ intermediate_relation }} as (\n      select * from read_csv('{{ read_location }}'\n      {%- for key, value in csv_read_options.items() -%}\n        , {{ key }}=\n        {%- if value is string -%}\n          '{{ value }}'\n        {%- else -%}\n          {{ value }}\n        {%- endif -%}\n      {%- endfor -%}\n      )\n      -- if relation is empty, filter by all columns having null values\n      {% if row_count[0][0] == 0 %}\n        where 1\n        {%- for col in get_columns_in_relation(temp_relation) -%}\n          {{ print(' ') }} AND {{ col.column }} is not NULL\n        {%- endfor -%}\n      {% endif %}\n    );\n    {% endif %}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ drop_relation_if_exists(temp_relation) }}\n\n  -- register table into glue\n  {%- set plugin_name = config.get('plugin') -%}\n  {%- set glue_register = config.get('glue_register', default=false) -%}\n  {%- set partition_columns = config.get('partition_columns', []) -%}\n  {% if plugin_name is not none or glue_register is true %}\n    {% if glue_register %}\n      {# legacy hack to set the glue database name, deprecate this #}\n      {%- set plugin_name = 'glue|' ~ config.get('glue_database', 'default') -%}\n    {% endif %}\n    {% do store_relation(plugin_name, target_relation, location, format, config) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.get_columns_in_relation", "macro.dbt_duckdb.write_to_file", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_duckdb.store_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.4795961, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_incremental_duckdb": {"name": "materialization_incremental_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_duckdb.materialization_incremental_duckdb", "macro_sql": "{% materialization incremental, adapter=\"duckdb\", supported_languages=['sql', 'python'] -%}\n\n  {%- set language = model['language'] -%}\n  -- only create temp tables if using local duckdb, as it is not currently supported for remote databases\n  {%- set temporary = not adapter.is_motherduck() -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, compiled_code, language) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, intermediate_relation, compiled_code, language) %}\n    {% set need_swap = true %}\n  {% else %}\n    {% if not temporary %}\n      -- if not using a temporary table we will update the temp relation to use a different temp schema (\"dbt_temp\" by default)\n      {% set temp_relation = temp_relation.incorporate(path=adapter.get_temp_relation_path(this)) %}\n      {% do run_query(create_schema(temp_relation)) %}\n      -- then drop the temp relation after we insert the incremental data into the target relation\n      {% do to_drop.append(temp_relation) %}\n    {% endif %}\n    {% if language == 'python' %}\n      {% set build_python = create_table_as(False, temp_relation, compiled_code, language) %}\n      {% call statement(\"pre\", language=language) %}\n        {{- build_python }}\n      {% endcall %}\n    {% else %} {# SQL #}\n      {% do run_query(create_table_as(temporary, temp_relation, compiled_code, language)) %}\n    {% endif %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n    {% set language = \"sql\" %}\n\n  {% endif %}\n\n  {% call statement(\"main\", language=language) %}\n      {{- build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.create_schema", "macro.dbt.statement", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.485579, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.duckdb__dateadd": {"name": "duckdb__dateadd", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_duckdb.duckdb__dateadd", "macro_sql": "{% macro duckdb__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    date_add({{ from_date_or_timestamp }}, interval ({{ interval }}) {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.485919, "supported_languages": null}, "macro.dbt_duckdb.duckdb__listagg": {"name": "duckdb__listagg", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_duckdb.duckdb__listagg", "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if limit_num -%}\n    list_aggr(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        'string_agg',\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.4865391, "supported_languages": null}, "macro.dbt_duckdb.duckdb__datediff": {"name": "duckdb__datediff", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_duckdb.duckdb__datediff", "macro_sql": "{% macro duckdb__datediff(first_date, second_date, datepart) -%}\n    {% if datepart == 'week' %}\n            ({{ datediff(first_date, second_date, 'day') }} // 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% else %}\n        (date_diff('{{ datepart }}', {{ first_date }}::timestamp, {{ second_date}}::timestamp ))\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.487178, "supported_languages": null}, "macro.dbt_duckdb.duckdb__any_value": {"name": "duckdb__any_value", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_duckdb.duckdb__any_value", "macro_sql": "{% macro duckdb__any_value(expression) -%}\n\n    arbitrary({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.4873521, "supported_languages": null}, "macro.dbt_duckdb.register_upstream_external_models": {"name": "register_upstream_external_models", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/upstream.sql", "original_file_path": "macros/utils/upstream.sql", "unique_id": "macro.dbt_duckdb.register_upstream_external_models", "macro_sql": "{%- macro register_upstream_external_models() -%}\n{% if execute %}\n{% set upstream_nodes = {} %}\n{% set upstream_schemas = {} %}\n{% for node in selected_resources %}\n  {% if node not in graph['nodes'] %}{% continue %}{% endif %}\n  {% for upstream_node in graph['nodes'][node]['depends_on']['nodes'] %}\n    {% if upstream_node not in upstream_nodes and upstream_node not in selected_resources %}\n      {% do upstream_nodes.update({upstream_node: None}) %}\n      {% set upstream = graph['nodes'].get(upstream_node) %}\n      {% if upstream\n         and upstream.resource_type in ('model', 'seed')\n         and upstream.config.materialized=='external'\n      %}\n        {%- set upstream_rel = api.Relation.create(\n          database=upstream['database'],\n          schema=upstream['schema'],\n          identifier=upstream['alias']\n        ) -%}\n        {%- set location = upstream.config.get('location', external_location(upstream_rel, upstream.config)) -%}\n        {%- set rendered_options = render_write_options(upstream.config) -%}\n        {%- set upstream_location = adapter.external_read_location(location, rendered_options) -%}\n        {% if upstream_rel.schema not in upstream_schemas %}\n          {% call statement('main', language='sql') -%}\n            create schema if not exists {{ upstream_rel.schema }}\n          {%- endcall %}\n          {% do upstream_schemas.update({upstream_rel.schema: None}) %}\n        {% endif %}\n        {% call statement('main', language='sql') -%}\n          create or replace view {{ upstream_rel }} as (\n            select * from '{{ upstream_location }}'\n          );\n        {%- endcall %}\n      {%- endif %}\n    {% endif %}\n  {% endfor %}\n{% endfor %}\n{% do adapter.commit() %}\n{% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.489771, "supported_languages": null}, "macro.dbt_duckdb.duckdb__split_part": {"name": "duckdb__split_part", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/splitpart.sql", "original_file_path": "macros/utils/splitpart.sql", "unique_id": "macro.dbt_duckdb.duckdb__split_part", "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) %}\n    string_split({{ string_text }}, {{ delimiter_text }})[ {{ part_number }} ]\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.490038, "supported_languages": null}, "macro.dbt_duckdb.duckdb__last_day": {"name": "duckdb__last_day", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/lastday.sql", "original_file_path": "macros/utils/lastday.sql", "unique_id": "macro.dbt_duckdb.duckdb__last_day", "macro_sql": "{% macro duckdb__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- duckdb dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.490598, "supported_languages": null}, "macro.dbt_duckdb.external_location": {"name": "external_location", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/external_location.sql", "original_file_path": "macros/utils/external_location.sql", "unique_id": "macro.dbt_duckdb.external_location", "macro_sql": "{%- macro external_location(relation, config) -%}\n  {%- if config.get('options', {}).get('partition_by') is none -%}\n    {%- set format = config.get('format', 'parquet') -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}.{{ format }}\n  {%- else -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}\n  {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.491224, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.4922109, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.492436, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.492597, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.492755, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.4929202, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.493251, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.493592, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.493969, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.4945018, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.495483, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.497903, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.498108, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.498368, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.499634, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.499833, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.500035, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.501622, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.503225, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5054379, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5057752, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.505964, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.506067, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.506233, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5063639, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.506593, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5068748, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }})\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.510887, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.511123, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5116942, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.512172, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.512833, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.513309, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.513626, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.514008, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.514654, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.514896, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.515131, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.519673, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5221171, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.522759, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5231118, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.52335, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.524263, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5247512, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.525206, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.527004, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.528872, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5293288, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5296152, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.531625, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.531908, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.532665, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.535132, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.537641, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.538604, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5392482, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5400178, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.540301, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.541141, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.542423, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.544447, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5447621, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }}\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }}\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5456011, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.545911, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.546669, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5473511, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.548099, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.548376, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.548589, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.548922, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5491369, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.549471, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.549684, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.549982, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.550197, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.55037, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.550838, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.55105, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.55138, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.556054, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5574322, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.558777, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.560095, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.561053, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5613272, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.56146, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5617821, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.561973, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.564712, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5675159, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5686011, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.569578, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.569845, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.570387, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5706089, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.57076, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.570921, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.571049, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.571224, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5713532, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5718882, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.572211, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.573565, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.573998, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.574423, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.57492, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.575217, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.575545, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5759501, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.576236, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.576729, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.577156, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.577363, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.577587, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.577805, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.578441, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5797539, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.580137, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.580417, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.580713, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5809531, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.58129, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.581523, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.582032, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.582507, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.58274, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.583071, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5834172, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.583829, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.584265, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5847769, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.585129, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.585372, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5856571, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.585804, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.586108, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.586281, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.586621, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.586777, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5870788, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.587251, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.587876, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5881019, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.588435, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.588602, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.588906, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.589074, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5899289, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5900679, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.590821, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.591079, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.591239, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.592887, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.593332, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.593738, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.594058, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5942059, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5945148, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.594687, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.594985, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.595156, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5958662, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5960782, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.596579, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5973802, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.597918, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.598134, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.get_column_names", "macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5983381, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.598624, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.598766, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.5993578, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.599527, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6008902, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6011279, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.601402, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.601711, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.60188, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.602286, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.602466, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.602669, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.603284, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.603622, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.603959, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.60423, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.60483, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6063192, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6069849, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.607331, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.608194, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.609545, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.610401, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.610677, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.610941, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.611032, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6116061, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6122801, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.612542, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.612969, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6133351, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.613662, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.614017, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.614209, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.614489, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.614634, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6151319, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.61572, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6159391, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6165388, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.616831, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.616956, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.617399, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.617617, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.617891, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.617985, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.618295, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.618459, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.618777, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.618936, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.619452, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6199198, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6202781, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.620466, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.620794, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.620956, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6213171, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.621651, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6219451, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.622127, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.622398, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.62258, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6229, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6230478, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6233249, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.623575, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6238961, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.624054, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6243289, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6244469, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6261098, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.626306, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6265018, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.626679, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.626867, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.62704, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.627223, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.627435, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.627622, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.627797, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6279821, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.628148, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.628333, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6285, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6288278, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6289852, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.629272, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6293929, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6297522, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.630052, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6302211, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.630641, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.630966, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6312268, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.63154, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.631691, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.632119, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.632399, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6327271, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6328819, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6332412, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.633455, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.63364, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.633854, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.634388, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6345658, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.634728, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.634848, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_duckdb.duckdb__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6353228, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.635514, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.635603, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6357892, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.635975, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6365209, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.636678, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.63686, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6373172, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.63765, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.637812, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6379972, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.638141, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.638968, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6391559, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.639601, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6399412, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.64023, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.640599, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.640813, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.641021, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6413062, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6419368, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.642205, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.642366, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.642882, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6433449, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.643583, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.64395, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.644265, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.644521, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6458209, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6459541, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.646143, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.646272, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.646784, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6470048, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.647147, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.647403, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6476412, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6478982, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.648135, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6483982, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.649183, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.649398, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.649683, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.64995, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.651572, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6520672, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6522849, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.652506, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.653007, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.653208, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.653449, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6536472, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6539571, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.654508, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6554618, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.655763, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.656001, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.656301, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6566532, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.656841, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6570508, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.65733, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.657567, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.657929, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6581461, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.658335, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.658543, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.658732, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.658923, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6590989, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.659334, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6595352, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.660817, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6609979, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.66134, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6615832, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.661824, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.66204, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.66334, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.66373, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.663945, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.664333, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6645892, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.66572, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.666015, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6669009, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.669596, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.670222, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.67149, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6717298, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.671841, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6726148, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.672792, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.673701, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.6741602, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.674809, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.675352, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.675436, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.675926, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.676209, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.676563, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743088109.676896, "supported_languages": null}}, "docs": {"doc.data_transform.tbl_staging_XXXXXX_citibike_tripdata_X": {"name": "tbl_staging_XXXXXX_citibike_tripdata_X", "resource_type": "doc", "package_name": "data_transform", "path": "staging/_staging_docs.md", "original_file_path": "models/staging/_staging_docs.md", "unique_id": "doc.data_transform.tbl_staging_XXXXXX_citibike_tripdata_X", "block_contents": "A .csv file taken from the CitiBike website (https://s3.amazonaws.com/tripdata/index.html) as is. Describes CitiBike data in a given month (formatted as YYYYMM) in the title."}, "doc.data_transform.col_ride_id": {"name": "col_ride_id", "resource_type": "doc", "package_name": "data_transform", "path": "staging/_staging_docs.md", "original_file_path": "models/staging/_staging_docs.md", "unique_id": "doc.data_transform.col_ride_id", "block_contents": "Unique identifier for a ride"}, "doc.data_transform.col_rideable_type": {"name": "col_rideable_type", "resource_type": "doc", "package_name": "data_transform", "path": "staging/_staging_docs.md", "original_file_path": "models/staging/_staging_docs.md", "unique_id": "doc.data_transform.col_rideable_type", "block_contents": "An enum, describing whether the bike was electric or acoustic"}, "doc.data_transform.col_started_at": {"name": "col_started_at", "resource_type": "doc", "package_name": "data_transform", "path": "staging/_staging_docs.md", "original_file_path": "models/staging/_staging_docs.md", "unique_id": "doc.data_transform.col_started_at", "block_contents": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture). \nFor a month-specific table, can belong to the previous month as long as `ended_at` is in the appropriate month. For example, in `jan_2025`, \nseveral records may have `month(started_at) = 12` (December), but the `month(ended_at)` for those records must be `1`."}, "doc.data_transform.col_ended_at": {"name": "col_ended_at", "resource_type": "doc", "package_name": "data_transform", "path": "staging/_staging_docs.md", "original_file_path": "models/staging/_staging_docs.md", "unique_id": "doc.data_transform.col_ended_at", "block_contents": "The timestamp for when the ride started, presumably in EST (but CitiBike does not provide a data dictionary, so this is conjecture).\nFor a month-specific table, can belong to the following month as long as `started_at` is in the appropriate month. For example, in `may_2023`, may have several records have `month(ended_at) = 6` (June), but the `month(started_at)` for those records must be `5`."}, "doc.data_transform.col_start_station_name": {"name": "col_start_station_name", "resource_type": "doc", "package_name": "data_transform", "path": "staging/_staging_docs.md", "original_file_path": "models/staging/_staging_docs.md", "unique_id": "doc.data_transform.col_start_station_name", "block_contents": "The name of the station where the ride started, usually an intersection."}, "doc.data_transform.col_start_station_id": {"name": "col_start_station_id", "resource_type": "doc", "package_name": "data_transform", "path": "staging/_staging_docs.md", "original_file_path": "models/staging/_staging_docs.md", "unique_id": "doc.data_transform.col_start_station_id", "block_contents": "Unique identifier for the starting station"}, "doc.data_transform.col_end_station_name": {"name": "col_end_station_name", "resource_type": "doc", "package_name": "data_transform", "path": "staging/_staging_docs.md", "original_file_path": "models/staging/_staging_docs.md", "unique_id": "doc.data_transform.col_end_station_name", "block_contents": "The name of the station where the ride ended, usually an intersection."}, "doc.data_transform.col_end_station_id": {"name": "col_end_station_id", "resource_type": "doc", "package_name": "data_transform", "path": "staging/_staging_docs.md", "original_file_path": "models/staging/_staging_docs.md", "unique_id": "doc.data_transform.col_end_station_id", "block_contents": "Unique identifier for the starting station"}, "doc.data_transform.col_start_lat": {"name": "col_start_lat", "resource_type": "doc", "package_name": "data_transform", "path": "staging/_staging_docs.md", "original_file_path": "models/staging/_staging_docs.md", "unique_id": "doc.data_transform.col_start_lat", "block_contents": "Latitude of the starting station"}, "doc.data_transform.col_start_lng": {"name": "col_start_lng", "resource_type": "doc", "package_name": "data_transform", "path": "staging/_staging_docs.md", "original_file_path": "models/staging/_staging_docs.md", "unique_id": "doc.data_transform.col_start_lng", "block_contents": "Longitude of the starting station"}, "doc.data_transform.col_end_lat": {"name": "col_end_lat", "resource_type": "doc", "package_name": "data_transform", "path": "staging/_staging_docs.md", "original_file_path": "models/staging/_staging_docs.md", "unique_id": "doc.data_transform.col_end_lat", "block_contents": "Latitude of the ending station"}, "doc.data_transform.col_end_lng": {"name": "col_end_lng", "resource_type": "doc", "package_name": "data_transform", "path": "staging/_staging_docs.md", "original_file_path": "models/staging/_staging_docs.md", "unique_id": "doc.data_transform.col_end_lng", "block_contents": "Longitude of the ending station"}, "doc.data_transform.col_member_casual": {"name": "col_member_casual", "resource_type": "doc", "package_name": "data_transform", "path": "staging/_staging_docs.md", "original_file_path": "models/staging/_staging_docs.md", "unique_id": "doc.data_transform.col_member_casual", "block_contents": "An enum, describing whether the rider was a CitiBike member, or if they were a non-member (aka \"casual\")"}, "doc.data_transform.tbl_month_year_description": {"name": "tbl_month_year_description", "resource_type": "doc", "package_name": "data_transform", "path": "intermediate/_intermediate_docs.md", "original_file_path": "models/intermediate/_intermediate_docs.md", "unique_id": "doc.data_transform.tbl_month_year_description", "block_contents": "Combines data from all relevant staging files. Specifically if the table is mm_yyyy, this table will `UNION ALL` data from all staging tables matching YYYYMM_citibike_tripdata_x where x is the index of the file. It will also format the dates as datetime, and truncate precision to 'second'."}, "doc.data_transform.tbl_year_description": {"name": "tbl_year_description", "resource_type": "doc", "package_name": "data_transform", "path": "intermediate/_intermediate_docs.md", "original_file_path": "models/intermediate/_intermediate_docs.md", "unique_id": "doc.data_transform.tbl_year_description", "block_contents": "Combines data from all relevant month tables. For example `yr_2020` contains data from all tables matching `mmm_2020`. Year tables also use the macro `remove_unwanted_station_ids`. Read the macro documentation for more info."}, "doc.data_transform.may_2024_description": {"name": "may_2024_description", "resource_type": "doc", "package_name": "data_transform", "path": "intermediate/yr_2024/_yr_2024_docs.md", "original_file_path": "models/intermediate/yr_2024/_yr_2024_docs.md", "unique_id": "doc.data_transform.may_2024_description", "block_contents": "`may_2024` and `june_2024` have several duplicate records (`ride_id` is repeated). All those records have a `month(started_at) = 5` and `month(ended_at) = 6`. This table has filtered for `month(started_at) = 5` and `month(ended_at) = 5`. This transformation is not necessary on other month-specific tables, as they do not contain duplicate records."}, "doc.data_transform.macros_create_station_groups_description": {"name": "macros_create_station_groups_description", "resource_type": "doc", "package_name": "data_transform", "path": "_macros_docs.md", "original_file_path": "macros/_macros_docs.md", "unique_id": "doc.data_transform.macros_create_station_groups_description", "block_contents": "Pass in either 'start' or 'end' to parameter `start_or_end`. The macro will create distinct groups of `<start_or_end>_station_id`, `<start_or_end>_station_name`, `<start_or_end>_station_latitude`, and `<start_or_end>_station_longitude`.  Additionally, it will round the latitude and longitude values to 6 decimal points to handle floating point errors."}, "doc.data_transform.macros_remove_unwanted_station_ids": {"name": "macros_remove_unwanted_station_ids", "resource_type": "doc", "package_name": "data_transform", "path": "_macros_docs.md", "original_file_path": "macros/_macros_docs.md", "unique_id": "doc.data_transform.macros_remove_unwanted_station_ids", "block_contents": "As of March 2025, there are three `start_station_id` values that have inconsistent `start_station_name` values, as well as inconsistent `start_lat` and `start_lng`. To simplify determining whether a `start_station_id` falls in the Congestion Pricing Zone, it's easier to remove records with these values. The impact is small at around ~50K records. For context, `fct_citibike_rides` has ~160M records. So ultimately, across all data, about 0.0003% of records are removed."}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.data_transform.fct_citibike_rides_by_year": [], "model.data_transform.dim_citibike_stations": [], "model.data_transform.fct_citibike_rides": ["model.data_transform.combined_years"], "model.data_transform.combined_years": ["model.data_transform.yr_2020", "model.data_transform.yr_2021", "model.data_transform.yr_2022", "model.data_transform.yr_2023", "model.data_transform.yr_2024", "model.data_transform.yr_2025"], "model.data_transform.feb_2025": ["source.data_transform.staging_2025.202502_citibike_tripdata_1", "source.data_transform.staging_2025.202502_citibike_tripdata_2", "source.data_transform.staging_2025.202502_citibike_tripdata_3"], "model.data_transform.jan_2025": ["source.data_transform.staging_2025.202501_citibike_tripdata_1", "source.data_transform.staging_2025.202501_citibike_tripdata_2", "source.data_transform.staging_2025.202501_citibike_tripdata_3"], "model.data_transform.yr_2025": ["model.data_transform.feb_2025", "model.data_transform.jan_2025"], "model.data_transform.feb_2022": ["source.data_transform.staging_2022.202202_citibike_tripdata_1", "source.data_transform.staging_2022.202202_citibike_tripdata_2"], "model.data_transform.oct_2022": ["source.data_transform.staging_2022.202210_citibike_tripdata_1", "source.data_transform.staging_2022.202210_citibike_tripdata_2", "source.data_transform.staging_2022.202210_citibike_tripdata_3"], "model.data_transform.jun_2022": ["source.data_transform.staging_2022.202206_citibike_tripdata_1", "source.data_transform.staging_2022.202206_citibike_tripdata_2", "source.data_transform.staging_2022.202206_citibike_tripdata_3", "source.data_transform.staging_2022.202206_citibike_tripdata_4"], "model.data_transform.yr_2022": ["model.data_transform.apr_2022", "model.data_transform.aug_2022", "model.data_transform.dec_2022", "model.data_transform.feb_2022", "model.data_transform.jan_2022", "model.data_transform.jul_2022", "model.data_transform.jun_2022", "model.data_transform.mar_2022", "model.data_transform.may_2022", "model.data_transform.nov_2022", "model.data_transform.oct_2022", "model.data_transform.sep_2022"], "model.data_transform.dec_2022": ["source.data_transform.staging_2022.202212_citibike_tripdata_1", "source.data_transform.staging_2022.202212_citibike_tripdata_2"], "model.data_transform.aug_2022": ["source.data_transform.staging_2022.202208_citibike_tripdata_1", "source.data_transform.staging_2022.202208_citibike_tripdata_2", "source.data_transform.staging_2022.202208_citibike_tripdata_3", "source.data_transform.staging_2022.202208_citibike_tripdata_4"], "model.data_transform.nov_2022": ["source.data_transform.staging_2022.202211_citibike_tripdata_1", "source.data_transform.staging_2022.202211_citibike_tripdata_2", "source.data_transform.staging_2022.202211_citibike_tripdata_3"], "model.data_transform.jan_2022": ["source.data_transform.staging_2022.202201_citibike_tripdata_1", "source.data_transform.staging_2022.202201_citibike_tripdata_2"], "model.data_transform.jul_2022": ["source.data_transform.staging_2022.202207_citibike_tripdata_1", "source.data_transform.staging_2022.202207_citibike_tripdata_2", "source.data_transform.staging_2022.202207_citibike_tripdata_3", "source.data_transform.staging_2022.202207_citibike_tripdata_4"], "model.data_transform.mar_2022": ["source.data_transform.staging_2022.202203_citibike_tripdata_1", "source.data_transform.staging_2022.202203_citibike_tripdata_2"], "model.data_transform.sep_2022": ["source.data_transform.staging_2022.202209_citibike_tripdata_1", "source.data_transform.staging_2022.202209_citibike_tripdata_2", "source.data_transform.staging_2022.202209_citibike_tripdata_3", "source.data_transform.staging_2022.202209_citibike_tripdata_4"], "model.data_transform.apr_2022": ["source.data_transform.staging_2022.202204_citibike_tripdata_1", "source.data_transform.staging_2022.202204_citibike_tripdata_2", "source.data_transform.staging_2022.202204_citibike_tripdata_3"], "model.data_transform.may_2022": ["source.data_transform.staging_2022.202205_citibike_tripdata_1", "source.data_transform.staging_2022.202205_citibike_tripdata_2", "source.data_transform.staging_2022.202205_citibike_tripdata_3"], "model.data_transform.feb_2023": ["source.data_transform.staging_2023.202302_citibike_tripdata_1", "source.data_transform.staging_2023.202302_citibike_tripdata_2"], "model.data_transform.oct_2023": ["source.data_transform.staging_2023.202310_citibike_tripdata_1", "source.data_transform.staging_2023.202310_citibike_tripdata_2", "source.data_transform.staging_2023.202310_citibike_tripdata_3", "source.data_transform.staging_2023.202310_citibike_tripdata_4"], "model.data_transform.jun_2023": ["source.data_transform.staging_2023.202306_citibike_tripdata_1", "source.data_transform.staging_2023.202306_citibike_tripdata_2", "source.data_transform.staging_2023.202306_citibike_tripdata_3", "source.data_transform.staging_2023.202306_citibike_tripdata_4"], "model.data_transform.yr_2023": ["model.data_transform.apr_2023", "model.data_transform.aug_2023", "model.data_transform.dec_2023", "model.data_transform.feb_2023", "model.data_transform.jan_2023", "model.data_transform.jul_2023", "model.data_transform.jun_2023", "model.data_transform.mar_2023", "model.data_transform.may_2023", "model.data_transform.nov_2023", "model.data_transform.oct_2023", "model.data_transform.sep_2023"], "model.data_transform.aug_2023": ["source.data_transform.staging_2023.202308_citibike_tripdata_1", "source.data_transform.staging_2023.202308_citibike_tripdata_2", "source.data_transform.staging_2023.202308_citibike_tripdata_3", "source.data_transform.staging_2023.202308_citibike_tripdata_4"], "model.data_transform.dec_2023": ["source.data_transform.staging_2023.202312_citibike_tripdata_1", "source.data_transform.staging_2023.202312_citibike_tripdata_2", "source.data_transform.staging_2023.202312_citibike_tripdata_3"], "model.data_transform.nov_2023": ["source.data_transform.staging_2023.202311_citibike_tripdata_1", "source.data_transform.staging_2023.202311_citibike_tripdata_2", "source.data_transform.staging_2023.202311_citibike_tripdata_3"], "model.data_transform.jan_2023": ["source.data_transform.staging_2023.202301_citibike_tripdata_1", "source.data_transform.staging_2023.202301_citibike_tripdata_2"], "model.data_transform.mar_2023": ["source.data_transform.staging_2023.202303_citibike_tripdata_1", "source.data_transform.staging_2023.202303_citibike_tripdata_2", "source.data_transform.staging_2023.202303_citibike_tripdata_3"], "model.data_transform.jul_2023": ["source.data_transform.staging_2023.202307_citibike_tripdata_1", "source.data_transform.staging_2023.202307_citibike_tripdata_2", "source.data_transform.staging_2023.202307_citibike_tripdata_3", "source.data_transform.staging_2023.202307_citibike_tripdata_4"], "model.data_transform.may_2023": ["source.data_transform.staging_2023.202305_citibike_tripdata_1", "source.data_transform.staging_2023.202305_citibike_tripdata_2", "source.data_transform.staging_2023.202305_citibike_tripdata_3", "source.data_transform.staging_2023.202305_citibike_tripdata_4"], "model.data_transform.apr_2023": ["source.data_transform.staging_2023.202304_citibike_tripdata_1", "source.data_transform.staging_2023.202304_citibike_tripdata_2", "source.data_transform.staging_2023.202304_citibike_tripdata_3"], "model.data_transform.sep_2023": ["source.data_transform.staging_2023.202309_citibike_tripdata_1", "source.data_transform.staging_2023.202309_citibike_tripdata_2", "source.data_transform.staging_2023.202309_citibike_tripdata_3", "source.data_transform.staging_2023.202309_citibike_tripdata_4"], "model.data_transform.oct_2024": ["source.data_transform.staging_2024.202410_citibike_tripdata_1", "source.data_transform.staging_2024.202410_citibike_tripdata_2", "source.data_transform.staging_2024.202410_citibike_tripdata_3", "source.data_transform.staging_2024.202410_citibike_tripdata_4", "source.data_transform.staging_2024.202410_citibike_tripdata_5", "source.data_transform.staging_2024.202410_citibike_tripdata_6"], "model.data_transform.jun_2024": ["source.data_transform.staging_2024.202406_citibike_tripdata_1", "source.data_transform.staging_2024.202406_citibike_tripdata_2", "source.data_transform.staging_2024.202406_citibike_tripdata_3", "source.data_transform.staging_2024.202406_citibike_tripdata_4", "source.data_transform.staging_2024.202406_citibike_tripdata_5"], "model.data_transform.feb_2024": ["source.data_transform.staging_2024.202402_citibike_tripdata"], "model.data_transform.nov_2024": ["source.data_transform.staging_2024.202411_citibike_tripdata_1", "source.data_transform.staging_2024.202411_citibike_tripdata_2", "source.data_transform.staging_2024.202411_citibike_tripdata_3", "source.data_transform.staging_2024.202411_citibike_tripdata_4"], "model.data_transform.jan_2024": ["source.data_transform.staging_2024.202401_citibike_tripdata"], "model.data_transform.yr_2024": ["model.data_transform.apr_2024", "model.data_transform.aug_2024", "model.data_transform.dec_2024", "model.data_transform.feb_2024", "model.data_transform.jan_2024", "model.data_transform.jul_2024", "model.data_transform.jun_2024", "model.data_transform.mar_2024", "model.data_transform.may_2024", "model.data_transform.nov_2024", "model.data_transform.oct_2024", "model.data_transform.sep_2024"], "model.data_transform.dec_2024": ["source.data_transform.staging_2024.202412_citibike_tripdata_1", "source.data_transform.staging_2024.202412_citibike_tripdata_2", "source.data_transform.staging_2024.202412_citibike_tripdata_3"], "model.data_transform.aug_2024": ["source.data_transform.staging_2024.202408_citibike_tripdata_1", "source.data_transform.staging_2024.202408_citibike_tripdata_2", "source.data_transform.staging_2024.202408_citibike_tripdata_3", "source.data_transform.staging_2024.202408_citibike_tripdata_4", "source.data_transform.staging_2024.202408_citibike_tripdata_5"], "model.data_transform.jul_2024": ["source.data_transform.staging_2024.202407_citibike_tripdata_1", "source.data_transform.staging_2024.202407_citibike_tripdata_2", "source.data_transform.staging_2024.202407_citibike_tripdata_3", "source.data_transform.staging_2024.202407_citibike_tripdata_4", "source.data_transform.staging_2024.202407_citibike_tripdata_5"], "model.data_transform.mar_2024": ["source.data_transform.staging_2024.202403_citibike_tripdata"], "model.data_transform.sep_2024": ["source.data_transform.staging_2024.202409_citibike_tripdata_1", "source.data_transform.staging_2024.202409_citibike_tripdata_2", "source.data_transform.staging_2024.202409_citibike_tripdata_3", "source.data_transform.staging_2024.202409_citibike_tripdata_4", "source.data_transform.staging_2024.202409_citibike_tripdata_5"], "model.data_transform.apr_2024": ["source.data_transform.staging_2024.202404_citibike_tripdata"], "model.data_transform.may_2024": ["source.data_transform.staging_2024.202405_citibike_tripdata_1", "source.data_transform.staging_2024.202405_citibike_tripdata_2", "source.data_transform.staging_2024.202405_citibike_tripdata_3", "source.data_transform.staging_2024.202405_citibike_tripdata_4", "source.data_transform.staging_2024.202405_citibike_tripdata_5"], "model.data_transform.feb_2021": ["source.data_transform.staging_2021.202102_citibike_tripdata_1"], "model.data_transform.jun_2021": ["source.data_transform.staging_2021.202106_citibike_tripdata_1", "source.data_transform.staging_2021.202106_citibike_tripdata_2", "source.data_transform.staging_2021.202106_citibike_tripdata_3", "source.data_transform.staging_2021.202106_citibike_tripdata_4"], "model.data_transform.oct_2021": ["source.data_transform.staging_2021.202110_citibike_tripdata_1", "source.data_transform.staging_2021.202110_citibike_tripdata_2", "source.data_transform.staging_2021.202110_citibike_tripdata_3", "source.data_transform.staging_2021.202110_citibike_tripdata_4"], "model.data_transform.dec_2021": ["source.data_transform.staging_2021.202112_citibike_tripdata_1", "source.data_transform.staging_2021.202112_citibike_tripdata_2"], "model.data_transform.aug_2021": ["source.data_transform.staging_2021.202108_citibike_tripdata_1", "source.data_transform.staging_2021.202108_citibike_tripdata_2", "source.data_transform.staging_2021.202108_citibike_tripdata_3", "source.data_transform.staging_2021.202108_citibike_tripdata_4"], "model.data_transform.yr_2021": ["model.data_transform.apr_2021", "model.data_transform.aug_2021", "model.data_transform.dec_2021", "model.data_transform.feb_2021", "model.data_transform.jan_2021", "model.data_transform.jul_2021", "model.data_transform.jun_2021", "model.data_transform.mar_2021", "model.data_transform.may_2021", "model.data_transform.nov_2021", "model.data_transform.oct_2021", "model.data_transform.sep_2021"], "model.data_transform.jan_2021": ["source.data_transform.staging_2021.202101_citibike_tripdata_1", "source.data_transform.staging_2021.202101_citibike_tripdata_2"], "model.data_transform.nov_2021": ["source.data_transform.staging_2021.202111_citibike_tripdata_1", "source.data_transform.staging_2021.202111_citibike_tripdata_2", "source.data_transform.staging_2021.202111_citibike_tripdata_3"], "model.data_transform.sep_2021": ["source.data_transform.staging_2021.202109_citibike_tripdata_1", "source.data_transform.staging_2021.202109_citibike_tripdata_2", "source.data_transform.staging_2021.202109_citibike_tripdata_3", "source.data_transform.staging_2021.202109_citibike_tripdata_4"], "model.data_transform.apr_2021": ["source.data_transform.staging_2021.202104_citibike_tripdata_1", "source.data_transform.staging_2021.202104_citibike_tripdata_2", "source.data_transform.staging_2021.202104_citibike_tripdata_3"], "model.data_transform.may_2021": ["source.data_transform.staging_2021.202105_citibike_tripdata_1", "source.data_transform.staging_2021.202105_citibike_tripdata_2", "source.data_transform.staging_2021.202105_citibike_tripdata_3"], "model.data_transform.jul_2021": ["source.data_transform.staging_2021.202107_citibike_tripdata_1", "source.data_transform.staging_2021.202107_citibike_tripdata_2", "source.data_transform.staging_2021.202107_citibike_tripdata_3", "source.data_transform.staging_2021.202107_citibike_tripdata_4"], "model.data_transform.mar_2021": ["source.data_transform.staging_2021.202103_citibike_tripdata_1", "source.data_transform.staging_2021.202103_citibike_tripdata_2"], "model.data_transform.feb_2020": ["source.data_transform.staging_2020.202002_citibike_tripdata_1", "source.data_transform.staging_2020.202002_citibike_tripdata_2"], "model.data_transform.jun_2020": ["source.data_transform.staging_2020.202006_citibike_tripdata_1", "source.data_transform.staging_2020.202006_citibike_tripdata_2"], "model.data_transform.oct_2020": ["source.data_transform.staging_2020.202010_citibike_tripdata_1", "source.data_transform.staging_2020.202010_citibike_tripdata_2", "source.data_transform.staging_2020.202010_citibike_tripdata_3"], "model.data_transform.aug_2020": ["source.data_transform.staging_2020.202008_citibike_tripdata_1", "source.data_transform.staging_2020.202008_citibike_tripdata_2", "source.data_transform.staging_2020.202008_citibike_tripdata_3"], "model.data_transform.dec_2020": ["source.data_transform.staging_2020.202012_citibike_tripdata_1", "source.data_transform.staging_2020.202012_citibike_tripdata_2"], "model.data_transform.yr_2020": ["model.data_transform.apr_2020", "model.data_transform.aug_2020", "model.data_transform.dec_2020", "model.data_transform.feb_2020", "model.data_transform.jan_2020", "model.data_transform.jul_2020", "model.data_transform.jun_2020", "model.data_transform.mar_2020", "model.data_transform.may_2020", "model.data_transform.nov_2020", "model.data_transform.oct_2020", "model.data_transform.sep_2020"], "model.data_transform.jan_2020": ["source.data_transform.staging_2020.202001_citibike_tripdata_1", "source.data_transform.staging_2020.202001_citibike_tripdata_2"], "model.data_transform.nov_2020": ["source.data_transform.staging_2020.202011_citibike_tripdata_1", "source.data_transform.staging_2020.202011_citibike_tripdata_2"], "model.data_transform.may_2020": ["source.data_transform.staging_2020.202005_citibike_tripdata_1", "source.data_transform.staging_2020.202005_citibike_tripdata_2"], "model.data_transform.apr_2020": ["source.data_transform.staging_2020.202004_citibike_tripdata_1"], "model.data_transform.sep_2020": ["source.data_transform.staging_2020.202009_citibike_tripdata_1", "source.data_transform.staging_2020.202009_citibike_tripdata_2", "source.data_transform.staging_2020.202009_citibike_tripdata_3"], "model.data_transform.mar_2020": ["source.data_transform.staging_2020.202003_citibike_tripdata_1", "source.data_transform.staging_2020.202003_citibike_tripdata_2"], "model.data_transform.jul_2020": ["source.data_transform.staging_2020.202007_citibike_tripdata_1", "source.data_transform.staging_2020.202007_citibike_tripdata_2", "source.data_transform.staging_2020.202007_citibike_tripdata_3"], "test.data_transform.unique_fct_citibike_rides_ride_id.283318838a": ["model.data_transform.fct_citibike_rides"], "test.data_transform.accepted_values_fct_citibike_rides_rideable_type__electric_bike__classic_bike.a470a25f4b": ["model.data_transform.fct_citibike_rides"], "test.data_transform.accepted_values_fct_citibike_rides_member_casual__member__casual.17b1cd2173": ["model.data_transform.fct_citibike_rides"], "test.data_transform.unique_combined_years_ride_id.183b32f269": ["model.data_transform.combined_years"], "test.data_transform.accepted_values_combined_years_rideable_type__electric_bike__classic_bike.f71ae629f9": ["model.data_transform.combined_years"], "test.data_transform.accepted_values_combined_years_member_casual__member__casual.3562887647": ["model.data_transform.combined_years"], "test.data_transform.unique_jan_2025_ride_id.a6afb1426b": ["model.data_transform.jan_2025"], "test.data_transform.accepted_values_jan_2025_rideable_type__electric_bike__classic_bike.dd88220125": ["model.data_transform.jan_2025"], "test.data_transform.accepted_values_jan_2025_member_casual__member__casual.0028b86617": ["model.data_transform.jan_2025"], "test.data_transform.validate_month_jan_2025_ended_at__1__started_at.885e570385": ["model.data_transform.jan_2025"], "test.data_transform.unique_feb_2025_ride_id.07deac57cb": ["model.data_transform.feb_2025"], "test.data_transform.accepted_values_feb_2025_rideable_type__electric_bike__classic_bike.ac52a64a31": ["model.data_transform.feb_2025"], "test.data_transform.accepted_values_feb_2025_member_casual__member__casual.586c01d656": ["model.data_transform.feb_2025"], "test.data_transform.validate_month_feb_2025_ended_at__2__started_at.01dbad3b21": ["model.data_transform.feb_2025"], "test.data_transform.unique_yr_2025_ride_id.1093d6c21c": ["model.data_transform.yr_2025"], "test.data_transform.accepted_values_yr_2025_rideable_type__electric_bike__classic_bike.fcc9be54c2": ["model.data_transform.yr_2025"], "test.data_transform.accepted_values_yr_2025_member_casual__member__casual.1a2ccdae22": ["model.data_transform.yr_2025"], "test.data_transform.unique_jan_2022_ride_id.1e0255a09d": ["model.data_transform.jan_2022"], "test.data_transform.accepted_values_jan_2022_rideable_type__electric_bike__classic_bike.a3817d042e": ["model.data_transform.jan_2022"], "test.data_transform.accepted_values_jan_2022_member_casual__member__casual.16e8af418c": ["model.data_transform.jan_2022"], "test.data_transform.validate_month_jan_2022_ended_at__1__started_at.dd8cbfc979": ["model.data_transform.jan_2022"], "test.data_transform.unique_feb_2022_ride_id.36575471c4": ["model.data_transform.feb_2022"], "test.data_transform.accepted_values_feb_2022_rideable_type__electric_bike__classic_bike.f8458ca3e7": ["model.data_transform.feb_2022"], "test.data_transform.accepted_values_feb_2022_member_casual__member__casual.5f65f69eb2": ["model.data_transform.feb_2022"], "test.data_transform.validate_month_feb_2022_ended_at__2__started_at.ceaf7113a8": ["model.data_transform.feb_2022"], "test.data_transform.unique_mar_2022_ride_id.21df8e8ac2": ["model.data_transform.mar_2022"], "test.data_transform.accepted_values_mar_2022_rideable_type__electric_bike__classic_bike.0837a03467": ["model.data_transform.mar_2022"], "test.data_transform.accepted_values_mar_2022_member_casual__member__casual.b285c69f9d": ["model.data_transform.mar_2022"], "test.data_transform.validate_month_mar_2022_ended_at__3__started_at.529fd2054d": ["model.data_transform.mar_2022"], "test.data_transform.unique_apr_2022_ride_id.04b95a0f5f": ["model.data_transform.apr_2022"], "test.data_transform.accepted_values_apr_2022_rideable_type__electric_bike__classic_bike.41d411c416": ["model.data_transform.apr_2022"], "test.data_transform.accepted_values_apr_2022_member_casual__member__casual.c53995501b": ["model.data_transform.apr_2022"], "test.data_transform.validate_month_apr_2022_ended_at__4__started_at.d9a58d3cd9": ["model.data_transform.apr_2022"], "test.data_transform.unique_may_2022_ride_id.af62242e63": ["model.data_transform.may_2022"], "test.data_transform.accepted_values_may_2022_rideable_type__electric_bike__classic_bike.a1a65f1e1a": ["model.data_transform.may_2022"], "test.data_transform.accepted_values_may_2022_member_casual__member__casual.38217d39e1": ["model.data_transform.may_2022"], "test.data_transform.validate_month_may_2022_ended_at__5__started_at.04b52bb967": ["model.data_transform.may_2022"], "test.data_transform.unique_jun_2022_ride_id.1e7ad22465": ["model.data_transform.jun_2022"], "test.data_transform.accepted_values_jun_2022_rideable_type__electric_bike__classic_bike.9261606d25": ["model.data_transform.jun_2022"], "test.data_transform.accepted_values_jun_2022_member_casual__member__casual.52301af8b5": ["model.data_transform.jun_2022"], "test.data_transform.validate_month_jun_2022_ended_at__6__started_at.86dcfd7ac7": ["model.data_transform.jun_2022"], "test.data_transform.unique_jul_2022_ride_id.702f94d5cc": ["model.data_transform.jul_2022"], "test.data_transform.accepted_values_jul_2022_rideable_type__electric_bike__classic_bike.bcbe03166a": ["model.data_transform.jul_2022"], "test.data_transform.accepted_values_jul_2022_member_casual__member__casual.2fc053c05a": ["model.data_transform.jul_2022"], "test.data_transform.validate_month_jul_2022_ended_at__7__started_at.1c7c88371a": ["model.data_transform.jul_2022"], "test.data_transform.unique_aug_2022_ride_id.ffdd4382ad": ["model.data_transform.aug_2022"], "test.data_transform.accepted_values_aug_2022_rideable_type__electric_bike__classic_bike.51b0090758": ["model.data_transform.aug_2022"], "test.data_transform.accepted_values_aug_2022_member_casual__member__casual.fc18f0d350": ["model.data_transform.aug_2022"], "test.data_transform.validate_month_aug_2022_ended_at__8__started_at.f45a5b8f5f": ["model.data_transform.aug_2022"], "test.data_transform.unique_sep_2022_ride_id.a8d3fafc02": ["model.data_transform.sep_2022"], "test.data_transform.accepted_values_sep_2022_rideable_type__electric_bike__classic_bike.c3dcf466d2": ["model.data_transform.sep_2022"], "test.data_transform.accepted_values_sep_2022_member_casual__member__casual.0d0a35672f": ["model.data_transform.sep_2022"], "test.data_transform.validate_month_sep_2022_ended_at__9__started_at.84fe2b5d2c": ["model.data_transform.sep_2022"], "test.data_transform.unique_oct_2022_ride_id.796b2d8c1e": ["model.data_transform.oct_2022"], "test.data_transform.accepted_values_oct_2022_rideable_type__electric_bike__classic_bike.57fd12192f": ["model.data_transform.oct_2022"], "test.data_transform.accepted_values_oct_2022_member_casual__member__casual.4e41505c90": ["model.data_transform.oct_2022"], "test.data_transform.validate_month_oct_2022_ended_at__10__started_at.16cef01c2c": ["model.data_transform.oct_2022"], "test.data_transform.unique_nov_2022_ride_id.f19a66835e": ["model.data_transform.nov_2022"], "test.data_transform.accepted_values_nov_2022_rideable_type__electric_bike__classic_bike.f7b434490c": ["model.data_transform.nov_2022"], "test.data_transform.accepted_values_nov_2022_member_casual__member__casual.455565c14e": ["model.data_transform.nov_2022"], "test.data_transform.validate_month_nov_2022_ended_at__11__started_at.d80aa41b02": ["model.data_transform.nov_2022"], "test.data_transform.unique_dec_2022_ride_id.bbbffc9573": ["model.data_transform.dec_2022"], "test.data_transform.accepted_values_dec_2022_rideable_type__electric_bike__classic_bike.dc1b3c80b8": ["model.data_transform.dec_2022"], "test.data_transform.accepted_values_dec_2022_member_casual__member__casual.135dfc2ca1": ["model.data_transform.dec_2022"], "test.data_transform.validate_month_dec_2022_ended_at__12__started_at.1beba005a6": ["model.data_transform.dec_2022"], "test.data_transform.unique_yr_2022_ride_id.d2430b5cbc": ["model.data_transform.yr_2022"], "test.data_transform.accepted_values_yr_2022_rideable_type__electric_bike__classic_bike.1fc8016972": ["model.data_transform.yr_2022"], "test.data_transform.accepted_values_yr_2022_member_casual__member__casual.d3f9bca4d6": ["model.data_transform.yr_2022"], "test.data_transform.unique_jan_2023_ride_id.1074116e25": ["model.data_transform.jan_2023"], "test.data_transform.accepted_values_jan_2023_rideable_type__electric_bike__classic_bike.d53d53383d": ["model.data_transform.jan_2023"], "test.data_transform.accepted_values_jan_2023_member_casual__member__casual.2ef1f5c2fe": ["model.data_transform.jan_2023"], "test.data_transform.validate_month_jan_2023_ended_at__1__started_at.b0c1fa5eb4": ["model.data_transform.jan_2023"], "test.data_transform.unique_feb_2023_ride_id.add79ff186": ["model.data_transform.feb_2023"], "test.data_transform.accepted_values_feb_2023_rideable_type__electric_bike__classic_bike.51e394a011": ["model.data_transform.feb_2023"], "test.data_transform.accepted_values_feb_2023_member_casual__member__casual.031e289129": ["model.data_transform.feb_2023"], "test.data_transform.validate_month_feb_2023_ended_at__2__started_at.7ea791c459": ["model.data_transform.feb_2023"], "test.data_transform.unique_mar_2023_ride_id.89fa5a8337": ["model.data_transform.mar_2023"], "test.data_transform.accepted_values_mar_2023_rideable_type__electric_bike__classic_bike.aa67d77428": ["model.data_transform.mar_2023"], "test.data_transform.accepted_values_mar_2023_member_casual__member__casual.d99f8523f4": ["model.data_transform.mar_2023"], "test.data_transform.validate_month_mar_2023_ended_at__3__started_at.a4624f3dd7": ["model.data_transform.mar_2023"], "test.data_transform.unique_apr_2023_ride_id.07eedfd4ee": ["model.data_transform.apr_2023"], "test.data_transform.accepted_values_apr_2023_rideable_type__electric_bike__classic_bike.01826f186c": ["model.data_transform.apr_2023"], "test.data_transform.accepted_values_apr_2023_member_casual__member__casual.e5bd71e525": ["model.data_transform.apr_2023"], "test.data_transform.validate_month_apr_2023_ended_at__4__started_at.10d1e32fed": ["model.data_transform.apr_2023"], "test.data_transform.unique_may_2023_ride_id.1f84c4fdc3": ["model.data_transform.may_2023"], "test.data_transform.accepted_values_may_2023_rideable_type__electric_bike__classic_bike.f059bb43ab": ["model.data_transform.may_2023"], "test.data_transform.accepted_values_may_2023_member_casual__member__casual.a5d49eea1a": ["model.data_transform.may_2023"], "test.data_transform.validate_month_may_2023_ended_at__5__started_at.ae8e43b7d4": ["model.data_transform.may_2023"], "test.data_transform.unique_jun_2023_ride_id.82604d40d1": ["model.data_transform.jun_2023"], "test.data_transform.accepted_values_jun_2023_rideable_type__electric_bike__classic_bike.08d373c057": ["model.data_transform.jun_2023"], "test.data_transform.accepted_values_jun_2023_member_casual__member__casual.a116e80271": ["model.data_transform.jun_2023"], "test.data_transform.validate_month_jun_2023_ended_at__6__started_at.3fc3d08e4d": ["model.data_transform.jun_2023"], "test.data_transform.unique_jul_2023_ride_id.390f336acd": ["model.data_transform.jul_2023"], "test.data_transform.accepted_values_jul_2023_rideable_type__electric_bike__classic_bike.4fade08a47": ["model.data_transform.jul_2023"], "test.data_transform.accepted_values_jul_2023_member_casual__member__casual.90581b41a9": ["model.data_transform.jul_2023"], "test.data_transform.validate_month_jul_2023_ended_at__7__started_at.e61e886fbd": ["model.data_transform.jul_2023"], "test.data_transform.unique_aug_2023_ride_id.a3134bce14": ["model.data_transform.aug_2023"], "test.data_transform.accepted_values_aug_2023_rideable_type__electric_bike__classic_bike.0300a72286": ["model.data_transform.aug_2023"], "test.data_transform.accepted_values_aug_2023_member_casual__member__casual.5dab70bfd7": ["model.data_transform.aug_2023"], "test.data_transform.validate_month_aug_2023_ended_at__8__started_at.d75cf30380": ["model.data_transform.aug_2023"], "test.data_transform.unique_sep_2023_ride_id.ca113f723d": ["model.data_transform.sep_2023"], "test.data_transform.accepted_values_sep_2023_rideable_type__electric_bike__classic_bike.67819e4320": ["model.data_transform.sep_2023"], "test.data_transform.accepted_values_sep_2023_member_casual__member__casual.02046c4e8e": ["model.data_transform.sep_2023"], "test.data_transform.validate_month_sep_2023_ended_at__9__started_at.31f9a134de": ["model.data_transform.sep_2023"], "test.data_transform.unique_oct_2023_ride_id.60aeda33c7": ["model.data_transform.oct_2023"], "test.data_transform.accepted_values_oct_2023_rideable_type__electric_bike__classic_bike.3cf8054fdb": ["model.data_transform.oct_2023"], "test.data_transform.accepted_values_oct_2023_member_casual__member__casual.afb9e46c90": ["model.data_transform.oct_2023"], "test.data_transform.validate_month_oct_2023_ended_at__10__started_at.0227a79041": ["model.data_transform.oct_2023"], "test.data_transform.unique_nov_2023_ride_id.f85259dd8c": ["model.data_transform.nov_2023"], "test.data_transform.accepted_values_nov_2023_rideable_type__electric_bike__classic_bike.fec3f24575": ["model.data_transform.nov_2023"], "test.data_transform.accepted_values_nov_2023_member_casual__member__casual.16f3838708": ["model.data_transform.nov_2023"], "test.data_transform.validate_month_nov_2023_ended_at__11__started_at.6cc26b335c": ["model.data_transform.nov_2023"], "test.data_transform.unique_dec_2023_ride_id.a1609de2e7": ["model.data_transform.dec_2023"], "test.data_transform.accepted_values_dec_2023_rideable_type__electric_bike__classic_bike.acd656a22f": ["model.data_transform.dec_2023"], "test.data_transform.accepted_values_dec_2023_member_casual__member__casual.957fa6d2c3": ["model.data_transform.dec_2023"], "test.data_transform.validate_month_dec_2023_ended_at__12__started_at.f7ee9b2cea": ["model.data_transform.dec_2023"], "test.data_transform.unique_yr_2023_ride_id.7217ceb8ed": ["model.data_transform.yr_2023"], "test.data_transform.accepted_values_yr_2023_rideable_type__electric_bike__classic_bike.90a7544b2e": ["model.data_transform.yr_2023"], "test.data_transform.accepted_values_yr_2023_member_casual__member__casual.b43b04bfd1": ["model.data_transform.yr_2023"], "test.data_transform.unique_jan_2024_ride_id.7dfa0fb566": ["model.data_transform.jan_2024"], "test.data_transform.accepted_values_jan_2024_rideable_type__electric_bike__classic_bike.9e6ba60770": ["model.data_transform.jan_2024"], "test.data_transform.accepted_values_jan_2024_member_casual__member__casual.3fab89f86e": ["model.data_transform.jan_2024"], "test.data_transform.validate_month_jan_2024_ended_at__1__started_at.3f841659d1": ["model.data_transform.jan_2024"], "test.data_transform.unique_feb_2024_ride_id.369c1cf474": ["model.data_transform.feb_2024"], "test.data_transform.accepted_values_feb_2024_rideable_type__electric_bike__classic_bike.c3deffbddd": ["model.data_transform.feb_2024"], "test.data_transform.accepted_values_feb_2024_member_casual__member__casual.f7397df4e6": ["model.data_transform.feb_2024"], "test.data_transform.validate_month_feb_2024_ended_at__2__started_at.c35b99c9d9": ["model.data_transform.feb_2024"], "test.data_transform.unique_mar_2024_ride_id.0346c70344": ["model.data_transform.mar_2024"], "test.data_transform.accepted_values_mar_2024_rideable_type__electric_bike__classic_bike.a2e4c869e2": ["model.data_transform.mar_2024"], "test.data_transform.accepted_values_mar_2024_member_casual__member__casual.2257878b6c": ["model.data_transform.mar_2024"], "test.data_transform.validate_month_mar_2024_ended_at__3__started_at.2e90ea48db": ["model.data_transform.mar_2024"], "test.data_transform.unique_apr_2024_ride_id.518bcab2a1": ["model.data_transform.apr_2024"], "test.data_transform.accepted_values_apr_2024_rideable_type__electric_bike__classic_bike.ae30a9076a": ["model.data_transform.apr_2024"], "test.data_transform.accepted_values_apr_2024_member_casual__member__casual.131b1d0e93": ["model.data_transform.apr_2024"], "test.data_transform.validate_month_apr_2024_ended_at__4__started_at.701bed14c8": ["model.data_transform.apr_2024"], "test.data_transform.unique_may_2024_ride_id.f90b9f27f2": ["model.data_transform.may_2024"], "test.data_transform.accepted_values_may_2024_rideable_type__electric_bike__classic_bike.05dd923e47": ["model.data_transform.may_2024"], "test.data_transform.accepted_values_may_2024_member_casual__member__casual.9a77965565": ["model.data_transform.may_2024"], "test.data_transform.validate_month_may_2024_ended_at__5__started_at.38feb2e3e4": ["model.data_transform.may_2024"], "test.data_transform.unique_jun_2024_ride_id.2085d3af2b": ["model.data_transform.jun_2024"], "test.data_transform.accepted_values_jun_2024_rideable_type__electric_bike__classic_bike.296748931c": ["model.data_transform.jun_2024"], "test.data_transform.accepted_values_jun_2024_member_casual__member__casual.cde6875ce9": ["model.data_transform.jun_2024"], "test.data_transform.validate_month_jun_2024_ended_at__6__started_at.a078811362": ["model.data_transform.jun_2024"], "test.data_transform.unique_jul_2024_ride_id.0a23064a44": ["model.data_transform.jul_2024"], "test.data_transform.accepted_values_jul_2024_rideable_type__electric_bike__classic_bike.ac4bda1108": ["model.data_transform.jul_2024"], "test.data_transform.accepted_values_jul_2024_member_casual__member__casual.00e92abb1b": ["model.data_transform.jul_2024"], "test.data_transform.validate_month_jul_2024_ended_at__7__started_at.19592997b7": ["model.data_transform.jul_2024"], "test.data_transform.unique_aug_2024_ride_id.e1479348f4": ["model.data_transform.aug_2024"], "test.data_transform.accepted_values_aug_2024_rideable_type__electric_bike__classic_bike.8d0aecc8cd": ["model.data_transform.aug_2024"], "test.data_transform.accepted_values_aug_2024_member_casual__member__casual.a210aaa053": ["model.data_transform.aug_2024"], "test.data_transform.validate_month_aug_2024_ended_at__8__started_at.7f962fb652": ["model.data_transform.aug_2024"], "test.data_transform.unique_sep_2024_ride_id.05e447f34c": ["model.data_transform.sep_2024"], "test.data_transform.accepted_values_sep_2024_rideable_type__electric_bike__classic_bike.a57f13c11c": ["model.data_transform.sep_2024"], "test.data_transform.accepted_values_sep_2024_member_casual__member__casual.81d0d449db": ["model.data_transform.sep_2024"], "test.data_transform.validate_month_sep_2024_ended_at__9__started_at.c7a06f6cfe": ["model.data_transform.sep_2024"], "test.data_transform.unique_oct_2024_ride_id.f9ffd523c2": ["model.data_transform.oct_2024"], "test.data_transform.accepted_values_oct_2024_rideable_type__electric_bike__classic_bike.37cb9502e3": ["model.data_transform.oct_2024"], "test.data_transform.accepted_values_oct_2024_member_casual__member__casual.1498a91654": ["model.data_transform.oct_2024"], "test.data_transform.validate_month_oct_2024_ended_at__10__started_at.74a4af765f": ["model.data_transform.oct_2024"], "test.data_transform.unique_nov_2024_ride_id.bd7d31bb66": ["model.data_transform.nov_2024"], "test.data_transform.accepted_values_nov_2024_rideable_type__electric_bike__classic_bike.9cb41102fe": ["model.data_transform.nov_2024"], "test.data_transform.accepted_values_nov_2024_member_casual__member__casual.f782eeefff": ["model.data_transform.nov_2024"], "test.data_transform.validate_month_nov_2024_ended_at__11__started_at.8f47700fc8": ["model.data_transform.nov_2024"], "test.data_transform.unique_dec_2024_ride_id.e63a6867b0": ["model.data_transform.dec_2024"], "test.data_transform.accepted_values_dec_2024_rideable_type__electric_bike__classic_bike.e5cb433641": ["model.data_transform.dec_2024"], "test.data_transform.accepted_values_dec_2024_member_casual__member__casual.ba811fe960": ["model.data_transform.dec_2024"], "test.data_transform.validate_month_dec_2024_ended_at__12__started_at.a0c703573b": ["model.data_transform.dec_2024"], "test.data_transform.unique_yr_2024_ride_id.1de4ca9eb3": ["model.data_transform.yr_2024"], "test.data_transform.accepted_values_yr_2024_rideable_type__electric_bike__classic_bike.423adb3059": ["model.data_transform.yr_2024"], "test.data_transform.accepted_values_yr_2024_member_casual__member__casual.f5d6a256f0": ["model.data_transform.yr_2024"], "test.data_transform.unique_jan_2021_ride_id.38f514c303": ["model.data_transform.jan_2021"], "test.data_transform.accepted_values_jan_2021_rideable_type__electric_bike__classic_bike.af59a3aeb3": ["model.data_transform.jan_2021"], "test.data_transform.accepted_values_jan_2021_member_casual__member__casual.73faa5a5dc": ["model.data_transform.jan_2021"], "test.data_transform.validate_month_jan_2021_ended_at__1__started_at.7d7fccaff4": ["model.data_transform.jan_2021"], "test.data_transform.unique_feb_2021_ride_id.798dd40563": ["model.data_transform.feb_2021"], "test.data_transform.accepted_values_feb_2021_rideable_type__electric_bike__classic_bike.347ac0aef9": ["model.data_transform.feb_2021"], "test.data_transform.accepted_values_feb_2021_member_casual__member__casual.9bfbe9dfa2": ["model.data_transform.feb_2021"], "test.data_transform.validate_month_feb_2021_ended_at__2__started_at.4ec15d2767": ["model.data_transform.feb_2021"], "test.data_transform.unique_mar_2021_ride_id.e07d6d2ddf": ["model.data_transform.mar_2021"], "test.data_transform.accepted_values_mar_2021_rideable_type__electric_bike__classic_bike.84bfb07b65": ["model.data_transform.mar_2021"], "test.data_transform.accepted_values_mar_2021_member_casual__member__casual.c63d9ab4d3": ["model.data_transform.mar_2021"], "test.data_transform.validate_month_mar_2021_ended_at__3__started_at.b217cf2f94": ["model.data_transform.mar_2021"], "test.data_transform.unique_apr_2021_ride_id.7e13021df3": ["model.data_transform.apr_2021"], "test.data_transform.accepted_values_apr_2021_rideable_type__electric_bike__classic_bike.f49a4db029": ["model.data_transform.apr_2021"], "test.data_transform.accepted_values_apr_2021_member_casual__member__casual.c4aa44d3af": ["model.data_transform.apr_2021"], "test.data_transform.validate_month_apr_2021_ended_at__4__started_at.2e0eea5e91": ["model.data_transform.apr_2021"], "test.data_transform.unique_may_2021_ride_id.2ea7626782": ["model.data_transform.may_2021"], "test.data_transform.accepted_values_may_2021_rideable_type__electric_bike__classic_bike.e375bb63f4": ["model.data_transform.may_2021"], "test.data_transform.accepted_values_may_2021_member_casual__member__casual.1c07c6cfc4": ["model.data_transform.may_2021"], "test.data_transform.validate_month_may_2021_ended_at__5__started_at.4ca76f818f": ["model.data_transform.may_2021"], "test.data_transform.unique_jun_2021_ride_id.7d5ede7720": ["model.data_transform.jun_2021"], "test.data_transform.accepted_values_jun_2021_rideable_type__electric_bike__classic_bike.fddc612ff9": ["model.data_transform.jun_2021"], "test.data_transform.accepted_values_jun_2021_member_casual__member__casual.22ffd8b463": ["model.data_transform.jun_2021"], "test.data_transform.validate_month_jun_2021_ended_at__6__started_at.6bc752d476": ["model.data_transform.jun_2021"], "test.data_transform.unique_jul_2021_ride_id.a582178788": ["model.data_transform.jul_2021"], "test.data_transform.accepted_values_jul_2021_rideable_type__electric_bike__classic_bike.21c9a88fb5": ["model.data_transform.jul_2021"], "test.data_transform.accepted_values_jul_2021_member_casual__member__casual.a29b5393b0": ["model.data_transform.jul_2021"], "test.data_transform.validate_month_jul_2021_ended_at__7__started_at.3097d5da75": ["model.data_transform.jul_2021"], "test.data_transform.unique_aug_2021_ride_id.d87d9e6777": ["model.data_transform.aug_2021"], "test.data_transform.accepted_values_aug_2021_rideable_type__electric_bike__classic_bike.012aea4225": ["model.data_transform.aug_2021"], "test.data_transform.accepted_values_aug_2021_member_casual__member__casual.f3756a66ce": ["model.data_transform.aug_2021"], "test.data_transform.validate_month_aug_2021_ended_at__8__started_at.e0ce3a0178": ["model.data_transform.aug_2021"], "test.data_transform.unique_sep_2021_ride_id.32890cd237": ["model.data_transform.sep_2021"], "test.data_transform.accepted_values_sep_2021_rideable_type__electric_bike__classic_bike.c4f3cf2112": ["model.data_transform.sep_2021"], "test.data_transform.accepted_values_sep_2021_member_casual__member__casual.3be55b72cc": ["model.data_transform.sep_2021"], "test.data_transform.validate_month_sep_2021_ended_at__9__started_at.4f1faa19df": ["model.data_transform.sep_2021"], "test.data_transform.unique_oct_2021_ride_id.2f8cb722e7": ["model.data_transform.oct_2021"], "test.data_transform.accepted_values_oct_2021_rideable_type__electric_bike__classic_bike.9840a619e2": ["model.data_transform.oct_2021"], "test.data_transform.accepted_values_oct_2021_member_casual__member__casual.c407993356": ["model.data_transform.oct_2021"], "test.data_transform.validate_month_oct_2021_ended_at__10__started_at.9f60196db4": ["model.data_transform.oct_2021"], "test.data_transform.unique_nov_2021_ride_id.533acd63fc": ["model.data_transform.nov_2021"], "test.data_transform.accepted_values_nov_2021_rideable_type__electric_bike__classic_bike.02a6c0d9b1": ["model.data_transform.nov_2021"], "test.data_transform.accepted_values_nov_2021_member_casual__member__casual.769f004905": ["model.data_transform.nov_2021"], "test.data_transform.validate_month_nov_2021_ended_at__11__started_at.de83a5afbb": ["model.data_transform.nov_2021"], "test.data_transform.unique_dec_2021_ride_id.7cef2ecfc6": ["model.data_transform.dec_2021"], "test.data_transform.accepted_values_dec_2021_rideable_type__electric_bike__classic_bike.b3361baeb7": ["model.data_transform.dec_2021"], "test.data_transform.accepted_values_dec_2021_member_casual__member__casual.e47c83f669": ["model.data_transform.dec_2021"], "test.data_transform.validate_month_dec_2021_ended_at__12__started_at.dc415b74bb": ["model.data_transform.dec_2021"], "test.data_transform.unique_yr_2021_ride_id.21f7ca9901": ["model.data_transform.yr_2021"], "test.data_transform.accepted_values_yr_2021_rideable_type__electric_bike__classic_bike.b7ea1ba880": ["model.data_transform.yr_2021"], "test.data_transform.accepted_values_yr_2021_member_casual__member__casual.53901ff579": ["model.data_transform.yr_2021"], "test.data_transform.unique_jan_2020_ride_id.d7f848f40f": ["model.data_transform.jan_2020"], "test.data_transform.accepted_values_jan_2020_rideable_type__electric_bike__classic_bike.12497815ca": ["model.data_transform.jan_2020"], "test.data_transform.accepted_values_jan_2020_member_casual__member__casual.d96c161781": ["model.data_transform.jan_2020"], "test.data_transform.validate_month_jan_2020_ended_at__1__started_at.257dda2cf0": ["model.data_transform.jan_2020"], "test.data_transform.unique_feb_2020_ride_id.2863b73a76": ["model.data_transform.feb_2020"], "test.data_transform.accepted_values_feb_2020_rideable_type__electric_bike__classic_bike.98681257a0": ["model.data_transform.feb_2020"], "test.data_transform.accepted_values_feb_2020_member_casual__member__casual.1ab0133baf": ["model.data_transform.feb_2020"], "test.data_transform.validate_month_feb_2020_ended_at__2__started_at.4814bc395a": ["model.data_transform.feb_2020"], "test.data_transform.unique_mar_2020_ride_id.c99a254af6": ["model.data_transform.mar_2020"], "test.data_transform.accepted_values_mar_2020_rideable_type__electric_bike__classic_bike.7c02e59976": ["model.data_transform.mar_2020"], "test.data_transform.accepted_values_mar_2020_member_casual__member__casual.7293d4266b": ["model.data_transform.mar_2020"], "test.data_transform.validate_month_mar_2020_ended_at__3__started_at.c7c934cd64": ["model.data_transform.mar_2020"], "test.data_transform.unique_apr_2020_ride_id.02de6a5c7b": ["model.data_transform.apr_2020"], "test.data_transform.accepted_values_apr_2020_rideable_type__electric_bike__classic_bike.d067ffd016": ["model.data_transform.apr_2020"], "test.data_transform.accepted_values_apr_2020_member_casual__member__casual.2244954a2f": ["model.data_transform.apr_2020"], "test.data_transform.validate_month_apr_2020_ended_at__4__started_at.9ab8e8eab1": ["model.data_transform.apr_2020"], "test.data_transform.unique_may_2020_ride_id.78e3c89f75": ["model.data_transform.may_2020"], "test.data_transform.accepted_values_may_2020_rideable_type__electric_bike__classic_bike.b54580f2ec": ["model.data_transform.may_2020"], "test.data_transform.accepted_values_may_2020_member_casual__member__casual.024c76cb43": ["model.data_transform.may_2020"], "test.data_transform.validate_month_may_2020_ended_at__5__started_at.3fc7180008": ["model.data_transform.may_2020"], "test.data_transform.unique_jun_2020_ride_id.c525f2e358": ["model.data_transform.jun_2020"], "test.data_transform.accepted_values_jun_2020_rideable_type__electric_bike__classic_bike.5f2c1f91ac": ["model.data_transform.jun_2020"], "test.data_transform.accepted_values_jun_2020_member_casual__member__casual.754f3c2310": ["model.data_transform.jun_2020"], "test.data_transform.validate_month_jun_2020_ended_at__6__started_at.6727663680": ["model.data_transform.jun_2020"], "test.data_transform.unique_jul_2020_ride_id.ffba163677": ["model.data_transform.jul_2020"], "test.data_transform.accepted_values_jul_2020_rideable_type__electric_bike__classic_bike.b6da95939a": ["model.data_transform.jul_2020"], "test.data_transform.accepted_values_jul_2020_member_casual__member__casual.64e1bf3713": ["model.data_transform.jul_2020"], "test.data_transform.validate_month_jul_2020_ended_at__7__started_at.221b4b2b79": ["model.data_transform.jul_2020"], "test.data_transform.unique_aug_2020_ride_id.4b7b980c18": ["model.data_transform.aug_2020"], "test.data_transform.accepted_values_aug_2020_rideable_type__electric_bike__classic_bike.613c74bb29": ["model.data_transform.aug_2020"], "test.data_transform.accepted_values_aug_2020_member_casual__member__casual.1d2e2220a2": ["model.data_transform.aug_2020"], "test.data_transform.validate_month_aug_2020_ended_at__8__started_at.3bda851154": ["model.data_transform.aug_2020"], "test.data_transform.unique_sep_2020_ride_id.691437c7e4": ["model.data_transform.sep_2020"], "test.data_transform.accepted_values_sep_2020_rideable_type__electric_bike__classic_bike.144c92218b": ["model.data_transform.sep_2020"], "test.data_transform.accepted_values_sep_2020_member_casual__member__casual.7345a381fb": ["model.data_transform.sep_2020"], "test.data_transform.validate_month_sep_2020_ended_at__9__started_at.4f7fb6c985": ["model.data_transform.sep_2020"], "test.data_transform.unique_oct_2020_ride_id.450c9e6451": ["model.data_transform.oct_2020"], "test.data_transform.accepted_values_oct_2020_rideable_type__electric_bike__classic_bike.6be618cf23": ["model.data_transform.oct_2020"], "test.data_transform.accepted_values_oct_2020_member_casual__member__casual.3d2830f139": ["model.data_transform.oct_2020"], "test.data_transform.validate_month_oct_2020_ended_at__10__started_at.36c2f3703c": ["model.data_transform.oct_2020"], "test.data_transform.unique_nov_2020_ride_id.f410d7ba06": ["model.data_transform.nov_2020"], "test.data_transform.accepted_values_nov_2020_rideable_type__electric_bike__classic_bike.1a6fd96aee": ["model.data_transform.nov_2020"], "test.data_transform.accepted_values_nov_2020_member_casual__member__casual.17e252714c": ["model.data_transform.nov_2020"], "test.data_transform.validate_month_nov_2020_ended_at__11__started_at.4a83d36de2": ["model.data_transform.nov_2020"], "test.data_transform.unique_dec_2020_ride_id.865a6e795e": ["model.data_transform.dec_2020"], "test.data_transform.accepted_values_dec_2020_rideable_type__electric_bike__classic_bike.8bd26e5ce0": ["model.data_transform.dec_2020"], "test.data_transform.accepted_values_dec_2020_member_casual__member__casual.fdc66d6744": ["model.data_transform.dec_2020"], "test.data_transform.validate_month_dec_2020_ended_at__12__started_at.5b5f2a4319": ["model.data_transform.dec_2020"], "test.data_transform.unique_yr_2020_ride_id.a710725493": ["model.data_transform.yr_2020"], "test.data_transform.accepted_values_yr_2020_rideable_type__electric_bike__classic_bike.5a0f9a6a7d": ["model.data_transform.yr_2020"], "test.data_transform.accepted_values_yr_2020_member_casual__member__casual.5fad00c049": ["model.data_transform.yr_2020"], "test.data_transform.source_unique_staging_2025_202501_citibike_tripdata_1_ride_id.502692c8d3": ["source.data_transform.staging_2025.202501_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.06fcb921da": ["source.data_transform.staging_2025.202501_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_1_member_casual__member__casual.4b04a3b2e7": ["source.data_transform.staging_2025.202501_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2025_202501_citibike_tripdata_2_ride_id.d21916b874": ["source.data_transform.staging_2025.202501_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.f04d434699": ["source.data_transform.staging_2025.202501_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_2_member_casual__member__casual.8b1c00fe8f": ["source.data_transform.staging_2025.202501_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2025_202501_citibike_tripdata_3_ride_id.1f172a8402": ["source.data_transform.staging_2025.202501_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.f408147714": ["source.data_transform.staging_2025.202501_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_3_member_casual__member__casual.6763462471": ["source.data_transform.staging_2025.202501_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2025_202502_citibike_tripdata_1_ride_id.66660cfd87": ["source.data_transform.staging_2025.202502_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.46e3622553": ["source.data_transform.staging_2025.202502_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_1_member_casual__member__casual.82baa149df": ["source.data_transform.staging_2025.202502_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2025_202502_citibike_tripdata_2_ride_id.8a4aa8ae70": ["source.data_transform.staging_2025.202502_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.488ee4d35e": ["source.data_transform.staging_2025.202502_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_2_member_casual__member__casual.37e4db948e": ["source.data_transform.staging_2025.202502_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2025_202502_citibike_tripdata_3_ride_id.ba289fa730": ["source.data_transform.staging_2025.202502_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.1a98be6ed9": ["source.data_transform.staging_2025.202502_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_3_member_casual__member__casual.e1d0807522": ["source.data_transform.staging_2025.202502_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2022_202201_citibike_tripdata_1_ride_id.d25afd57f4": ["source.data_transform.staging_2022.202201_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202201_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.9d1231d982": ["source.data_transform.staging_2022.202201_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202201_citibike_tripdata_1_member_casual__member__casual.38003786b6": ["source.data_transform.staging_2022.202201_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2022_202201_citibike_tripdata_2_ride_id.5c612b1128": ["source.data_transform.staging_2022.202201_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202201_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.cd32aaa5e2": ["source.data_transform.staging_2022.202201_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202201_citibike_tripdata_2_member_casual__member__casual.251dfae6f2": ["source.data_transform.staging_2022.202201_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2022_202202_citibike_tripdata_1_ride_id.60a5bcaf27": ["source.data_transform.staging_2022.202202_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202202_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.33fc30ea6e": ["source.data_transform.staging_2022.202202_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202202_citibike_tripdata_1_member_casual__member__casual.8d8ffa16f7": ["source.data_transform.staging_2022.202202_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2022_202202_citibike_tripdata_2_ride_id.c374198f51": ["source.data_transform.staging_2022.202202_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202202_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.3bd607ceac": ["source.data_transform.staging_2022.202202_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202202_citibike_tripdata_2_member_casual__member__casual.d4b5d2e16b": ["source.data_transform.staging_2022.202202_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2022_202203_citibike_tripdata_1_ride_id.856d20e9d1": ["source.data_transform.staging_2022.202203_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202203_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.c4f4772db3": ["source.data_transform.staging_2022.202203_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202203_citibike_tripdata_1_member_casual__member__casual.7d2ed3271a": ["source.data_transform.staging_2022.202203_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2022_202203_citibike_tripdata_2_ride_id.bd6eb8c903": ["source.data_transform.staging_2022.202203_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202203_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.91a306b283": ["source.data_transform.staging_2022.202203_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202203_citibike_tripdata_2_member_casual__member__casual.39468999fe": ["source.data_transform.staging_2022.202203_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2022_202204_citibike_tripdata_1_ride_id.89f4d6a012": ["source.data_transform.staging_2022.202204_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.02a4709ece": ["source.data_transform.staging_2022.202204_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_1_member_casual__member__casual.cd7e1bd1e2": ["source.data_transform.staging_2022.202204_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2022_202204_citibike_tripdata_2_ride_id.586f76883d": ["source.data_transform.staging_2022.202204_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.5d370d37ba": ["source.data_transform.staging_2022.202204_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_2_member_casual__member__casual.42dc017c46": ["source.data_transform.staging_2022.202204_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2022_202204_citibike_tripdata_3_ride_id.f72aeee1bf": ["source.data_transform.staging_2022.202204_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.93b6b9e659": ["source.data_transform.staging_2022.202204_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_3_member_casual__member__casual.6822ad17cd": ["source.data_transform.staging_2022.202204_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2022_202205_citibike_tripdata_1_ride_id.1771e82765": ["source.data_transform.staging_2022.202205_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.2d139f2946": ["source.data_transform.staging_2022.202205_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_1_member_casual__member__casual.8a5f161f56": ["source.data_transform.staging_2022.202205_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2022_202205_citibike_tripdata_2_ride_id.f653abb820": ["source.data_transform.staging_2022.202205_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.5e23347676": ["source.data_transform.staging_2022.202205_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_2_member_casual__member__casual.1c6fdb96bb": ["source.data_transform.staging_2022.202205_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2022_202205_citibike_tripdata_3_ride_id.50fd76340d": ["source.data_transform.staging_2022.202205_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.a1fe18b141": ["source.data_transform.staging_2022.202205_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_3_member_casual__member__casual.dcf8cb1303": ["source.data_transform.staging_2022.202205_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2022_202206_citibike_tripdata_1_ride_id.cb4b6f5043": ["source.data_transform.staging_2022.202206_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.10f0df21fe": ["source.data_transform.staging_2022.202206_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_1_member_casual__member__casual.83d5d596ec": ["source.data_transform.staging_2022.202206_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2022_202206_citibike_tripdata_2_ride_id.77fe307ee0": ["source.data_transform.staging_2022.202206_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.33b66fd674": ["source.data_transform.staging_2022.202206_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_2_member_casual__member__casual.951189a091": ["source.data_transform.staging_2022.202206_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2022_202206_citibike_tripdata_3_ride_id.5ce40a289c": ["source.data_transform.staging_2022.202206_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.1182f213d1": ["source.data_transform.staging_2022.202206_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_3_member_casual__member__casual.06fcfc06d7": ["source.data_transform.staging_2022.202206_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2022_202206_citibike_tripdata_4_ride_id.ce011569c2": ["source.data_transform.staging_2022.202206_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.b17562a472": ["source.data_transform.staging_2022.202206_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_4_member_casual__member__casual.b1c8bf49ab": ["source.data_transform.staging_2022.202206_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2022_202207_citibike_tripdata_1_ride_id.f6b6f7ff7b": ["source.data_transform.staging_2022.202207_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.f870f4039e": ["source.data_transform.staging_2022.202207_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_1_member_casual__member__casual.3b7c53faa3": ["source.data_transform.staging_2022.202207_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2022_202207_citibike_tripdata_2_ride_id.aaa4597238": ["source.data_transform.staging_2022.202207_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.eea05106cf": ["source.data_transform.staging_2022.202207_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_2_member_casual__member__casual.b148011e32": ["source.data_transform.staging_2022.202207_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2022_202207_citibike_tripdata_3_ride_id.d461a621eb": ["source.data_transform.staging_2022.202207_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c984fd71be": ["source.data_transform.staging_2022.202207_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_3_member_casual__member__casual.ef85dd4d4a": ["source.data_transform.staging_2022.202207_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2022_202207_citibike_tripdata_4_ride_id.7b47674811": ["source.data_transform.staging_2022.202207_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.12a2797dd4": ["source.data_transform.staging_2022.202207_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_4_member_casual__member__casual.4200d34dda": ["source.data_transform.staging_2022.202207_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2022_202208_citibike_tripdata_1_ride_id.b752128bb3": ["source.data_transform.staging_2022.202208_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d7f71ab3cc": ["source.data_transform.staging_2022.202208_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_1_member_casual__member__casual.5f78276b13": ["source.data_transform.staging_2022.202208_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2022_202208_citibike_tripdata_2_ride_id.84bf2fab34": ["source.data_transform.staging_2022.202208_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.c4a6ef76ec": ["source.data_transform.staging_2022.202208_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_2_member_casual__member__casual.b2e3f7eb36": ["source.data_transform.staging_2022.202208_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2022_202208_citibike_tripdata_3_ride_id.229050d32c": ["source.data_transform.staging_2022.202208_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.a8055c5073": ["source.data_transform.staging_2022.202208_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_3_member_casual__member__casual.064c792ee9": ["source.data_transform.staging_2022.202208_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2022_202208_citibike_tripdata_4_ride_id.bd71130699": ["source.data_transform.staging_2022.202208_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.b96136fef3": ["source.data_transform.staging_2022.202208_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_4_member_casual__member__casual.7cabd0aaef": ["source.data_transform.staging_2022.202208_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2022_202209_citibike_tripdata_1_ride_id.69b513376c": ["source.data_transform.staging_2022.202209_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.1950bfa65e": ["source.data_transform.staging_2022.202209_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_1_member_casual__member__casual.43be26805b": ["source.data_transform.staging_2022.202209_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2022_202209_citibike_tripdata_2_ride_id.9287eb310b": ["source.data_transform.staging_2022.202209_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.b2eab29d1c": ["source.data_transform.staging_2022.202209_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_2_member_casual__member__casual.b4eca9e866": ["source.data_transform.staging_2022.202209_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2022_202209_citibike_tripdata_3_ride_id.fe4877006a": ["source.data_transform.staging_2022.202209_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.16d81435fa": ["source.data_transform.staging_2022.202209_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_3_member_casual__member__casual.e57a1e3dfb": ["source.data_transform.staging_2022.202209_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2022_202209_citibike_tripdata_4_ride_id.c27fc508ca": ["source.data_transform.staging_2022.202209_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.33dede432e": ["source.data_transform.staging_2022.202209_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_4_member_casual__member__casual.b06eb06e1d": ["source.data_transform.staging_2022.202209_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2022_202210_citibike_tripdata_1_ride_id.390d32fb45": ["source.data_transform.staging_2022.202210_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d71e555f91": ["source.data_transform.staging_2022.202210_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_1_member_casual__member__casual.b679530ffa": ["source.data_transform.staging_2022.202210_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2022_202210_citibike_tripdata_2_ride_id.a356515f4c": ["source.data_transform.staging_2022.202210_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.3b148e382e": ["source.data_transform.staging_2022.202210_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_2_member_casual__member__casual.458e088372": ["source.data_transform.staging_2022.202210_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2022_202210_citibike_tripdata_3_ride_id.d290fa3436": ["source.data_transform.staging_2022.202210_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b895dcd5af": ["source.data_transform.staging_2022.202210_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_3_member_casual__member__casual.83cf73a779": ["source.data_transform.staging_2022.202210_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2022_202211_citibike_tripdata_1_ride_id.901ff58b5d": ["source.data_transform.staging_2022.202211_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.e7ec80ec4a": ["source.data_transform.staging_2022.202211_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_1_member_casual__member__casual.de35c257d2": ["source.data_transform.staging_2022.202211_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2022_202211_citibike_tripdata_2_ride_id.642d1a610f": ["source.data_transform.staging_2022.202211_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.7b9d6ccb68": ["source.data_transform.staging_2022.202211_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_2_member_casual__member__casual.b8a04e5f28": ["source.data_transform.staging_2022.202211_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2022_202211_citibike_tripdata_3_ride_id.71487f10cd": ["source.data_transform.staging_2022.202211_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b865047467": ["source.data_transform.staging_2022.202211_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_3_member_casual__member__casual.10a72da3a3": ["source.data_transform.staging_2022.202211_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2022_202212_citibike_tripdata_1_ride_id.822e662f10": ["source.data_transform.staging_2022.202212_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202212_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.12325c9469": ["source.data_transform.staging_2022.202212_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2022_202212_citibike_tripdata_1_member_casual__member__casual.6fab7bc4be": ["source.data_transform.staging_2022.202212_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2022_202212_citibike_tripdata_2_ride_id.10f061f8b1": ["source.data_transform.staging_2022.202212_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202212_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.44c741a425": ["source.data_transform.staging_2022.202212_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2022_202212_citibike_tripdata_2_member_casual__member__casual.f83be4c4ba": ["source.data_transform.staging_2022.202212_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2023_202301_citibike_tripdata_1_ride_id.81bc5c6565": ["source.data_transform.staging_2023.202301_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202301_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.24bd699579": ["source.data_transform.staging_2023.202301_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202301_citibike_tripdata_1_member_casual__member__casual.e67c36625a": ["source.data_transform.staging_2023.202301_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2023_202301_citibike_tripdata_2_ride_id.95144646f2": ["source.data_transform.staging_2023.202301_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202301_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.57f725ca6e": ["source.data_transform.staging_2023.202301_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202301_citibike_tripdata_2_member_casual__member__casual.541abf690c": ["source.data_transform.staging_2023.202301_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2023_202302_citibike_tripdata_1_ride_id.df77abeebf": ["source.data_transform.staging_2023.202302_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202302_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.7b510489df": ["source.data_transform.staging_2023.202302_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202302_citibike_tripdata_1_member_casual__member__casual.aa74171390": ["source.data_transform.staging_2023.202302_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2023_202302_citibike_tripdata_2_ride_id.49849a05ab": ["source.data_transform.staging_2023.202302_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202302_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.58988dbe96": ["source.data_transform.staging_2023.202302_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202302_citibike_tripdata_2_member_casual__member__casual.e6f6833cdf": ["source.data_transform.staging_2023.202302_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2023_202303_citibike_tripdata_1_ride_id.5a9ff50cc0": ["source.data_transform.staging_2023.202303_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.f9be5d298d": ["source.data_transform.staging_2023.202303_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_1_member_casual__member__casual.e0ac68a4ae": ["source.data_transform.staging_2023.202303_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2023_202303_citibike_tripdata_2_ride_id.3a0b9d32bd": ["source.data_transform.staging_2023.202303_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.66c6843a33": ["source.data_transform.staging_2023.202303_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_2_member_casual__member__casual.34c0460743": ["source.data_transform.staging_2023.202303_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2023_202303_citibike_tripdata_3_ride_id.c3932d809c": ["source.data_transform.staging_2023.202303_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.be6459a9a1": ["source.data_transform.staging_2023.202303_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_3_member_casual__member__casual.d4b1ad962f": ["source.data_transform.staging_2023.202303_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2023_202304_citibike_tripdata_1_ride_id.e44aabb9e0": ["source.data_transform.staging_2023.202304_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.970647df40": ["source.data_transform.staging_2023.202304_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_1_member_casual__member__casual.071818cc29": ["source.data_transform.staging_2023.202304_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2023_202304_citibike_tripdata_2_ride_id.2495989b65": ["source.data_transform.staging_2023.202304_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.2bb8e80167": ["source.data_transform.staging_2023.202304_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_2_member_casual__member__casual.9bf18b0893": ["source.data_transform.staging_2023.202304_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2023_202304_citibike_tripdata_3_ride_id.669f8ac7db": ["source.data_transform.staging_2023.202304_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.cd9ebd1819": ["source.data_transform.staging_2023.202304_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_3_member_casual__member__casual.19da833df1": ["source.data_transform.staging_2023.202304_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2023_202305_citibike_tripdata_1_ride_id.990d64de35": ["source.data_transform.staging_2023.202305_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.c7b0de21f7": ["source.data_transform.staging_2023.202305_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_1_member_casual__member__casual.512fe17c3c": ["source.data_transform.staging_2023.202305_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2023_202305_citibike_tripdata_2_ride_id.a660f8f7ed": ["source.data_transform.staging_2023.202305_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.8ceb74d6e9": ["source.data_transform.staging_2023.202305_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_2_member_casual__member__casual.645b5b6596": ["source.data_transform.staging_2023.202305_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2023_202305_citibike_tripdata_3_ride_id.beb699afce": ["source.data_transform.staging_2023.202305_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.9ccd327201": ["source.data_transform.staging_2023.202305_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_3_member_casual__member__casual.f8f8e1dba2": ["source.data_transform.staging_2023.202305_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2023_202305_citibike_tripdata_4_ride_id.13182399ce": ["source.data_transform.staging_2023.202305_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.f392354653": ["source.data_transform.staging_2023.202305_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_4_member_casual__member__casual.b023b511ed": ["source.data_transform.staging_2023.202305_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2023_202306_citibike_tripdata_1_ride_id.548908d88b": ["source.data_transform.staging_2023.202306_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.77a007c156": ["source.data_transform.staging_2023.202306_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_1_member_casual__member__casual.27439f1a8d": ["source.data_transform.staging_2023.202306_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2023_202306_citibike_tripdata_2_ride_id.aa62dd10cd": ["source.data_transform.staging_2023.202306_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.c4d4c174b3": ["source.data_transform.staging_2023.202306_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_2_member_casual__member__casual.1e94854976": ["source.data_transform.staging_2023.202306_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2023_202306_citibike_tripdata_3_ride_id.23bf24d291": ["source.data_transform.staging_2023.202306_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.6e51086472": ["source.data_transform.staging_2023.202306_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_3_member_casual__member__casual.2dca2126ea": ["source.data_transform.staging_2023.202306_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2023_202306_citibike_tripdata_4_ride_id.7ee4dba58b": ["source.data_transform.staging_2023.202306_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.04ba57f9be": ["source.data_transform.staging_2023.202306_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_4_member_casual__member__casual.46183437f7": ["source.data_transform.staging_2023.202306_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2023_202307_citibike_tripdata_1_ride_id.5ed083175c": ["source.data_transform.staging_2023.202307_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.befb9dc7fc": ["source.data_transform.staging_2023.202307_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_1_member_casual__member__casual.0f040b0db8": ["source.data_transform.staging_2023.202307_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2023_202307_citibike_tripdata_2_ride_id.68c1a44ec1": ["source.data_transform.staging_2023.202307_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.e967ac1960": ["source.data_transform.staging_2023.202307_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_2_member_casual__member__casual.f1ed4abb5d": ["source.data_transform.staging_2023.202307_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2023_202307_citibike_tripdata_3_ride_id.d24badf4df": ["source.data_transform.staging_2023.202307_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c3e53cedb4": ["source.data_transform.staging_2023.202307_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_3_member_casual__member__casual.2fbb9c7047": ["source.data_transform.staging_2023.202307_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2023_202307_citibike_tripdata_4_ride_id.5d03214987": ["source.data_transform.staging_2023.202307_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.a989a7c7ed": ["source.data_transform.staging_2023.202307_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_4_member_casual__member__casual.c18da0a869": ["source.data_transform.staging_2023.202307_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2023_202308_citibike_tripdata_1_ride_id.1a79714889": ["source.data_transform.staging_2023.202308_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.83dd22a73f": ["source.data_transform.staging_2023.202308_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_1_member_casual__member__casual.b54c1072f8": ["source.data_transform.staging_2023.202308_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2023_202308_citibike_tripdata_2_ride_id.952717e3e1": ["source.data_transform.staging_2023.202308_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.797ac00c56": ["source.data_transform.staging_2023.202308_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_2_member_casual__member__casual.ba3056da09": ["source.data_transform.staging_2023.202308_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2023_202308_citibike_tripdata_3_ride_id.af9f395666": ["source.data_transform.staging_2023.202308_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.279ec126a7": ["source.data_transform.staging_2023.202308_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_3_member_casual__member__casual.f7fbdf8255": ["source.data_transform.staging_2023.202308_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2023_202308_citibike_tripdata_4_ride_id.275fe7ce2a": ["source.data_transform.staging_2023.202308_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.a251739d4d": ["source.data_transform.staging_2023.202308_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_4_member_casual__member__casual.b771418036": ["source.data_transform.staging_2023.202308_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2023_202309_citibike_tripdata_1_ride_id.230aeb3b4b": ["source.data_transform.staging_2023.202309_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.86306e4c75": ["source.data_transform.staging_2023.202309_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_1_member_casual__member__casual.9162740ebf": ["source.data_transform.staging_2023.202309_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2023_202309_citibike_tripdata_2_ride_id.a703cfc9fc": ["source.data_transform.staging_2023.202309_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.77dc74e850": ["source.data_transform.staging_2023.202309_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_2_member_casual__member__casual.c8eaa2ed28": ["source.data_transform.staging_2023.202309_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2023_202309_citibike_tripdata_3_ride_id.d01f717cf2": ["source.data_transform.staging_2023.202309_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.1a8d556210": ["source.data_transform.staging_2023.202309_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_3_member_casual__member__casual.b14b1303bf": ["source.data_transform.staging_2023.202309_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2023_202309_citibike_tripdata_4_ride_id.444ada612f": ["source.data_transform.staging_2023.202309_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.923d5ae346": ["source.data_transform.staging_2023.202309_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_4_member_casual__member__casual.cfa900e5cf": ["source.data_transform.staging_2023.202309_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2023_202310_citibike_tripdata_1_ride_id.590853bc7c": ["source.data_transform.staging_2023.202310_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.82886257cb": ["source.data_transform.staging_2023.202310_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_1_member_casual__member__casual.60b188b02a": ["source.data_transform.staging_2023.202310_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2023_202310_citibike_tripdata_2_ride_id.0e9c742b01": ["source.data_transform.staging_2023.202310_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d824a977e6": ["source.data_transform.staging_2023.202310_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_2_member_casual__member__casual.6caea0aea6": ["source.data_transform.staging_2023.202310_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2023_202310_citibike_tripdata_3_ride_id.c6726ceeef": ["source.data_transform.staging_2023.202310_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.bcb96aff07": ["source.data_transform.staging_2023.202310_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_3_member_casual__member__casual.0ba5e64a3e": ["source.data_transform.staging_2023.202310_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2023_202310_citibike_tripdata_4_ride_id.f455889270": ["source.data_transform.staging_2023.202310_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.519a2908a6": ["source.data_transform.staging_2023.202310_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_4_member_casual__member__casual.76e7653260": ["source.data_transform.staging_2023.202310_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2023_202311_citibike_tripdata_1_ride_id.c537ed70bc": ["source.data_transform.staging_2023.202311_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.804b475b49": ["source.data_transform.staging_2023.202311_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_1_member_casual__member__casual.72f204fd38": ["source.data_transform.staging_2023.202311_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2023_202311_citibike_tripdata_2_ride_id.c4ca9d9146": ["source.data_transform.staging_2023.202311_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.bccf307e18": ["source.data_transform.staging_2023.202311_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_2_member_casual__member__casual.2d177c4282": ["source.data_transform.staging_2023.202311_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2023_202311_citibike_tripdata_3_ride_id.a01b8419df": ["source.data_transform.staging_2023.202311_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.171ea52344": ["source.data_transform.staging_2023.202311_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_3_member_casual__member__casual.e80c12b3aa": ["source.data_transform.staging_2023.202311_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2023_202312_citibike_tripdata_1_ride_id.1572033f07": ["source.data_transform.staging_2023.202312_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.176e483354": ["source.data_transform.staging_2023.202312_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_1_member_casual__member__casual.3589b387d1": ["source.data_transform.staging_2023.202312_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2023_202312_citibike_tripdata_2_ride_id.5a0bb8a281": ["source.data_transform.staging_2023.202312_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.e8a6e3b4c1": ["source.data_transform.staging_2023.202312_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_2_member_casual__member__casual.3c634055ce": ["source.data_transform.staging_2023.202312_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2023_202312_citibike_tripdata_3_ride_id.bc8b30cd14": ["source.data_transform.staging_2023.202312_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b15f4b9e5e": ["source.data_transform.staging_2023.202312_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_3_member_casual__member__casual.04c6a2e0c6": ["source.data_transform.staging_2023.202312_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2024_202401_citibike_tripdata_ride_id.9c1bfdd0e8": ["source.data_transform.staging_2024.202401_citibike_tripdata"], "test.data_transform.source_accepted_values_staging_2024_202401_citibike_tripdata_rideable_type__electric_bike__classic_bike.9e5955f373": ["source.data_transform.staging_2024.202401_citibike_tripdata"], "test.data_transform.source_accepted_values_staging_2024_202401_citibike_tripdata_member_casual__member__casual.2af7a66c89": ["source.data_transform.staging_2024.202401_citibike_tripdata"], "test.data_transform.source_unique_staging_2024_202402_citibike_tripdata_ride_id.e0a561b57b": ["source.data_transform.staging_2024.202402_citibike_tripdata"], "test.data_transform.source_accepted_values_staging_2024_202402_citibike_tripdata_rideable_type__electric_bike__classic_bike.ab211f12fb": ["source.data_transform.staging_2024.202402_citibike_tripdata"], "test.data_transform.source_accepted_values_staging_2024_202402_citibike_tripdata_member_casual__member__casual.90a16e8e8c": ["source.data_transform.staging_2024.202402_citibike_tripdata"], "test.data_transform.source_unique_staging_2024_202403_citibike_tripdata_ride_id.1e9a4f4be0": ["source.data_transform.staging_2024.202403_citibike_tripdata"], "test.data_transform.source_accepted_values_staging_2024_202403_citibike_tripdata_rideable_type__electric_bike__classic_bike.14f7f02bd0": ["source.data_transform.staging_2024.202403_citibike_tripdata"], "test.data_transform.source_accepted_values_staging_2024_202403_citibike_tripdata_member_casual__member__casual.80a7467e2a": ["source.data_transform.staging_2024.202403_citibike_tripdata"], "test.data_transform.source_unique_staging_2024_202404_citibike_tripdata_ride_id.be41092873": ["source.data_transform.staging_2024.202404_citibike_tripdata"], "test.data_transform.source_accepted_values_staging_2024_202404_citibike_tripdata_rideable_type__electric_bike__classic_bike.225cddb476": ["source.data_transform.staging_2024.202404_citibike_tripdata"], "test.data_transform.source_accepted_values_staging_2024_202404_citibike_tripdata_member_casual__member__casual.68e71aefc6": ["source.data_transform.staging_2024.202404_citibike_tripdata"], "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_1_ride_id.10fd576521": ["source.data_transform.staging_2024.202405_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.25bfb8f006": ["source.data_transform.staging_2024.202405_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_1_member_casual__member__casual.c0c9491f38": ["source.data_transform.staging_2024.202405_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_2_ride_id.8bfedf735d": ["source.data_transform.staging_2024.202405_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d5236d44c7": ["source.data_transform.staging_2024.202405_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_2_member_casual__member__casual.e4b553fe91": ["source.data_transform.staging_2024.202405_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_3_ride_id.2810e73c6b": ["source.data_transform.staging_2024.202405_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b36b453c0f": ["source.data_transform.staging_2024.202405_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_3_member_casual__member__casual.be7f170068": ["source.data_transform.staging_2024.202405_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_4_ride_id.ec6c9bdb3e": ["source.data_transform.staging_2024.202405_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.e3a0fb0e40": ["source.data_transform.staging_2024.202405_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_4_member_casual__member__casual.4da875273a": ["source.data_transform.staging_2024.202405_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_5_ride_id.f36781f59f": ["source.data_transform.staging_2024.202405_citibike_tripdata_5"], "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.e869852efc": ["source.data_transform.staging_2024.202405_citibike_tripdata_5"], "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_5_member_casual__member__casual.3d02d47b38": ["source.data_transform.staging_2024.202405_citibike_tripdata_5"], "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_1_ride_id.66cd4f56c6": ["source.data_transform.staging_2024.202406_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.a7f19a61cc": ["source.data_transform.staging_2024.202406_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_1_member_casual__member__casual.a2d6a2f7e5": ["source.data_transform.staging_2024.202406_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_2_ride_id.6c23a63cd1": ["source.data_transform.staging_2024.202406_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.c05219e414": ["source.data_transform.staging_2024.202406_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_2_member_casual__member__casual.c00b5997cd": ["source.data_transform.staging_2024.202406_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_3_ride_id.50c2f7a482": ["source.data_transform.staging_2024.202406_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c2b1cfeaa7": ["source.data_transform.staging_2024.202406_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_3_member_casual__member__casual.c8fc9a2b8f": ["source.data_transform.staging_2024.202406_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_4_ride_id.1d0b9a609e": ["source.data_transform.staging_2024.202406_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.8724801970": ["source.data_transform.staging_2024.202406_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_4_member_casual__member__casual.30119db7e3": ["source.data_transform.staging_2024.202406_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_5_ride_id.a3ecbc5671": ["source.data_transform.staging_2024.202406_citibike_tripdata_5"], "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.40c37bad28": ["source.data_transform.staging_2024.202406_citibike_tripdata_5"], "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_5_member_casual__member__casual.b4a3bc4a76": ["source.data_transform.staging_2024.202406_citibike_tripdata_5"], "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_1_ride_id.91f4690f74": ["source.data_transform.staging_2024.202407_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.b719633391": ["source.data_transform.staging_2024.202407_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_1_member_casual__member__casual.0b63ff5aa0": ["source.data_transform.staging_2024.202407_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_2_ride_id.1b35ecc34e": ["source.data_transform.staging_2024.202407_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.558cc529bf": ["source.data_transform.staging_2024.202407_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_2_member_casual__member__casual.bf43addef2": ["source.data_transform.staging_2024.202407_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_3_ride_id.d7eaa3af7a": ["source.data_transform.staging_2024.202407_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.9084d80750": ["source.data_transform.staging_2024.202407_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_3_member_casual__member__casual.5eb64c744d": ["source.data_transform.staging_2024.202407_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_4_ride_id.5540e8ef36": ["source.data_transform.staging_2024.202407_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.d0efba79e4": ["source.data_transform.staging_2024.202407_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_4_member_casual__member__casual.20e2125326": ["source.data_transform.staging_2024.202407_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_5_ride_id.ea3d1effd5": ["source.data_transform.staging_2024.202407_citibike_tripdata_5"], "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.8510e1eef5": ["source.data_transform.staging_2024.202407_citibike_tripdata_5"], "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_5_member_casual__member__casual.e45ae9c1fe": ["source.data_transform.staging_2024.202407_citibike_tripdata_5"], "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_1_ride_id.27471140bb": ["source.data_transform.staging_2024.202408_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.af7a2b0803": ["source.data_transform.staging_2024.202408_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_1_member_casual__member__casual.90645fffc2": ["source.data_transform.staging_2024.202408_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_2_ride_id.dc8e6c1013": ["source.data_transform.staging_2024.202408_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.53021c667f": ["source.data_transform.staging_2024.202408_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_2_member_casual__member__casual.3343eecc89": ["source.data_transform.staging_2024.202408_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_3_ride_id.ee75cd89ba": ["source.data_transform.staging_2024.202408_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.045af9f6fc": ["source.data_transform.staging_2024.202408_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_3_member_casual__member__casual.9dd3cae333": ["source.data_transform.staging_2024.202408_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_4_ride_id.c5f8fe150d": ["source.data_transform.staging_2024.202408_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.0d31aa1b38": ["source.data_transform.staging_2024.202408_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_4_member_casual__member__casual.65e3e95e00": ["source.data_transform.staging_2024.202408_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_5_ride_id.b843752ea0": ["source.data_transform.staging_2024.202408_citibike_tripdata_5"], "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.19a1b069c2": ["source.data_transform.staging_2024.202408_citibike_tripdata_5"], "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_5_member_casual__member__casual.71886dec1c": ["source.data_transform.staging_2024.202408_citibike_tripdata_5"], "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_1_ride_id.9af5c69b56": ["source.data_transform.staging_2024.202409_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.6f3eec580a": ["source.data_transform.staging_2024.202409_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_1_member_casual__member__casual.bae5aeff15": ["source.data_transform.staging_2024.202409_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_2_ride_id.7f34812d51": ["source.data_transform.staging_2024.202409_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.90bfc78098": ["source.data_transform.staging_2024.202409_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_2_member_casual__member__casual.2b24d49fdd": ["source.data_transform.staging_2024.202409_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_3_ride_id.c63f75eb36": ["source.data_transform.staging_2024.202409_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.df8da18287": ["source.data_transform.staging_2024.202409_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_3_member_casual__member__casual.c4d49e5e42": ["source.data_transform.staging_2024.202409_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_4_ride_id.4a94a1150e": ["source.data_transform.staging_2024.202409_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.aadd0d6f82": ["source.data_transform.staging_2024.202409_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_4_member_casual__member__casual.1e96cecca5": ["source.data_transform.staging_2024.202409_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_5_ride_id.144de7852e": ["source.data_transform.staging_2024.202409_citibike_tripdata_5"], "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.e1dc23b9e9": ["source.data_transform.staging_2024.202409_citibike_tripdata_5"], "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_5_member_casual__member__casual.95628007c5": ["source.data_transform.staging_2024.202409_citibike_tripdata_5"], "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_1_ride_id.5d27bcfc2f": ["source.data_transform.staging_2024.202410_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.1b27054fdb": ["source.data_transform.staging_2024.202410_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_1_member_casual__member__casual.69a66b1b7b": ["source.data_transform.staging_2024.202410_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_2_ride_id.c07c200646": ["source.data_transform.staging_2024.202410_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.c978b1fe85": ["source.data_transform.staging_2024.202410_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_2_member_casual__member__casual.94b5d6f1d8": ["source.data_transform.staging_2024.202410_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_3_ride_id.da299a20e2": ["source.data_transform.staging_2024.202410_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c2b9dbe50a": ["source.data_transform.staging_2024.202410_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_3_member_casual__member__casual.b52b8e1f5f": ["source.data_transform.staging_2024.202410_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_4_ride_id.86ee5ee7f7": ["source.data_transform.staging_2024.202410_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.c76da46d7e": ["source.data_transform.staging_2024.202410_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_4_member_casual__member__casual.1380e42b22": ["source.data_transform.staging_2024.202410_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_5_ride_id.0e19fb8ad7": ["source.data_transform.staging_2024.202410_citibike_tripdata_5"], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.c41c9a5044": ["source.data_transform.staging_2024.202410_citibike_tripdata_5"], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_5_member_casual__member__casual.53205d918a": ["source.data_transform.staging_2024.202410_citibike_tripdata_5"], "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_6_ride_id.77681bc510": ["source.data_transform.staging_2024.202410_citibike_tripdata_6"], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_6_rideable_type__electric_bike__classic_bike.a0e21ac7c4": ["source.data_transform.staging_2024.202410_citibike_tripdata_6"], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_6_member_casual__member__casual.8b9a7fc94c": ["source.data_transform.staging_2024.202410_citibike_tripdata_6"], "test.data_transform.source_unique_staging_2024_202411_citibike_tripdata_1_ride_id.a8bd390113": ["source.data_transform.staging_2024.202411_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.10b749caa9": ["source.data_transform.staging_2024.202411_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_1_member_casual__member__casual.83bcc975c4": ["source.data_transform.staging_2024.202411_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2024_202411_citibike_tripdata_2_ride_id.26a4253341": ["source.data_transform.staging_2024.202411_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.ba3e2e4179": ["source.data_transform.staging_2024.202411_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_2_member_casual__member__casual.32388c500a": ["source.data_transform.staging_2024.202411_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2024_202411_citibike_tripdata_3_ride_id.df7b29eb96": ["source.data_transform.staging_2024.202411_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c7906c8cfc": ["source.data_transform.staging_2024.202411_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_3_member_casual__member__casual.bb2640d8bc": ["source.data_transform.staging_2024.202411_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2024_202411_citibike_tripdata_4_ride_id.5450ec8fc8": ["source.data_transform.staging_2024.202411_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.9181ad6fc0": ["source.data_transform.staging_2024.202411_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_4_member_casual__member__casual.48ae52f5c6": ["source.data_transform.staging_2024.202411_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2024_202412_citibike_tripdata_1_ride_id.c11d9c9414": ["source.data_transform.staging_2024.202412_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.602815d31b": ["source.data_transform.staging_2024.202412_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_1_member_casual__member__casual.1288197709": ["source.data_transform.staging_2024.202412_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2024_202412_citibike_tripdata_2_ride_id.9f7c6b6835": ["source.data_transform.staging_2024.202412_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.31fba28628": ["source.data_transform.staging_2024.202412_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_2_member_casual__member__casual.2b7c7ec75c": ["source.data_transform.staging_2024.202412_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2024_202412_citibike_tripdata_3_ride_id.3f60f32258": ["source.data_transform.staging_2024.202412_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.847a432211": ["source.data_transform.staging_2024.202412_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_3_member_casual__member__casual.c479cdfd39": ["source.data_transform.staging_2024.202412_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2021_202101_citibike_tripdata_1_ride_id.c54fc2a035": ["source.data_transform.staging_2021.202101_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202101_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.24a0988e0d": ["source.data_transform.staging_2021.202101_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202101_citibike_tripdata_1_member_casual__member__casual.2b431faf6f": ["source.data_transform.staging_2021.202101_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2021_202101_citibike_tripdata_2_ride_id.5e6d30062a": ["source.data_transform.staging_2021.202101_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202101_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.8a205bad62": ["source.data_transform.staging_2021.202101_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202101_citibike_tripdata_2_member_casual__member__casual.84821b042c": ["source.data_transform.staging_2021.202101_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2021_202102_citibike_tripdata_1_ride_id.cb09fc8f90": ["source.data_transform.staging_2021.202102_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202102_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.a9d8406edf": ["source.data_transform.staging_2021.202102_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202102_citibike_tripdata_1_member_casual__member__casual.c311912a3a": ["source.data_transform.staging_2021.202102_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2021_202103_citibike_tripdata_1_ride_id.77c231fd86": ["source.data_transform.staging_2021.202103_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202103_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.21fcf28c86": ["source.data_transform.staging_2021.202103_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202103_citibike_tripdata_1_member_casual__member__casual.b7b9f1a1c9": ["source.data_transform.staging_2021.202103_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2021_202103_citibike_tripdata_2_ride_id.cb02d768fb": ["source.data_transform.staging_2021.202103_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202103_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.748b88414d": ["source.data_transform.staging_2021.202103_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202103_citibike_tripdata_2_member_casual__member__casual.13df90702e": ["source.data_transform.staging_2021.202103_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2021_202104_citibike_tripdata_1_ride_id.f765fb12c6": ["source.data_transform.staging_2021.202104_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.67171bd77f": ["source.data_transform.staging_2021.202104_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_1_member_casual__member__casual.eaf5b0b2d8": ["source.data_transform.staging_2021.202104_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2021_202104_citibike_tripdata_2_ride_id.8aecd28751": ["source.data_transform.staging_2021.202104_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.10a807266a": ["source.data_transform.staging_2021.202104_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_2_member_casual__member__casual.91b27674a1": ["source.data_transform.staging_2021.202104_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2021_202104_citibike_tripdata_3_ride_id.b197dd7c4c": ["source.data_transform.staging_2021.202104_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.bcc1600a5a": ["source.data_transform.staging_2021.202104_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_3_member_casual__member__casual.66f974b607": ["source.data_transform.staging_2021.202104_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2021_202105_citibike_tripdata_1_ride_id.258b56e8d5": ["source.data_transform.staging_2021.202105_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.5289fd62fb": ["source.data_transform.staging_2021.202105_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_1_member_casual__member__casual.4fb310fbfd": ["source.data_transform.staging_2021.202105_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2021_202105_citibike_tripdata_2_ride_id.18eada12b7": ["source.data_transform.staging_2021.202105_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.98921971ef": ["source.data_transform.staging_2021.202105_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_2_member_casual__member__casual.bea25ded95": ["source.data_transform.staging_2021.202105_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2021_202105_citibike_tripdata_3_ride_id.ffe5f18f26": ["source.data_transform.staging_2021.202105_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.739b51f382": ["source.data_transform.staging_2021.202105_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_3_member_casual__member__casual.83a551dd7a": ["source.data_transform.staging_2021.202105_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2021_202106_citibike_tripdata_1_ride_id.40ab30ec21": ["source.data_transform.staging_2021.202106_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.cf44063f90": ["source.data_transform.staging_2021.202106_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_1_member_casual__member__casual.0374989de7": ["source.data_transform.staging_2021.202106_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2021_202106_citibike_tripdata_2_ride_id.45c70ca55a": ["source.data_transform.staging_2021.202106_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d247f397da": ["source.data_transform.staging_2021.202106_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_2_member_casual__member__casual.7f7733a1f3": ["source.data_transform.staging_2021.202106_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2021_202106_citibike_tripdata_3_ride_id.f87b8dd150": ["source.data_transform.staging_2021.202106_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.6a590a79b8": ["source.data_transform.staging_2021.202106_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_3_member_casual__member__casual.0b8a955605": ["source.data_transform.staging_2021.202106_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2021_202106_citibike_tripdata_4_ride_id.14065d7a65": ["source.data_transform.staging_2021.202106_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.cb6cdd1270": ["source.data_transform.staging_2021.202106_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_4_member_casual__member__casual.060131e290": ["source.data_transform.staging_2021.202106_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2021_202107_citibike_tripdata_1_ride_id.4a24d94602": ["source.data_transform.staging_2021.202107_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.e5eec0cb2a": ["source.data_transform.staging_2021.202107_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_1_member_casual__member__casual.8bc6a43143": ["source.data_transform.staging_2021.202107_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2021_202107_citibike_tripdata_2_ride_id.a27fc40e13": ["source.data_transform.staging_2021.202107_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d17df087bd": ["source.data_transform.staging_2021.202107_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_2_member_casual__member__casual.9bfcb30451": ["source.data_transform.staging_2021.202107_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2021_202107_citibike_tripdata_3_ride_id.dfeb4d67da": ["source.data_transform.staging_2021.202107_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.506404c0c7": ["source.data_transform.staging_2021.202107_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_3_member_casual__member__casual.7d30beb88d": ["source.data_transform.staging_2021.202107_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2021_202107_citibike_tripdata_4_ride_id.8a373eccf2": ["source.data_transform.staging_2021.202107_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.87de44504b": ["source.data_transform.staging_2021.202107_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_4_member_casual__member__casual.c76d5158e0": ["source.data_transform.staging_2021.202107_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2021_202108_citibike_tripdata_1_ride_id.fccd7246ad": ["source.data_transform.staging_2021.202108_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d1bdd31477": ["source.data_transform.staging_2021.202108_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_1_member_casual__member__casual.cc08f301ce": ["source.data_transform.staging_2021.202108_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2021_202108_citibike_tripdata_2_ride_id.1213a78a85": ["source.data_transform.staging_2021.202108_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.4a120cef16": ["source.data_transform.staging_2021.202108_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_2_member_casual__member__casual.30aaba5086": ["source.data_transform.staging_2021.202108_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2021_202108_citibike_tripdata_3_ride_id.8851d96b04": ["source.data_transform.staging_2021.202108_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.e952f53885": ["source.data_transform.staging_2021.202108_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_3_member_casual__member__casual.abe085f3c5": ["source.data_transform.staging_2021.202108_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2021_202108_citibike_tripdata_4_ride_id.e317ef0e40": ["source.data_transform.staging_2021.202108_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.2b6464adab": ["source.data_transform.staging_2021.202108_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_4_member_casual__member__casual.860266a4b9": ["source.data_transform.staging_2021.202108_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2021_202109_citibike_tripdata_1_ride_id.a26d2aedeb": ["source.data_transform.staging_2021.202109_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.14d685dbfb": ["source.data_transform.staging_2021.202109_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_1_member_casual__member__casual.cd66eb2de2": ["source.data_transform.staging_2021.202109_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2021_202109_citibike_tripdata_2_ride_id.8b61779d71": ["source.data_transform.staging_2021.202109_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d5429f412b": ["source.data_transform.staging_2021.202109_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_2_member_casual__member__casual.5b52d33ab6": ["source.data_transform.staging_2021.202109_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2021_202109_citibike_tripdata_3_ride_id.fcba893a9a": ["source.data_transform.staging_2021.202109_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.a327bf3797": ["source.data_transform.staging_2021.202109_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_3_member_casual__member__casual.f088e7ad5a": ["source.data_transform.staging_2021.202109_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2021_202109_citibike_tripdata_4_ride_id.c8d278b17e": ["source.data_transform.staging_2021.202109_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.2d013538ac": ["source.data_transform.staging_2021.202109_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_4_member_casual__member__casual.1bca846f67": ["source.data_transform.staging_2021.202109_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2021_202110_citibike_tripdata_1_ride_id.6bd06769a9": ["source.data_transform.staging_2021.202110_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.c229074449": ["source.data_transform.staging_2021.202110_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_1_member_casual__member__casual.8f3a45ba98": ["source.data_transform.staging_2021.202110_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2021_202110_citibike_tripdata_2_ride_id.32c6ee955d": ["source.data_transform.staging_2021.202110_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.a401e5db20": ["source.data_transform.staging_2021.202110_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_2_member_casual__member__casual.8944c18c5f": ["source.data_transform.staging_2021.202110_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2021_202110_citibike_tripdata_3_ride_id.ffe71673fd": ["source.data_transform.staging_2021.202110_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b94eb150fa": ["source.data_transform.staging_2021.202110_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_3_member_casual__member__casual.b509ddd8d4": ["source.data_transform.staging_2021.202110_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2021_202110_citibike_tripdata_4_ride_id.f72b7ed84b": ["source.data_transform.staging_2021.202110_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.c899723d08": ["source.data_transform.staging_2021.202110_citibike_tripdata_4"], "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_4_member_casual__member__casual.b315cea45a": ["source.data_transform.staging_2021.202110_citibike_tripdata_4"], "test.data_transform.source_unique_staging_2021_202111_citibike_tripdata_1_ride_id.ef6d9c0518": ["source.data_transform.staging_2021.202111_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.e09e5b3640": ["source.data_transform.staging_2021.202111_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_1_member_casual__member__casual.4da73b0077": ["source.data_transform.staging_2021.202111_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2021_202111_citibike_tripdata_2_ride_id.6551fc2143": ["source.data_transform.staging_2021.202111_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.480f8285ce": ["source.data_transform.staging_2021.202111_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_2_member_casual__member__casual.715afd4fbd": ["source.data_transform.staging_2021.202111_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2021_202111_citibike_tripdata_3_ride_id.cf8b52b071": ["source.data_transform.staging_2021.202111_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c340f0742d": ["source.data_transform.staging_2021.202111_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_3_member_casual__member__casual.c606d0b9a5": ["source.data_transform.staging_2021.202111_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2021_202112_citibike_tripdata_1_ride_id.4da4b782ec": ["source.data_transform.staging_2021.202112_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202112_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.380ecfe5ef": ["source.data_transform.staging_2021.202112_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2021_202112_citibike_tripdata_1_member_casual__member__casual.868a8816ca": ["source.data_transform.staging_2021.202112_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2021_202112_citibike_tripdata_2_ride_id.408522cf2b": ["source.data_transform.staging_2021.202112_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202112_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.42a6584623": ["source.data_transform.staging_2021.202112_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2021_202112_citibike_tripdata_2_member_casual__member__casual.d2a15a3818": ["source.data_transform.staging_2021.202112_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2020_202001_citibike_tripdata_1_ride_id.4261206b1a": ["source.data_transform.staging_2020.202001_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202001_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d00ba7dbb3": ["source.data_transform.staging_2020.202001_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202001_citibike_tripdata_1_member_casual__member__casual.44cc8596cf": ["source.data_transform.staging_2020.202001_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2020_202001_citibike_tripdata_2_ride_id.409cf6d4d5": ["source.data_transform.staging_2020.202001_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202001_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.14124ed531": ["source.data_transform.staging_2020.202001_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202001_citibike_tripdata_2_member_casual__member__casual.105c3d285a": ["source.data_transform.staging_2020.202001_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2020_202002_citibike_tripdata_1_ride_id.8601ab65ec": ["source.data_transform.staging_2020.202002_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202002_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.f3e8709109": ["source.data_transform.staging_2020.202002_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202002_citibike_tripdata_1_member_casual__member__casual.9068fac9df": ["source.data_transform.staging_2020.202002_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2020_202002_citibike_tripdata_2_ride_id.49ab7c2eb0": ["source.data_transform.staging_2020.202002_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202002_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.b654b93119": ["source.data_transform.staging_2020.202002_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202002_citibike_tripdata_2_member_casual__member__casual.93543152ed": ["source.data_transform.staging_2020.202002_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2020_202003_citibike_tripdata_1_ride_id.affd78e3c1": ["source.data_transform.staging_2020.202003_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202003_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.ade85bb3b7": ["source.data_transform.staging_2020.202003_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202003_citibike_tripdata_1_member_casual__member__casual.adc7f375b2": ["source.data_transform.staging_2020.202003_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2020_202003_citibike_tripdata_2_ride_id.7948dcbf8c": ["source.data_transform.staging_2020.202003_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202003_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.ce1e7a6683": ["source.data_transform.staging_2020.202003_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202003_citibike_tripdata_2_member_casual__member__casual.fc383b9e6a": ["source.data_transform.staging_2020.202003_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2020_202004_citibike_tripdata_1_ride_id.6e99a3dacc": ["source.data_transform.staging_2020.202004_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202004_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.e97ec4c3d5": ["source.data_transform.staging_2020.202004_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202004_citibike_tripdata_1_member_casual__member__casual.4b69881c15": ["source.data_transform.staging_2020.202004_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2020_202005_citibike_tripdata_1_ride_id.e127959e40": ["source.data_transform.staging_2020.202005_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202005_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d893005ba2": ["source.data_transform.staging_2020.202005_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202005_citibike_tripdata_1_member_casual__member__casual.2325ca6095": ["source.data_transform.staging_2020.202005_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2020_202005_citibike_tripdata_2_ride_id.8109c8f605": ["source.data_transform.staging_2020.202005_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202005_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.e6a49616c5": ["source.data_transform.staging_2020.202005_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202005_citibike_tripdata_2_member_casual__member__casual.762faaeb56": ["source.data_transform.staging_2020.202005_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2020_202006_citibike_tripdata_1_ride_id.a2790e72d3": ["source.data_transform.staging_2020.202006_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202006_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.6e273b7d21": ["source.data_transform.staging_2020.202006_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202006_citibike_tripdata_1_member_casual__member__casual.81ebfbb8a6": ["source.data_transform.staging_2020.202006_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2020_202006_citibike_tripdata_2_ride_id.6c635769aa": ["source.data_transform.staging_2020.202006_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202006_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.cbd326cee8": ["source.data_transform.staging_2020.202006_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202006_citibike_tripdata_2_member_casual__member__casual.281045dad3": ["source.data_transform.staging_2020.202006_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2020_202007_citibike_tripdata_1_ride_id.b185028041": ["source.data_transform.staging_2020.202007_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.fc0b2e3e77": ["source.data_transform.staging_2020.202007_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_1_member_casual__member__casual.c29dfcd473": ["source.data_transform.staging_2020.202007_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2020_202007_citibike_tripdata_2_ride_id.cacf5d17c2": ["source.data_transform.staging_2020.202007_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.048f185030": ["source.data_transform.staging_2020.202007_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_2_member_casual__member__casual.9067daae8b": ["source.data_transform.staging_2020.202007_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2020_202007_citibike_tripdata_3_ride_id.ba55dee410": ["source.data_transform.staging_2020.202007_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.1463226fa0": ["source.data_transform.staging_2020.202007_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_3_member_casual__member__casual.7b4d3cbacc": ["source.data_transform.staging_2020.202007_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2020_202008_citibike_tripdata_1_ride_id.86c7faaf1f": ["source.data_transform.staging_2020.202008_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.3669cd2eeb": ["source.data_transform.staging_2020.202008_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_1_member_casual__member__casual.9e70548609": ["source.data_transform.staging_2020.202008_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2020_202008_citibike_tripdata_2_ride_id.669577147b": ["source.data_transform.staging_2020.202008_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.35791b39a0": ["source.data_transform.staging_2020.202008_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_2_member_casual__member__casual.8a344840dd": ["source.data_transform.staging_2020.202008_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2020_202008_citibike_tripdata_3_ride_id.71862e4439": ["source.data_transform.staging_2020.202008_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.dc33adc6aa": ["source.data_transform.staging_2020.202008_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_3_member_casual__member__casual.4536657f3e": ["source.data_transform.staging_2020.202008_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2020_202009_citibike_tripdata_1_ride_id.f0fb99328b": ["source.data_transform.staging_2020.202009_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.fe0035d52e": ["source.data_transform.staging_2020.202009_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_1_member_casual__member__casual.f853b35dfd": ["source.data_transform.staging_2020.202009_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2020_202009_citibike_tripdata_2_ride_id.e4d1d77c74": ["source.data_transform.staging_2020.202009_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.f75167f70f": ["source.data_transform.staging_2020.202009_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_2_member_casual__member__casual.42b16aa931": ["source.data_transform.staging_2020.202009_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2020_202009_citibike_tripdata_3_ride_id.17555a51e0": ["source.data_transform.staging_2020.202009_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.89137c2f23": ["source.data_transform.staging_2020.202009_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_3_member_casual__member__casual.06e4cc1a66": ["source.data_transform.staging_2020.202009_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2020_202010_citibike_tripdata_1_ride_id.6b5fc4748b": ["source.data_transform.staging_2020.202010_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.a1db329b10": ["source.data_transform.staging_2020.202010_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_1_member_casual__member__casual.c369b4ae5e": ["source.data_transform.staging_2020.202010_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2020_202010_citibike_tripdata_2_ride_id.dd128b141b": ["source.data_transform.staging_2020.202010_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.393d064471": ["source.data_transform.staging_2020.202010_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_2_member_casual__member__casual.a6fe045335": ["source.data_transform.staging_2020.202010_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2020_202010_citibike_tripdata_3_ride_id.f9aed44f07": ["source.data_transform.staging_2020.202010_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.5b0cc5a5fb": ["source.data_transform.staging_2020.202010_citibike_tripdata_3"], "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_3_member_casual__member__casual.6887ca0f19": ["source.data_transform.staging_2020.202010_citibike_tripdata_3"], "test.data_transform.source_unique_staging_2020_202011_citibike_tripdata_1_ride_id.977b9f4133": ["source.data_transform.staging_2020.202011_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202011_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.144abdec5e": ["source.data_transform.staging_2020.202011_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202011_citibike_tripdata_1_member_casual__member__casual.d078de3826": ["source.data_transform.staging_2020.202011_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2020_202011_citibike_tripdata_2_ride_id.bcd9c01318": ["source.data_transform.staging_2020.202011_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202011_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.582d3de83d": ["source.data_transform.staging_2020.202011_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202011_citibike_tripdata_2_member_casual__member__casual.76b0cbdd09": ["source.data_transform.staging_2020.202011_citibike_tripdata_2"], "test.data_transform.source_unique_staging_2020_202012_citibike_tripdata_1_ride_id.07247252f8": ["source.data_transform.staging_2020.202012_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202012_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.081d8e1411": ["source.data_transform.staging_2020.202012_citibike_tripdata_1"], "test.data_transform.source_accepted_values_staging_2020_202012_citibike_tripdata_1_member_casual__member__casual.a43499a4ec": ["source.data_transform.staging_2020.202012_citibike_tripdata_1"], "test.data_transform.source_unique_staging_2020_202012_citibike_tripdata_2_ride_id.995b0180fc": ["source.data_transform.staging_2020.202012_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202012_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.3e6163dc4d": ["source.data_transform.staging_2020.202012_citibike_tripdata_2"], "test.data_transform.source_accepted_values_staging_2020_202012_citibike_tripdata_2_member_casual__member__casual.6cfabc4395": ["source.data_transform.staging_2020.202012_citibike_tripdata_2"], "source.data_transform.staging_2025.202501_citibike_tripdata_1": [], "source.data_transform.staging_2025.202501_citibike_tripdata_2": [], "source.data_transform.staging_2025.202501_citibike_tripdata_3": [], "source.data_transform.staging_2025.202502_citibike_tripdata_1": [], "source.data_transform.staging_2025.202502_citibike_tripdata_2": [], "source.data_transform.staging_2025.202502_citibike_tripdata_3": [], "source.data_transform.staging_2022.202201_citibike_tripdata_1": [], "source.data_transform.staging_2022.202201_citibike_tripdata_2": [], "source.data_transform.staging_2022.202202_citibike_tripdata_1": [], "source.data_transform.staging_2022.202202_citibike_tripdata_2": [], "source.data_transform.staging_2022.202203_citibike_tripdata_1": [], "source.data_transform.staging_2022.202203_citibike_tripdata_2": [], "source.data_transform.staging_2022.202204_citibike_tripdata_1": [], "source.data_transform.staging_2022.202204_citibike_tripdata_2": [], "source.data_transform.staging_2022.202204_citibike_tripdata_3": [], "source.data_transform.staging_2022.202205_citibike_tripdata_1": [], "source.data_transform.staging_2022.202205_citibike_tripdata_2": [], "source.data_transform.staging_2022.202205_citibike_tripdata_3": [], "source.data_transform.staging_2022.202206_citibike_tripdata_1": [], "source.data_transform.staging_2022.202206_citibike_tripdata_2": [], "source.data_transform.staging_2022.202206_citibike_tripdata_3": [], "source.data_transform.staging_2022.202206_citibike_tripdata_4": [], "source.data_transform.staging_2022.202207_citibike_tripdata_1": [], "source.data_transform.staging_2022.202207_citibike_tripdata_2": [], "source.data_transform.staging_2022.202207_citibike_tripdata_3": [], "source.data_transform.staging_2022.202207_citibike_tripdata_4": [], "source.data_transform.staging_2022.202208_citibike_tripdata_1": [], "source.data_transform.staging_2022.202208_citibike_tripdata_2": [], "source.data_transform.staging_2022.202208_citibike_tripdata_3": [], "source.data_transform.staging_2022.202208_citibike_tripdata_4": [], "source.data_transform.staging_2022.202209_citibike_tripdata_1": [], "source.data_transform.staging_2022.202209_citibike_tripdata_2": [], "source.data_transform.staging_2022.202209_citibike_tripdata_3": [], "source.data_transform.staging_2022.202209_citibike_tripdata_4": [], "source.data_transform.staging_2022.202210_citibike_tripdata_1": [], "source.data_transform.staging_2022.202210_citibike_tripdata_2": [], "source.data_transform.staging_2022.202210_citibike_tripdata_3": [], "source.data_transform.staging_2022.202211_citibike_tripdata_1": [], "source.data_transform.staging_2022.202211_citibike_tripdata_2": [], "source.data_transform.staging_2022.202211_citibike_tripdata_3": [], "source.data_transform.staging_2022.202212_citibike_tripdata_1": [], "source.data_transform.staging_2022.202212_citibike_tripdata_2": [], "source.data_transform.staging_2023.202301_citibike_tripdata_1": [], "source.data_transform.staging_2023.202301_citibike_tripdata_2": [], "source.data_transform.staging_2023.202302_citibike_tripdata_1": [], "source.data_transform.staging_2023.202302_citibike_tripdata_2": [], "source.data_transform.staging_2023.202303_citibike_tripdata_1": [], "source.data_transform.staging_2023.202303_citibike_tripdata_2": [], "source.data_transform.staging_2023.202303_citibike_tripdata_3": [], "source.data_transform.staging_2023.202304_citibike_tripdata_1": [], "source.data_transform.staging_2023.202304_citibike_tripdata_2": [], "source.data_transform.staging_2023.202304_citibike_tripdata_3": [], "source.data_transform.staging_2023.202305_citibike_tripdata_1": [], "source.data_transform.staging_2023.202305_citibike_tripdata_2": [], "source.data_transform.staging_2023.202305_citibike_tripdata_3": [], "source.data_transform.staging_2023.202305_citibike_tripdata_4": [], "source.data_transform.staging_2023.202306_citibike_tripdata_1": [], "source.data_transform.staging_2023.202306_citibike_tripdata_2": [], "source.data_transform.staging_2023.202306_citibike_tripdata_3": [], "source.data_transform.staging_2023.202306_citibike_tripdata_4": [], "source.data_transform.staging_2023.202307_citibike_tripdata_1": [], "source.data_transform.staging_2023.202307_citibike_tripdata_2": [], "source.data_transform.staging_2023.202307_citibike_tripdata_3": [], "source.data_transform.staging_2023.202307_citibike_tripdata_4": [], "source.data_transform.staging_2023.202308_citibike_tripdata_1": [], "source.data_transform.staging_2023.202308_citibike_tripdata_2": [], "source.data_transform.staging_2023.202308_citibike_tripdata_3": [], "source.data_transform.staging_2023.202308_citibike_tripdata_4": [], "source.data_transform.staging_2023.202309_citibike_tripdata_1": [], "source.data_transform.staging_2023.202309_citibike_tripdata_2": [], "source.data_transform.staging_2023.202309_citibike_tripdata_3": [], "source.data_transform.staging_2023.202309_citibike_tripdata_4": [], "source.data_transform.staging_2023.202310_citibike_tripdata_1": [], "source.data_transform.staging_2023.202310_citibike_tripdata_2": [], "source.data_transform.staging_2023.202310_citibike_tripdata_3": [], "source.data_transform.staging_2023.202310_citibike_tripdata_4": [], "source.data_transform.staging_2023.202311_citibike_tripdata_1": [], "source.data_transform.staging_2023.202311_citibike_tripdata_2": [], "source.data_transform.staging_2023.202311_citibike_tripdata_3": [], "source.data_transform.staging_2023.202312_citibike_tripdata_1": [], "source.data_transform.staging_2023.202312_citibike_tripdata_2": [], "source.data_transform.staging_2023.202312_citibike_tripdata_3": [], "source.data_transform.staging_2024.202401_citibike_tripdata": [], "source.data_transform.staging_2024.202402_citibike_tripdata": [], "source.data_transform.staging_2024.202403_citibike_tripdata": [], "source.data_transform.staging_2024.202404_citibike_tripdata": [], "source.data_transform.staging_2024.202405_citibike_tripdata_1": [], "source.data_transform.staging_2024.202405_citibike_tripdata_2": [], "source.data_transform.staging_2024.202405_citibike_tripdata_3": [], "source.data_transform.staging_2024.202405_citibike_tripdata_4": [], "source.data_transform.staging_2024.202405_citibike_tripdata_5": [], "source.data_transform.staging_2024.202406_citibike_tripdata_1": [], "source.data_transform.staging_2024.202406_citibike_tripdata_2": [], "source.data_transform.staging_2024.202406_citibike_tripdata_3": [], "source.data_transform.staging_2024.202406_citibike_tripdata_4": [], "source.data_transform.staging_2024.202406_citibike_tripdata_5": [], "source.data_transform.staging_2024.202407_citibike_tripdata_1": [], "source.data_transform.staging_2024.202407_citibike_tripdata_2": [], "source.data_transform.staging_2024.202407_citibike_tripdata_3": [], "source.data_transform.staging_2024.202407_citibike_tripdata_4": [], "source.data_transform.staging_2024.202407_citibike_tripdata_5": [], "source.data_transform.staging_2024.202408_citibike_tripdata_1": [], "source.data_transform.staging_2024.202408_citibike_tripdata_2": [], "source.data_transform.staging_2024.202408_citibike_tripdata_3": [], "source.data_transform.staging_2024.202408_citibike_tripdata_4": [], "source.data_transform.staging_2024.202408_citibike_tripdata_5": [], "source.data_transform.staging_2024.202409_citibike_tripdata_1": [], "source.data_transform.staging_2024.202409_citibike_tripdata_2": [], "source.data_transform.staging_2024.202409_citibike_tripdata_3": [], "source.data_transform.staging_2024.202409_citibike_tripdata_4": [], "source.data_transform.staging_2024.202409_citibike_tripdata_5": [], "source.data_transform.staging_2024.202410_citibike_tripdata_1": [], "source.data_transform.staging_2024.202410_citibike_tripdata_2": [], "source.data_transform.staging_2024.202410_citibike_tripdata_3": [], "source.data_transform.staging_2024.202410_citibike_tripdata_4": [], "source.data_transform.staging_2024.202410_citibike_tripdata_5": [], "source.data_transform.staging_2024.202410_citibike_tripdata_6": [], "source.data_transform.staging_2024.202411_citibike_tripdata_1": [], "source.data_transform.staging_2024.202411_citibike_tripdata_2": [], "source.data_transform.staging_2024.202411_citibike_tripdata_3": [], "source.data_transform.staging_2024.202411_citibike_tripdata_4": [], "source.data_transform.staging_2024.202412_citibike_tripdata_1": [], "source.data_transform.staging_2024.202412_citibike_tripdata_2": [], "source.data_transform.staging_2024.202412_citibike_tripdata_3": [], "source.data_transform.staging_2021.202101_citibike_tripdata_1": [], "source.data_transform.staging_2021.202101_citibike_tripdata_2": [], "source.data_transform.staging_2021.202102_citibike_tripdata_1": [], "source.data_transform.staging_2021.202103_citibike_tripdata_1": [], "source.data_transform.staging_2021.202103_citibike_tripdata_2": [], "source.data_transform.staging_2021.202104_citibike_tripdata_1": [], "source.data_transform.staging_2021.202104_citibike_tripdata_2": [], "source.data_transform.staging_2021.202104_citibike_tripdata_3": [], "source.data_transform.staging_2021.202105_citibike_tripdata_1": [], "source.data_transform.staging_2021.202105_citibike_tripdata_2": [], "source.data_transform.staging_2021.202105_citibike_tripdata_3": [], "source.data_transform.staging_2021.202106_citibike_tripdata_1": [], "source.data_transform.staging_2021.202106_citibike_tripdata_2": [], "source.data_transform.staging_2021.202106_citibike_tripdata_3": [], "source.data_transform.staging_2021.202106_citibike_tripdata_4": [], "source.data_transform.staging_2021.202107_citibike_tripdata_1": [], "source.data_transform.staging_2021.202107_citibike_tripdata_2": [], "source.data_transform.staging_2021.202107_citibike_tripdata_3": [], "source.data_transform.staging_2021.202107_citibike_tripdata_4": [], "source.data_transform.staging_2021.202108_citibike_tripdata_1": [], "source.data_transform.staging_2021.202108_citibike_tripdata_2": [], "source.data_transform.staging_2021.202108_citibike_tripdata_3": [], "source.data_transform.staging_2021.202108_citibike_tripdata_4": [], "source.data_transform.staging_2021.202109_citibike_tripdata_1": [], "source.data_transform.staging_2021.202109_citibike_tripdata_2": [], "source.data_transform.staging_2021.202109_citibike_tripdata_3": [], "source.data_transform.staging_2021.202109_citibike_tripdata_4": [], "source.data_transform.staging_2021.202110_citibike_tripdata_1": [], "source.data_transform.staging_2021.202110_citibike_tripdata_2": [], "source.data_transform.staging_2021.202110_citibike_tripdata_3": [], "source.data_transform.staging_2021.202110_citibike_tripdata_4": [], "source.data_transform.staging_2021.202111_citibike_tripdata_1": [], "source.data_transform.staging_2021.202111_citibike_tripdata_2": [], "source.data_transform.staging_2021.202111_citibike_tripdata_3": [], "source.data_transform.staging_2021.202112_citibike_tripdata_1": [], "source.data_transform.staging_2021.202112_citibike_tripdata_2": [], "source.data_transform.staging_2020.202001_citibike_tripdata_1": [], "source.data_transform.staging_2020.202001_citibike_tripdata_2": [], "source.data_transform.staging_2020.202002_citibike_tripdata_1": [], "source.data_transform.staging_2020.202002_citibike_tripdata_2": [], "source.data_transform.staging_2020.202003_citibike_tripdata_1": [], "source.data_transform.staging_2020.202003_citibike_tripdata_2": [], "source.data_transform.staging_2020.202004_citibike_tripdata_1": [], "source.data_transform.staging_2020.202005_citibike_tripdata_1": [], "source.data_transform.staging_2020.202005_citibike_tripdata_2": [], "source.data_transform.staging_2020.202006_citibike_tripdata_1": [], "source.data_transform.staging_2020.202006_citibike_tripdata_2": [], "source.data_transform.staging_2020.202007_citibike_tripdata_1": [], "source.data_transform.staging_2020.202007_citibike_tripdata_2": [], "source.data_transform.staging_2020.202007_citibike_tripdata_3": [], "source.data_transform.staging_2020.202008_citibike_tripdata_1": [], "source.data_transform.staging_2020.202008_citibike_tripdata_2": [], "source.data_transform.staging_2020.202008_citibike_tripdata_3": [], "source.data_transform.staging_2020.202009_citibike_tripdata_1": [], "source.data_transform.staging_2020.202009_citibike_tripdata_2": [], "source.data_transform.staging_2020.202009_citibike_tripdata_3": [], "source.data_transform.staging_2020.202010_citibike_tripdata_1": [], "source.data_transform.staging_2020.202010_citibike_tripdata_2": [], "source.data_transform.staging_2020.202010_citibike_tripdata_3": [], "source.data_transform.staging_2020.202011_citibike_tripdata_1": [], "source.data_transform.staging_2020.202011_citibike_tripdata_2": [], "source.data_transform.staging_2020.202012_citibike_tripdata_1": [], "source.data_transform.staging_2020.202012_citibike_tripdata_2": []}, "child_map": {"model.data_transform.fct_citibike_rides_by_year": [], "model.data_transform.dim_citibike_stations": [], "model.data_transform.fct_citibike_rides": ["test.data_transform.accepted_values_fct_citibike_rides_member_casual__member__casual.17b1cd2173", "test.data_transform.accepted_values_fct_citibike_rides_rideable_type__electric_bike__classic_bike.a470a25f4b", "test.data_transform.unique_fct_citibike_rides_ride_id.283318838a"], "model.data_transform.combined_years": ["model.data_transform.fct_citibike_rides", "test.data_transform.accepted_values_combined_years_member_casual__member__casual.3562887647", "test.data_transform.accepted_values_combined_years_rideable_type__electric_bike__classic_bike.f71ae629f9", "test.data_transform.unique_combined_years_ride_id.183b32f269"], "model.data_transform.feb_2025": ["model.data_transform.yr_2025", "test.data_transform.accepted_values_feb_2025_member_casual__member__casual.586c01d656", "test.data_transform.accepted_values_feb_2025_rideable_type__electric_bike__classic_bike.ac52a64a31", "test.data_transform.unique_feb_2025_ride_id.07deac57cb", "test.data_transform.validate_month_feb_2025_ended_at__2__started_at.01dbad3b21"], "model.data_transform.jan_2025": ["model.data_transform.yr_2025", "test.data_transform.accepted_values_jan_2025_member_casual__member__casual.0028b86617", "test.data_transform.accepted_values_jan_2025_rideable_type__electric_bike__classic_bike.dd88220125", "test.data_transform.unique_jan_2025_ride_id.a6afb1426b", "test.data_transform.validate_month_jan_2025_ended_at__1__started_at.885e570385"], "model.data_transform.yr_2025": ["model.data_transform.combined_years", "test.data_transform.accepted_values_yr_2025_member_casual__member__casual.1a2ccdae22", "test.data_transform.accepted_values_yr_2025_rideable_type__electric_bike__classic_bike.fcc9be54c2", "test.data_transform.unique_yr_2025_ride_id.1093d6c21c"], "model.data_transform.feb_2022": ["model.data_transform.yr_2022", "test.data_transform.accepted_values_feb_2022_member_casual__member__casual.5f65f69eb2", "test.data_transform.accepted_values_feb_2022_rideable_type__electric_bike__classic_bike.f8458ca3e7", "test.data_transform.unique_feb_2022_ride_id.36575471c4", "test.data_transform.validate_month_feb_2022_ended_at__2__started_at.ceaf7113a8"], "model.data_transform.oct_2022": ["model.data_transform.yr_2022", "test.data_transform.accepted_values_oct_2022_member_casual__member__casual.4e41505c90", "test.data_transform.accepted_values_oct_2022_rideable_type__electric_bike__classic_bike.57fd12192f", "test.data_transform.unique_oct_2022_ride_id.796b2d8c1e", "test.data_transform.validate_month_oct_2022_ended_at__10__started_at.16cef01c2c"], "model.data_transform.jun_2022": ["model.data_transform.yr_2022", "test.data_transform.accepted_values_jun_2022_member_casual__member__casual.52301af8b5", "test.data_transform.accepted_values_jun_2022_rideable_type__electric_bike__classic_bike.9261606d25", "test.data_transform.unique_jun_2022_ride_id.1e7ad22465", "test.data_transform.validate_month_jun_2022_ended_at__6__started_at.86dcfd7ac7"], "model.data_transform.yr_2022": ["model.data_transform.combined_years", "test.data_transform.accepted_values_yr_2022_member_casual__member__casual.d3f9bca4d6", "test.data_transform.accepted_values_yr_2022_rideable_type__electric_bike__classic_bike.1fc8016972", "test.data_transform.unique_yr_2022_ride_id.d2430b5cbc"], "model.data_transform.dec_2022": ["model.data_transform.yr_2022", "test.data_transform.accepted_values_dec_2022_member_casual__member__casual.135dfc2ca1", "test.data_transform.accepted_values_dec_2022_rideable_type__electric_bike__classic_bike.dc1b3c80b8", "test.data_transform.unique_dec_2022_ride_id.bbbffc9573", "test.data_transform.validate_month_dec_2022_ended_at__12__started_at.1beba005a6"], "model.data_transform.aug_2022": ["model.data_transform.yr_2022", "test.data_transform.accepted_values_aug_2022_member_casual__member__casual.fc18f0d350", "test.data_transform.accepted_values_aug_2022_rideable_type__electric_bike__classic_bike.51b0090758", "test.data_transform.unique_aug_2022_ride_id.ffdd4382ad", "test.data_transform.validate_month_aug_2022_ended_at__8__started_at.f45a5b8f5f"], "model.data_transform.nov_2022": ["model.data_transform.yr_2022", "test.data_transform.accepted_values_nov_2022_member_casual__member__casual.455565c14e", "test.data_transform.accepted_values_nov_2022_rideable_type__electric_bike__classic_bike.f7b434490c", "test.data_transform.unique_nov_2022_ride_id.f19a66835e", "test.data_transform.validate_month_nov_2022_ended_at__11__started_at.d80aa41b02"], "model.data_transform.jan_2022": ["model.data_transform.yr_2022", "test.data_transform.accepted_values_jan_2022_member_casual__member__casual.16e8af418c", "test.data_transform.accepted_values_jan_2022_rideable_type__electric_bike__classic_bike.a3817d042e", "test.data_transform.unique_jan_2022_ride_id.1e0255a09d", "test.data_transform.validate_month_jan_2022_ended_at__1__started_at.dd8cbfc979"], "model.data_transform.jul_2022": ["model.data_transform.yr_2022", "test.data_transform.accepted_values_jul_2022_member_casual__member__casual.2fc053c05a", "test.data_transform.accepted_values_jul_2022_rideable_type__electric_bike__classic_bike.bcbe03166a", "test.data_transform.unique_jul_2022_ride_id.702f94d5cc", "test.data_transform.validate_month_jul_2022_ended_at__7__started_at.1c7c88371a"], "model.data_transform.mar_2022": ["model.data_transform.yr_2022", "test.data_transform.accepted_values_mar_2022_member_casual__member__casual.b285c69f9d", "test.data_transform.accepted_values_mar_2022_rideable_type__electric_bike__classic_bike.0837a03467", "test.data_transform.unique_mar_2022_ride_id.21df8e8ac2", "test.data_transform.validate_month_mar_2022_ended_at__3__started_at.529fd2054d"], "model.data_transform.sep_2022": ["model.data_transform.yr_2022", "test.data_transform.accepted_values_sep_2022_member_casual__member__casual.0d0a35672f", "test.data_transform.accepted_values_sep_2022_rideable_type__electric_bike__classic_bike.c3dcf466d2", "test.data_transform.unique_sep_2022_ride_id.a8d3fafc02", "test.data_transform.validate_month_sep_2022_ended_at__9__started_at.84fe2b5d2c"], "model.data_transform.apr_2022": ["model.data_transform.yr_2022", "test.data_transform.accepted_values_apr_2022_member_casual__member__casual.c53995501b", "test.data_transform.accepted_values_apr_2022_rideable_type__electric_bike__classic_bike.41d411c416", "test.data_transform.unique_apr_2022_ride_id.04b95a0f5f", "test.data_transform.validate_month_apr_2022_ended_at__4__started_at.d9a58d3cd9"], "model.data_transform.may_2022": ["model.data_transform.yr_2022", "test.data_transform.accepted_values_may_2022_member_casual__member__casual.38217d39e1", "test.data_transform.accepted_values_may_2022_rideable_type__electric_bike__classic_bike.a1a65f1e1a", "test.data_transform.unique_may_2022_ride_id.af62242e63", "test.data_transform.validate_month_may_2022_ended_at__5__started_at.04b52bb967"], "model.data_transform.feb_2023": ["model.data_transform.yr_2023", "test.data_transform.accepted_values_feb_2023_member_casual__member__casual.031e289129", "test.data_transform.accepted_values_feb_2023_rideable_type__electric_bike__classic_bike.51e394a011", "test.data_transform.unique_feb_2023_ride_id.add79ff186", "test.data_transform.validate_month_feb_2023_ended_at__2__started_at.7ea791c459"], "model.data_transform.oct_2023": ["model.data_transform.yr_2023", "test.data_transform.accepted_values_oct_2023_member_casual__member__casual.afb9e46c90", "test.data_transform.accepted_values_oct_2023_rideable_type__electric_bike__classic_bike.3cf8054fdb", "test.data_transform.unique_oct_2023_ride_id.60aeda33c7", "test.data_transform.validate_month_oct_2023_ended_at__10__started_at.0227a79041"], "model.data_transform.jun_2023": ["model.data_transform.yr_2023", "test.data_transform.accepted_values_jun_2023_member_casual__member__casual.a116e80271", "test.data_transform.accepted_values_jun_2023_rideable_type__electric_bike__classic_bike.08d373c057", "test.data_transform.unique_jun_2023_ride_id.82604d40d1", "test.data_transform.validate_month_jun_2023_ended_at__6__started_at.3fc3d08e4d"], "model.data_transform.yr_2023": ["model.data_transform.combined_years", "test.data_transform.accepted_values_yr_2023_member_casual__member__casual.b43b04bfd1", "test.data_transform.accepted_values_yr_2023_rideable_type__electric_bike__classic_bike.90a7544b2e", "test.data_transform.unique_yr_2023_ride_id.7217ceb8ed"], "model.data_transform.aug_2023": ["model.data_transform.yr_2023", "test.data_transform.accepted_values_aug_2023_member_casual__member__casual.5dab70bfd7", "test.data_transform.accepted_values_aug_2023_rideable_type__electric_bike__classic_bike.0300a72286", "test.data_transform.unique_aug_2023_ride_id.a3134bce14", "test.data_transform.validate_month_aug_2023_ended_at__8__started_at.d75cf30380"], "model.data_transform.dec_2023": ["model.data_transform.yr_2023", "test.data_transform.accepted_values_dec_2023_member_casual__member__casual.957fa6d2c3", "test.data_transform.accepted_values_dec_2023_rideable_type__electric_bike__classic_bike.acd656a22f", "test.data_transform.unique_dec_2023_ride_id.a1609de2e7", "test.data_transform.validate_month_dec_2023_ended_at__12__started_at.f7ee9b2cea"], "model.data_transform.nov_2023": ["model.data_transform.yr_2023", "test.data_transform.accepted_values_nov_2023_member_casual__member__casual.16f3838708", "test.data_transform.accepted_values_nov_2023_rideable_type__electric_bike__classic_bike.fec3f24575", "test.data_transform.unique_nov_2023_ride_id.f85259dd8c", "test.data_transform.validate_month_nov_2023_ended_at__11__started_at.6cc26b335c"], "model.data_transform.jan_2023": ["model.data_transform.yr_2023", "test.data_transform.accepted_values_jan_2023_member_casual__member__casual.2ef1f5c2fe", "test.data_transform.accepted_values_jan_2023_rideable_type__electric_bike__classic_bike.d53d53383d", "test.data_transform.unique_jan_2023_ride_id.1074116e25", "test.data_transform.validate_month_jan_2023_ended_at__1__started_at.b0c1fa5eb4"], "model.data_transform.mar_2023": ["model.data_transform.yr_2023", "test.data_transform.accepted_values_mar_2023_member_casual__member__casual.d99f8523f4", "test.data_transform.accepted_values_mar_2023_rideable_type__electric_bike__classic_bike.aa67d77428", "test.data_transform.unique_mar_2023_ride_id.89fa5a8337", "test.data_transform.validate_month_mar_2023_ended_at__3__started_at.a4624f3dd7"], "model.data_transform.jul_2023": ["model.data_transform.yr_2023", "test.data_transform.accepted_values_jul_2023_member_casual__member__casual.90581b41a9", "test.data_transform.accepted_values_jul_2023_rideable_type__electric_bike__classic_bike.4fade08a47", "test.data_transform.unique_jul_2023_ride_id.390f336acd", "test.data_transform.validate_month_jul_2023_ended_at__7__started_at.e61e886fbd"], "model.data_transform.may_2023": ["model.data_transform.yr_2023", "test.data_transform.accepted_values_may_2023_member_casual__member__casual.a5d49eea1a", "test.data_transform.accepted_values_may_2023_rideable_type__electric_bike__classic_bike.f059bb43ab", "test.data_transform.unique_may_2023_ride_id.1f84c4fdc3", "test.data_transform.validate_month_may_2023_ended_at__5__started_at.ae8e43b7d4"], "model.data_transform.apr_2023": ["model.data_transform.yr_2023", "test.data_transform.accepted_values_apr_2023_member_casual__member__casual.e5bd71e525", "test.data_transform.accepted_values_apr_2023_rideable_type__electric_bike__classic_bike.01826f186c", "test.data_transform.unique_apr_2023_ride_id.07eedfd4ee", "test.data_transform.validate_month_apr_2023_ended_at__4__started_at.10d1e32fed"], "model.data_transform.sep_2023": ["model.data_transform.yr_2023", "test.data_transform.accepted_values_sep_2023_member_casual__member__casual.02046c4e8e", "test.data_transform.accepted_values_sep_2023_rideable_type__electric_bike__classic_bike.67819e4320", "test.data_transform.unique_sep_2023_ride_id.ca113f723d", "test.data_transform.validate_month_sep_2023_ended_at__9__started_at.31f9a134de"], "model.data_transform.oct_2024": ["model.data_transform.yr_2024", "test.data_transform.accepted_values_oct_2024_member_casual__member__casual.1498a91654", "test.data_transform.accepted_values_oct_2024_rideable_type__electric_bike__classic_bike.37cb9502e3", "test.data_transform.unique_oct_2024_ride_id.f9ffd523c2", "test.data_transform.validate_month_oct_2024_ended_at__10__started_at.74a4af765f"], "model.data_transform.jun_2024": ["model.data_transform.yr_2024", "test.data_transform.accepted_values_jun_2024_member_casual__member__casual.cde6875ce9", "test.data_transform.accepted_values_jun_2024_rideable_type__electric_bike__classic_bike.296748931c", "test.data_transform.unique_jun_2024_ride_id.2085d3af2b", "test.data_transform.validate_month_jun_2024_ended_at__6__started_at.a078811362"], "model.data_transform.feb_2024": ["model.data_transform.yr_2024", "test.data_transform.accepted_values_feb_2024_member_casual__member__casual.f7397df4e6", "test.data_transform.accepted_values_feb_2024_rideable_type__electric_bike__classic_bike.c3deffbddd", "test.data_transform.unique_feb_2024_ride_id.369c1cf474", "test.data_transform.validate_month_feb_2024_ended_at__2__started_at.c35b99c9d9"], "model.data_transform.nov_2024": ["model.data_transform.yr_2024", "test.data_transform.accepted_values_nov_2024_member_casual__member__casual.f782eeefff", "test.data_transform.accepted_values_nov_2024_rideable_type__electric_bike__classic_bike.9cb41102fe", "test.data_transform.unique_nov_2024_ride_id.bd7d31bb66", "test.data_transform.validate_month_nov_2024_ended_at__11__started_at.8f47700fc8"], "model.data_transform.jan_2024": ["model.data_transform.yr_2024", "test.data_transform.accepted_values_jan_2024_member_casual__member__casual.3fab89f86e", "test.data_transform.accepted_values_jan_2024_rideable_type__electric_bike__classic_bike.9e6ba60770", "test.data_transform.unique_jan_2024_ride_id.7dfa0fb566", "test.data_transform.validate_month_jan_2024_ended_at__1__started_at.3f841659d1"], "model.data_transform.yr_2024": ["model.data_transform.combined_years", "test.data_transform.accepted_values_yr_2024_member_casual__member__casual.f5d6a256f0", "test.data_transform.accepted_values_yr_2024_rideable_type__electric_bike__classic_bike.423adb3059", "test.data_transform.unique_yr_2024_ride_id.1de4ca9eb3"], "model.data_transform.dec_2024": ["model.data_transform.yr_2024", "test.data_transform.accepted_values_dec_2024_member_casual__member__casual.ba811fe960", "test.data_transform.accepted_values_dec_2024_rideable_type__electric_bike__classic_bike.e5cb433641", "test.data_transform.unique_dec_2024_ride_id.e63a6867b0", "test.data_transform.validate_month_dec_2024_ended_at__12__started_at.a0c703573b"], "model.data_transform.aug_2024": ["model.data_transform.yr_2024", "test.data_transform.accepted_values_aug_2024_member_casual__member__casual.a210aaa053", "test.data_transform.accepted_values_aug_2024_rideable_type__electric_bike__classic_bike.8d0aecc8cd", "test.data_transform.unique_aug_2024_ride_id.e1479348f4", "test.data_transform.validate_month_aug_2024_ended_at__8__started_at.7f962fb652"], "model.data_transform.jul_2024": ["model.data_transform.yr_2024", "test.data_transform.accepted_values_jul_2024_member_casual__member__casual.00e92abb1b", "test.data_transform.accepted_values_jul_2024_rideable_type__electric_bike__classic_bike.ac4bda1108", "test.data_transform.unique_jul_2024_ride_id.0a23064a44", "test.data_transform.validate_month_jul_2024_ended_at__7__started_at.19592997b7"], "model.data_transform.mar_2024": ["model.data_transform.yr_2024", "test.data_transform.accepted_values_mar_2024_member_casual__member__casual.2257878b6c", "test.data_transform.accepted_values_mar_2024_rideable_type__electric_bike__classic_bike.a2e4c869e2", "test.data_transform.unique_mar_2024_ride_id.0346c70344", "test.data_transform.validate_month_mar_2024_ended_at__3__started_at.2e90ea48db"], "model.data_transform.sep_2024": ["model.data_transform.yr_2024", "test.data_transform.accepted_values_sep_2024_member_casual__member__casual.81d0d449db", "test.data_transform.accepted_values_sep_2024_rideable_type__electric_bike__classic_bike.a57f13c11c", "test.data_transform.unique_sep_2024_ride_id.05e447f34c", "test.data_transform.validate_month_sep_2024_ended_at__9__started_at.c7a06f6cfe"], "model.data_transform.apr_2024": ["model.data_transform.yr_2024", "test.data_transform.accepted_values_apr_2024_member_casual__member__casual.131b1d0e93", "test.data_transform.accepted_values_apr_2024_rideable_type__electric_bike__classic_bike.ae30a9076a", "test.data_transform.unique_apr_2024_ride_id.518bcab2a1", "test.data_transform.validate_month_apr_2024_ended_at__4__started_at.701bed14c8"], "model.data_transform.may_2024": ["model.data_transform.yr_2024", "test.data_transform.accepted_values_may_2024_member_casual__member__casual.9a77965565", "test.data_transform.accepted_values_may_2024_rideable_type__electric_bike__classic_bike.05dd923e47", "test.data_transform.unique_may_2024_ride_id.f90b9f27f2", "test.data_transform.validate_month_may_2024_ended_at__5__started_at.38feb2e3e4"], "model.data_transform.feb_2021": ["model.data_transform.yr_2021", "test.data_transform.accepted_values_feb_2021_member_casual__member__casual.9bfbe9dfa2", "test.data_transform.accepted_values_feb_2021_rideable_type__electric_bike__classic_bike.347ac0aef9", "test.data_transform.unique_feb_2021_ride_id.798dd40563", "test.data_transform.validate_month_feb_2021_ended_at__2__started_at.4ec15d2767"], "model.data_transform.jun_2021": ["model.data_transform.yr_2021", "test.data_transform.accepted_values_jun_2021_member_casual__member__casual.22ffd8b463", "test.data_transform.accepted_values_jun_2021_rideable_type__electric_bike__classic_bike.fddc612ff9", "test.data_transform.unique_jun_2021_ride_id.7d5ede7720", "test.data_transform.validate_month_jun_2021_ended_at__6__started_at.6bc752d476"], "model.data_transform.oct_2021": ["model.data_transform.yr_2021", "test.data_transform.accepted_values_oct_2021_member_casual__member__casual.c407993356", "test.data_transform.accepted_values_oct_2021_rideable_type__electric_bike__classic_bike.9840a619e2", "test.data_transform.unique_oct_2021_ride_id.2f8cb722e7", "test.data_transform.validate_month_oct_2021_ended_at__10__started_at.9f60196db4"], "model.data_transform.dec_2021": ["model.data_transform.yr_2021", "test.data_transform.accepted_values_dec_2021_member_casual__member__casual.e47c83f669", "test.data_transform.accepted_values_dec_2021_rideable_type__electric_bike__classic_bike.b3361baeb7", "test.data_transform.unique_dec_2021_ride_id.7cef2ecfc6", "test.data_transform.validate_month_dec_2021_ended_at__12__started_at.dc415b74bb"], "model.data_transform.aug_2021": ["model.data_transform.yr_2021", "test.data_transform.accepted_values_aug_2021_member_casual__member__casual.f3756a66ce", "test.data_transform.accepted_values_aug_2021_rideable_type__electric_bike__classic_bike.012aea4225", "test.data_transform.unique_aug_2021_ride_id.d87d9e6777", "test.data_transform.validate_month_aug_2021_ended_at__8__started_at.e0ce3a0178"], "model.data_transform.yr_2021": ["model.data_transform.combined_years", "test.data_transform.accepted_values_yr_2021_member_casual__member__casual.53901ff579", "test.data_transform.accepted_values_yr_2021_rideable_type__electric_bike__classic_bike.b7ea1ba880", "test.data_transform.unique_yr_2021_ride_id.21f7ca9901"], "model.data_transform.jan_2021": ["model.data_transform.yr_2021", "test.data_transform.accepted_values_jan_2021_member_casual__member__casual.73faa5a5dc", "test.data_transform.accepted_values_jan_2021_rideable_type__electric_bike__classic_bike.af59a3aeb3", "test.data_transform.unique_jan_2021_ride_id.38f514c303", "test.data_transform.validate_month_jan_2021_ended_at__1__started_at.7d7fccaff4"], "model.data_transform.nov_2021": ["model.data_transform.yr_2021", "test.data_transform.accepted_values_nov_2021_member_casual__member__casual.769f004905", "test.data_transform.accepted_values_nov_2021_rideable_type__electric_bike__classic_bike.02a6c0d9b1", "test.data_transform.unique_nov_2021_ride_id.533acd63fc", "test.data_transform.validate_month_nov_2021_ended_at__11__started_at.de83a5afbb"], "model.data_transform.sep_2021": ["model.data_transform.yr_2021", "test.data_transform.accepted_values_sep_2021_member_casual__member__casual.3be55b72cc", "test.data_transform.accepted_values_sep_2021_rideable_type__electric_bike__classic_bike.c4f3cf2112", "test.data_transform.unique_sep_2021_ride_id.32890cd237", "test.data_transform.validate_month_sep_2021_ended_at__9__started_at.4f1faa19df"], "model.data_transform.apr_2021": ["model.data_transform.yr_2021", "test.data_transform.accepted_values_apr_2021_member_casual__member__casual.c4aa44d3af", "test.data_transform.accepted_values_apr_2021_rideable_type__electric_bike__classic_bike.f49a4db029", "test.data_transform.unique_apr_2021_ride_id.7e13021df3", "test.data_transform.validate_month_apr_2021_ended_at__4__started_at.2e0eea5e91"], "model.data_transform.may_2021": ["model.data_transform.yr_2021", "test.data_transform.accepted_values_may_2021_member_casual__member__casual.1c07c6cfc4", "test.data_transform.accepted_values_may_2021_rideable_type__electric_bike__classic_bike.e375bb63f4", "test.data_transform.unique_may_2021_ride_id.2ea7626782", "test.data_transform.validate_month_may_2021_ended_at__5__started_at.4ca76f818f"], "model.data_transform.jul_2021": ["model.data_transform.yr_2021", "test.data_transform.accepted_values_jul_2021_member_casual__member__casual.a29b5393b0", "test.data_transform.accepted_values_jul_2021_rideable_type__electric_bike__classic_bike.21c9a88fb5", "test.data_transform.unique_jul_2021_ride_id.a582178788", "test.data_transform.validate_month_jul_2021_ended_at__7__started_at.3097d5da75"], "model.data_transform.mar_2021": ["model.data_transform.yr_2021", "test.data_transform.accepted_values_mar_2021_member_casual__member__casual.c63d9ab4d3", "test.data_transform.accepted_values_mar_2021_rideable_type__electric_bike__classic_bike.84bfb07b65", "test.data_transform.unique_mar_2021_ride_id.e07d6d2ddf", "test.data_transform.validate_month_mar_2021_ended_at__3__started_at.b217cf2f94"], "model.data_transform.feb_2020": ["model.data_transform.yr_2020", "test.data_transform.accepted_values_feb_2020_member_casual__member__casual.1ab0133baf", "test.data_transform.accepted_values_feb_2020_rideable_type__electric_bike__classic_bike.98681257a0", "test.data_transform.unique_feb_2020_ride_id.2863b73a76", "test.data_transform.validate_month_feb_2020_ended_at__2__started_at.4814bc395a"], "model.data_transform.jun_2020": ["model.data_transform.yr_2020", "test.data_transform.accepted_values_jun_2020_member_casual__member__casual.754f3c2310", "test.data_transform.accepted_values_jun_2020_rideable_type__electric_bike__classic_bike.5f2c1f91ac", "test.data_transform.unique_jun_2020_ride_id.c525f2e358", "test.data_transform.validate_month_jun_2020_ended_at__6__started_at.6727663680"], "model.data_transform.oct_2020": ["model.data_transform.yr_2020", "test.data_transform.accepted_values_oct_2020_member_casual__member__casual.3d2830f139", "test.data_transform.accepted_values_oct_2020_rideable_type__electric_bike__classic_bike.6be618cf23", "test.data_transform.unique_oct_2020_ride_id.450c9e6451", "test.data_transform.validate_month_oct_2020_ended_at__10__started_at.36c2f3703c"], "model.data_transform.aug_2020": ["model.data_transform.yr_2020", "test.data_transform.accepted_values_aug_2020_member_casual__member__casual.1d2e2220a2", "test.data_transform.accepted_values_aug_2020_rideable_type__electric_bike__classic_bike.613c74bb29", "test.data_transform.unique_aug_2020_ride_id.4b7b980c18", "test.data_transform.validate_month_aug_2020_ended_at__8__started_at.3bda851154"], "model.data_transform.dec_2020": ["model.data_transform.yr_2020", "test.data_transform.accepted_values_dec_2020_member_casual__member__casual.fdc66d6744", "test.data_transform.accepted_values_dec_2020_rideable_type__electric_bike__classic_bike.8bd26e5ce0", "test.data_transform.unique_dec_2020_ride_id.865a6e795e", "test.data_transform.validate_month_dec_2020_ended_at__12__started_at.5b5f2a4319"], "model.data_transform.yr_2020": ["model.data_transform.combined_years", "test.data_transform.accepted_values_yr_2020_member_casual__member__casual.5fad00c049", "test.data_transform.accepted_values_yr_2020_rideable_type__electric_bike__classic_bike.5a0f9a6a7d", "test.data_transform.unique_yr_2020_ride_id.a710725493"], "model.data_transform.jan_2020": ["model.data_transform.yr_2020", "test.data_transform.accepted_values_jan_2020_member_casual__member__casual.d96c161781", "test.data_transform.accepted_values_jan_2020_rideable_type__electric_bike__classic_bike.12497815ca", "test.data_transform.unique_jan_2020_ride_id.d7f848f40f", "test.data_transform.validate_month_jan_2020_ended_at__1__started_at.257dda2cf0"], "model.data_transform.nov_2020": ["model.data_transform.yr_2020", "test.data_transform.accepted_values_nov_2020_member_casual__member__casual.17e252714c", "test.data_transform.accepted_values_nov_2020_rideable_type__electric_bike__classic_bike.1a6fd96aee", "test.data_transform.unique_nov_2020_ride_id.f410d7ba06", "test.data_transform.validate_month_nov_2020_ended_at__11__started_at.4a83d36de2"], "model.data_transform.may_2020": ["model.data_transform.yr_2020", "test.data_transform.accepted_values_may_2020_member_casual__member__casual.024c76cb43", "test.data_transform.accepted_values_may_2020_rideable_type__electric_bike__classic_bike.b54580f2ec", "test.data_transform.unique_may_2020_ride_id.78e3c89f75", "test.data_transform.validate_month_may_2020_ended_at__5__started_at.3fc7180008"], "model.data_transform.apr_2020": ["model.data_transform.yr_2020", "test.data_transform.accepted_values_apr_2020_member_casual__member__casual.2244954a2f", "test.data_transform.accepted_values_apr_2020_rideable_type__electric_bike__classic_bike.d067ffd016", "test.data_transform.unique_apr_2020_ride_id.02de6a5c7b", "test.data_transform.validate_month_apr_2020_ended_at__4__started_at.9ab8e8eab1"], "model.data_transform.sep_2020": ["model.data_transform.yr_2020", "test.data_transform.accepted_values_sep_2020_member_casual__member__casual.7345a381fb", "test.data_transform.accepted_values_sep_2020_rideable_type__electric_bike__classic_bike.144c92218b", "test.data_transform.unique_sep_2020_ride_id.691437c7e4", "test.data_transform.validate_month_sep_2020_ended_at__9__started_at.4f7fb6c985"], "model.data_transform.mar_2020": ["model.data_transform.yr_2020", "test.data_transform.accepted_values_mar_2020_member_casual__member__casual.7293d4266b", "test.data_transform.accepted_values_mar_2020_rideable_type__electric_bike__classic_bike.7c02e59976", "test.data_transform.unique_mar_2020_ride_id.c99a254af6", "test.data_transform.validate_month_mar_2020_ended_at__3__started_at.c7c934cd64"], "model.data_transform.jul_2020": ["model.data_transform.yr_2020", "test.data_transform.accepted_values_jul_2020_member_casual__member__casual.64e1bf3713", "test.data_transform.accepted_values_jul_2020_rideable_type__electric_bike__classic_bike.b6da95939a", "test.data_transform.unique_jul_2020_ride_id.ffba163677", "test.data_transform.validate_month_jul_2020_ended_at__7__started_at.221b4b2b79"], "test.data_transform.unique_fct_citibike_rides_ride_id.283318838a": [], "test.data_transform.accepted_values_fct_citibike_rides_rideable_type__electric_bike__classic_bike.a470a25f4b": [], "test.data_transform.accepted_values_fct_citibike_rides_member_casual__member__casual.17b1cd2173": [], "test.data_transform.unique_combined_years_ride_id.183b32f269": [], "test.data_transform.accepted_values_combined_years_rideable_type__electric_bike__classic_bike.f71ae629f9": [], "test.data_transform.accepted_values_combined_years_member_casual__member__casual.3562887647": [], "test.data_transform.unique_jan_2025_ride_id.a6afb1426b": [], "test.data_transform.accepted_values_jan_2025_rideable_type__electric_bike__classic_bike.dd88220125": [], "test.data_transform.accepted_values_jan_2025_member_casual__member__casual.0028b86617": [], "test.data_transform.validate_month_jan_2025_ended_at__1__started_at.885e570385": [], "test.data_transform.unique_feb_2025_ride_id.07deac57cb": [], "test.data_transform.accepted_values_feb_2025_rideable_type__electric_bike__classic_bike.ac52a64a31": [], "test.data_transform.accepted_values_feb_2025_member_casual__member__casual.586c01d656": [], "test.data_transform.validate_month_feb_2025_ended_at__2__started_at.01dbad3b21": [], "test.data_transform.unique_yr_2025_ride_id.1093d6c21c": [], "test.data_transform.accepted_values_yr_2025_rideable_type__electric_bike__classic_bike.fcc9be54c2": [], "test.data_transform.accepted_values_yr_2025_member_casual__member__casual.1a2ccdae22": [], "test.data_transform.unique_jan_2022_ride_id.1e0255a09d": [], "test.data_transform.accepted_values_jan_2022_rideable_type__electric_bike__classic_bike.a3817d042e": [], "test.data_transform.accepted_values_jan_2022_member_casual__member__casual.16e8af418c": [], "test.data_transform.validate_month_jan_2022_ended_at__1__started_at.dd8cbfc979": [], "test.data_transform.unique_feb_2022_ride_id.36575471c4": [], "test.data_transform.accepted_values_feb_2022_rideable_type__electric_bike__classic_bike.f8458ca3e7": [], "test.data_transform.accepted_values_feb_2022_member_casual__member__casual.5f65f69eb2": [], "test.data_transform.validate_month_feb_2022_ended_at__2__started_at.ceaf7113a8": [], "test.data_transform.unique_mar_2022_ride_id.21df8e8ac2": [], "test.data_transform.accepted_values_mar_2022_rideable_type__electric_bike__classic_bike.0837a03467": [], "test.data_transform.accepted_values_mar_2022_member_casual__member__casual.b285c69f9d": [], "test.data_transform.validate_month_mar_2022_ended_at__3__started_at.529fd2054d": [], "test.data_transform.unique_apr_2022_ride_id.04b95a0f5f": [], "test.data_transform.accepted_values_apr_2022_rideable_type__electric_bike__classic_bike.41d411c416": [], "test.data_transform.accepted_values_apr_2022_member_casual__member__casual.c53995501b": [], "test.data_transform.validate_month_apr_2022_ended_at__4__started_at.d9a58d3cd9": [], "test.data_transform.unique_may_2022_ride_id.af62242e63": [], "test.data_transform.accepted_values_may_2022_rideable_type__electric_bike__classic_bike.a1a65f1e1a": [], "test.data_transform.accepted_values_may_2022_member_casual__member__casual.38217d39e1": [], "test.data_transform.validate_month_may_2022_ended_at__5__started_at.04b52bb967": [], "test.data_transform.unique_jun_2022_ride_id.1e7ad22465": [], "test.data_transform.accepted_values_jun_2022_rideable_type__electric_bike__classic_bike.9261606d25": [], "test.data_transform.accepted_values_jun_2022_member_casual__member__casual.52301af8b5": [], "test.data_transform.validate_month_jun_2022_ended_at__6__started_at.86dcfd7ac7": [], "test.data_transform.unique_jul_2022_ride_id.702f94d5cc": [], "test.data_transform.accepted_values_jul_2022_rideable_type__electric_bike__classic_bike.bcbe03166a": [], "test.data_transform.accepted_values_jul_2022_member_casual__member__casual.2fc053c05a": [], "test.data_transform.validate_month_jul_2022_ended_at__7__started_at.1c7c88371a": [], "test.data_transform.unique_aug_2022_ride_id.ffdd4382ad": [], "test.data_transform.accepted_values_aug_2022_rideable_type__electric_bike__classic_bike.51b0090758": [], "test.data_transform.accepted_values_aug_2022_member_casual__member__casual.fc18f0d350": [], "test.data_transform.validate_month_aug_2022_ended_at__8__started_at.f45a5b8f5f": [], "test.data_transform.unique_sep_2022_ride_id.a8d3fafc02": [], "test.data_transform.accepted_values_sep_2022_rideable_type__electric_bike__classic_bike.c3dcf466d2": [], "test.data_transform.accepted_values_sep_2022_member_casual__member__casual.0d0a35672f": [], "test.data_transform.validate_month_sep_2022_ended_at__9__started_at.84fe2b5d2c": [], "test.data_transform.unique_oct_2022_ride_id.796b2d8c1e": [], "test.data_transform.accepted_values_oct_2022_rideable_type__electric_bike__classic_bike.57fd12192f": [], "test.data_transform.accepted_values_oct_2022_member_casual__member__casual.4e41505c90": [], "test.data_transform.validate_month_oct_2022_ended_at__10__started_at.16cef01c2c": [], "test.data_transform.unique_nov_2022_ride_id.f19a66835e": [], "test.data_transform.accepted_values_nov_2022_rideable_type__electric_bike__classic_bike.f7b434490c": [], "test.data_transform.accepted_values_nov_2022_member_casual__member__casual.455565c14e": [], "test.data_transform.validate_month_nov_2022_ended_at__11__started_at.d80aa41b02": [], "test.data_transform.unique_dec_2022_ride_id.bbbffc9573": [], "test.data_transform.accepted_values_dec_2022_rideable_type__electric_bike__classic_bike.dc1b3c80b8": [], "test.data_transform.accepted_values_dec_2022_member_casual__member__casual.135dfc2ca1": [], "test.data_transform.validate_month_dec_2022_ended_at__12__started_at.1beba005a6": [], "test.data_transform.unique_yr_2022_ride_id.d2430b5cbc": [], "test.data_transform.accepted_values_yr_2022_rideable_type__electric_bike__classic_bike.1fc8016972": [], "test.data_transform.accepted_values_yr_2022_member_casual__member__casual.d3f9bca4d6": [], "test.data_transform.unique_jan_2023_ride_id.1074116e25": [], "test.data_transform.accepted_values_jan_2023_rideable_type__electric_bike__classic_bike.d53d53383d": [], "test.data_transform.accepted_values_jan_2023_member_casual__member__casual.2ef1f5c2fe": [], "test.data_transform.validate_month_jan_2023_ended_at__1__started_at.b0c1fa5eb4": [], "test.data_transform.unique_feb_2023_ride_id.add79ff186": [], "test.data_transform.accepted_values_feb_2023_rideable_type__electric_bike__classic_bike.51e394a011": [], "test.data_transform.accepted_values_feb_2023_member_casual__member__casual.031e289129": [], "test.data_transform.validate_month_feb_2023_ended_at__2__started_at.7ea791c459": [], "test.data_transform.unique_mar_2023_ride_id.89fa5a8337": [], "test.data_transform.accepted_values_mar_2023_rideable_type__electric_bike__classic_bike.aa67d77428": [], "test.data_transform.accepted_values_mar_2023_member_casual__member__casual.d99f8523f4": [], "test.data_transform.validate_month_mar_2023_ended_at__3__started_at.a4624f3dd7": [], "test.data_transform.unique_apr_2023_ride_id.07eedfd4ee": [], "test.data_transform.accepted_values_apr_2023_rideable_type__electric_bike__classic_bike.01826f186c": [], "test.data_transform.accepted_values_apr_2023_member_casual__member__casual.e5bd71e525": [], "test.data_transform.validate_month_apr_2023_ended_at__4__started_at.10d1e32fed": [], "test.data_transform.unique_may_2023_ride_id.1f84c4fdc3": [], "test.data_transform.accepted_values_may_2023_rideable_type__electric_bike__classic_bike.f059bb43ab": [], "test.data_transform.accepted_values_may_2023_member_casual__member__casual.a5d49eea1a": [], "test.data_transform.validate_month_may_2023_ended_at__5__started_at.ae8e43b7d4": [], "test.data_transform.unique_jun_2023_ride_id.82604d40d1": [], "test.data_transform.accepted_values_jun_2023_rideable_type__electric_bike__classic_bike.08d373c057": [], "test.data_transform.accepted_values_jun_2023_member_casual__member__casual.a116e80271": [], "test.data_transform.validate_month_jun_2023_ended_at__6__started_at.3fc3d08e4d": [], "test.data_transform.unique_jul_2023_ride_id.390f336acd": [], "test.data_transform.accepted_values_jul_2023_rideable_type__electric_bike__classic_bike.4fade08a47": [], "test.data_transform.accepted_values_jul_2023_member_casual__member__casual.90581b41a9": [], "test.data_transform.validate_month_jul_2023_ended_at__7__started_at.e61e886fbd": [], "test.data_transform.unique_aug_2023_ride_id.a3134bce14": [], "test.data_transform.accepted_values_aug_2023_rideable_type__electric_bike__classic_bike.0300a72286": [], "test.data_transform.accepted_values_aug_2023_member_casual__member__casual.5dab70bfd7": [], "test.data_transform.validate_month_aug_2023_ended_at__8__started_at.d75cf30380": [], "test.data_transform.unique_sep_2023_ride_id.ca113f723d": [], "test.data_transform.accepted_values_sep_2023_rideable_type__electric_bike__classic_bike.67819e4320": [], "test.data_transform.accepted_values_sep_2023_member_casual__member__casual.02046c4e8e": [], "test.data_transform.validate_month_sep_2023_ended_at__9__started_at.31f9a134de": [], "test.data_transform.unique_oct_2023_ride_id.60aeda33c7": [], "test.data_transform.accepted_values_oct_2023_rideable_type__electric_bike__classic_bike.3cf8054fdb": [], "test.data_transform.accepted_values_oct_2023_member_casual__member__casual.afb9e46c90": [], "test.data_transform.validate_month_oct_2023_ended_at__10__started_at.0227a79041": [], "test.data_transform.unique_nov_2023_ride_id.f85259dd8c": [], "test.data_transform.accepted_values_nov_2023_rideable_type__electric_bike__classic_bike.fec3f24575": [], "test.data_transform.accepted_values_nov_2023_member_casual__member__casual.16f3838708": [], "test.data_transform.validate_month_nov_2023_ended_at__11__started_at.6cc26b335c": [], "test.data_transform.unique_dec_2023_ride_id.a1609de2e7": [], "test.data_transform.accepted_values_dec_2023_rideable_type__electric_bike__classic_bike.acd656a22f": [], "test.data_transform.accepted_values_dec_2023_member_casual__member__casual.957fa6d2c3": [], "test.data_transform.validate_month_dec_2023_ended_at__12__started_at.f7ee9b2cea": [], "test.data_transform.unique_yr_2023_ride_id.7217ceb8ed": [], "test.data_transform.accepted_values_yr_2023_rideable_type__electric_bike__classic_bike.90a7544b2e": [], "test.data_transform.accepted_values_yr_2023_member_casual__member__casual.b43b04bfd1": [], "test.data_transform.unique_jan_2024_ride_id.7dfa0fb566": [], "test.data_transform.accepted_values_jan_2024_rideable_type__electric_bike__classic_bike.9e6ba60770": [], "test.data_transform.accepted_values_jan_2024_member_casual__member__casual.3fab89f86e": [], "test.data_transform.validate_month_jan_2024_ended_at__1__started_at.3f841659d1": [], "test.data_transform.unique_feb_2024_ride_id.369c1cf474": [], "test.data_transform.accepted_values_feb_2024_rideable_type__electric_bike__classic_bike.c3deffbddd": [], "test.data_transform.accepted_values_feb_2024_member_casual__member__casual.f7397df4e6": [], "test.data_transform.validate_month_feb_2024_ended_at__2__started_at.c35b99c9d9": [], "test.data_transform.unique_mar_2024_ride_id.0346c70344": [], "test.data_transform.accepted_values_mar_2024_rideable_type__electric_bike__classic_bike.a2e4c869e2": [], "test.data_transform.accepted_values_mar_2024_member_casual__member__casual.2257878b6c": [], "test.data_transform.validate_month_mar_2024_ended_at__3__started_at.2e90ea48db": [], "test.data_transform.unique_apr_2024_ride_id.518bcab2a1": [], "test.data_transform.accepted_values_apr_2024_rideable_type__electric_bike__classic_bike.ae30a9076a": [], "test.data_transform.accepted_values_apr_2024_member_casual__member__casual.131b1d0e93": [], "test.data_transform.validate_month_apr_2024_ended_at__4__started_at.701bed14c8": [], "test.data_transform.unique_may_2024_ride_id.f90b9f27f2": [], "test.data_transform.accepted_values_may_2024_rideable_type__electric_bike__classic_bike.05dd923e47": [], "test.data_transform.accepted_values_may_2024_member_casual__member__casual.9a77965565": [], "test.data_transform.validate_month_may_2024_ended_at__5__started_at.38feb2e3e4": [], "test.data_transform.unique_jun_2024_ride_id.2085d3af2b": [], "test.data_transform.accepted_values_jun_2024_rideable_type__electric_bike__classic_bike.296748931c": [], "test.data_transform.accepted_values_jun_2024_member_casual__member__casual.cde6875ce9": [], "test.data_transform.validate_month_jun_2024_ended_at__6__started_at.a078811362": [], "test.data_transform.unique_jul_2024_ride_id.0a23064a44": [], "test.data_transform.accepted_values_jul_2024_rideable_type__electric_bike__classic_bike.ac4bda1108": [], "test.data_transform.accepted_values_jul_2024_member_casual__member__casual.00e92abb1b": [], "test.data_transform.validate_month_jul_2024_ended_at__7__started_at.19592997b7": [], "test.data_transform.unique_aug_2024_ride_id.e1479348f4": [], "test.data_transform.accepted_values_aug_2024_rideable_type__electric_bike__classic_bike.8d0aecc8cd": [], "test.data_transform.accepted_values_aug_2024_member_casual__member__casual.a210aaa053": [], "test.data_transform.validate_month_aug_2024_ended_at__8__started_at.7f962fb652": [], "test.data_transform.unique_sep_2024_ride_id.05e447f34c": [], "test.data_transform.accepted_values_sep_2024_rideable_type__electric_bike__classic_bike.a57f13c11c": [], "test.data_transform.accepted_values_sep_2024_member_casual__member__casual.81d0d449db": [], "test.data_transform.validate_month_sep_2024_ended_at__9__started_at.c7a06f6cfe": [], "test.data_transform.unique_oct_2024_ride_id.f9ffd523c2": [], "test.data_transform.accepted_values_oct_2024_rideable_type__electric_bike__classic_bike.37cb9502e3": [], "test.data_transform.accepted_values_oct_2024_member_casual__member__casual.1498a91654": [], "test.data_transform.validate_month_oct_2024_ended_at__10__started_at.74a4af765f": [], "test.data_transform.unique_nov_2024_ride_id.bd7d31bb66": [], "test.data_transform.accepted_values_nov_2024_rideable_type__electric_bike__classic_bike.9cb41102fe": [], "test.data_transform.accepted_values_nov_2024_member_casual__member__casual.f782eeefff": [], "test.data_transform.validate_month_nov_2024_ended_at__11__started_at.8f47700fc8": [], "test.data_transform.unique_dec_2024_ride_id.e63a6867b0": [], "test.data_transform.accepted_values_dec_2024_rideable_type__electric_bike__classic_bike.e5cb433641": [], "test.data_transform.accepted_values_dec_2024_member_casual__member__casual.ba811fe960": [], "test.data_transform.validate_month_dec_2024_ended_at__12__started_at.a0c703573b": [], "test.data_transform.unique_yr_2024_ride_id.1de4ca9eb3": [], "test.data_transform.accepted_values_yr_2024_rideable_type__electric_bike__classic_bike.423adb3059": [], "test.data_transform.accepted_values_yr_2024_member_casual__member__casual.f5d6a256f0": [], "test.data_transform.unique_jan_2021_ride_id.38f514c303": [], "test.data_transform.accepted_values_jan_2021_rideable_type__electric_bike__classic_bike.af59a3aeb3": [], "test.data_transform.accepted_values_jan_2021_member_casual__member__casual.73faa5a5dc": [], "test.data_transform.validate_month_jan_2021_ended_at__1__started_at.7d7fccaff4": [], "test.data_transform.unique_feb_2021_ride_id.798dd40563": [], "test.data_transform.accepted_values_feb_2021_rideable_type__electric_bike__classic_bike.347ac0aef9": [], "test.data_transform.accepted_values_feb_2021_member_casual__member__casual.9bfbe9dfa2": [], "test.data_transform.validate_month_feb_2021_ended_at__2__started_at.4ec15d2767": [], "test.data_transform.unique_mar_2021_ride_id.e07d6d2ddf": [], "test.data_transform.accepted_values_mar_2021_rideable_type__electric_bike__classic_bike.84bfb07b65": [], "test.data_transform.accepted_values_mar_2021_member_casual__member__casual.c63d9ab4d3": [], "test.data_transform.validate_month_mar_2021_ended_at__3__started_at.b217cf2f94": [], "test.data_transform.unique_apr_2021_ride_id.7e13021df3": [], "test.data_transform.accepted_values_apr_2021_rideable_type__electric_bike__classic_bike.f49a4db029": [], "test.data_transform.accepted_values_apr_2021_member_casual__member__casual.c4aa44d3af": [], "test.data_transform.validate_month_apr_2021_ended_at__4__started_at.2e0eea5e91": [], "test.data_transform.unique_may_2021_ride_id.2ea7626782": [], "test.data_transform.accepted_values_may_2021_rideable_type__electric_bike__classic_bike.e375bb63f4": [], "test.data_transform.accepted_values_may_2021_member_casual__member__casual.1c07c6cfc4": [], "test.data_transform.validate_month_may_2021_ended_at__5__started_at.4ca76f818f": [], "test.data_transform.unique_jun_2021_ride_id.7d5ede7720": [], "test.data_transform.accepted_values_jun_2021_rideable_type__electric_bike__classic_bike.fddc612ff9": [], "test.data_transform.accepted_values_jun_2021_member_casual__member__casual.22ffd8b463": [], "test.data_transform.validate_month_jun_2021_ended_at__6__started_at.6bc752d476": [], "test.data_transform.unique_jul_2021_ride_id.a582178788": [], "test.data_transform.accepted_values_jul_2021_rideable_type__electric_bike__classic_bike.21c9a88fb5": [], "test.data_transform.accepted_values_jul_2021_member_casual__member__casual.a29b5393b0": [], "test.data_transform.validate_month_jul_2021_ended_at__7__started_at.3097d5da75": [], "test.data_transform.unique_aug_2021_ride_id.d87d9e6777": [], "test.data_transform.accepted_values_aug_2021_rideable_type__electric_bike__classic_bike.012aea4225": [], "test.data_transform.accepted_values_aug_2021_member_casual__member__casual.f3756a66ce": [], "test.data_transform.validate_month_aug_2021_ended_at__8__started_at.e0ce3a0178": [], "test.data_transform.unique_sep_2021_ride_id.32890cd237": [], "test.data_transform.accepted_values_sep_2021_rideable_type__electric_bike__classic_bike.c4f3cf2112": [], "test.data_transform.accepted_values_sep_2021_member_casual__member__casual.3be55b72cc": [], "test.data_transform.validate_month_sep_2021_ended_at__9__started_at.4f1faa19df": [], "test.data_transform.unique_oct_2021_ride_id.2f8cb722e7": [], "test.data_transform.accepted_values_oct_2021_rideable_type__electric_bike__classic_bike.9840a619e2": [], "test.data_transform.accepted_values_oct_2021_member_casual__member__casual.c407993356": [], "test.data_transform.validate_month_oct_2021_ended_at__10__started_at.9f60196db4": [], "test.data_transform.unique_nov_2021_ride_id.533acd63fc": [], "test.data_transform.accepted_values_nov_2021_rideable_type__electric_bike__classic_bike.02a6c0d9b1": [], "test.data_transform.accepted_values_nov_2021_member_casual__member__casual.769f004905": [], "test.data_transform.validate_month_nov_2021_ended_at__11__started_at.de83a5afbb": [], "test.data_transform.unique_dec_2021_ride_id.7cef2ecfc6": [], "test.data_transform.accepted_values_dec_2021_rideable_type__electric_bike__classic_bike.b3361baeb7": [], "test.data_transform.accepted_values_dec_2021_member_casual__member__casual.e47c83f669": [], "test.data_transform.validate_month_dec_2021_ended_at__12__started_at.dc415b74bb": [], "test.data_transform.unique_yr_2021_ride_id.21f7ca9901": [], "test.data_transform.accepted_values_yr_2021_rideable_type__electric_bike__classic_bike.b7ea1ba880": [], "test.data_transform.accepted_values_yr_2021_member_casual__member__casual.53901ff579": [], "test.data_transform.unique_jan_2020_ride_id.d7f848f40f": [], "test.data_transform.accepted_values_jan_2020_rideable_type__electric_bike__classic_bike.12497815ca": [], "test.data_transform.accepted_values_jan_2020_member_casual__member__casual.d96c161781": [], "test.data_transform.validate_month_jan_2020_ended_at__1__started_at.257dda2cf0": [], "test.data_transform.unique_feb_2020_ride_id.2863b73a76": [], "test.data_transform.accepted_values_feb_2020_rideable_type__electric_bike__classic_bike.98681257a0": [], "test.data_transform.accepted_values_feb_2020_member_casual__member__casual.1ab0133baf": [], "test.data_transform.validate_month_feb_2020_ended_at__2__started_at.4814bc395a": [], "test.data_transform.unique_mar_2020_ride_id.c99a254af6": [], "test.data_transform.accepted_values_mar_2020_rideable_type__electric_bike__classic_bike.7c02e59976": [], "test.data_transform.accepted_values_mar_2020_member_casual__member__casual.7293d4266b": [], "test.data_transform.validate_month_mar_2020_ended_at__3__started_at.c7c934cd64": [], "test.data_transform.unique_apr_2020_ride_id.02de6a5c7b": [], "test.data_transform.accepted_values_apr_2020_rideable_type__electric_bike__classic_bike.d067ffd016": [], "test.data_transform.accepted_values_apr_2020_member_casual__member__casual.2244954a2f": [], "test.data_transform.validate_month_apr_2020_ended_at__4__started_at.9ab8e8eab1": [], "test.data_transform.unique_may_2020_ride_id.78e3c89f75": [], "test.data_transform.accepted_values_may_2020_rideable_type__electric_bike__classic_bike.b54580f2ec": [], "test.data_transform.accepted_values_may_2020_member_casual__member__casual.024c76cb43": [], "test.data_transform.validate_month_may_2020_ended_at__5__started_at.3fc7180008": [], "test.data_transform.unique_jun_2020_ride_id.c525f2e358": [], "test.data_transform.accepted_values_jun_2020_rideable_type__electric_bike__classic_bike.5f2c1f91ac": [], "test.data_transform.accepted_values_jun_2020_member_casual__member__casual.754f3c2310": [], "test.data_transform.validate_month_jun_2020_ended_at__6__started_at.6727663680": [], "test.data_transform.unique_jul_2020_ride_id.ffba163677": [], "test.data_transform.accepted_values_jul_2020_rideable_type__electric_bike__classic_bike.b6da95939a": [], "test.data_transform.accepted_values_jul_2020_member_casual__member__casual.64e1bf3713": [], "test.data_transform.validate_month_jul_2020_ended_at__7__started_at.221b4b2b79": [], "test.data_transform.unique_aug_2020_ride_id.4b7b980c18": [], "test.data_transform.accepted_values_aug_2020_rideable_type__electric_bike__classic_bike.613c74bb29": [], "test.data_transform.accepted_values_aug_2020_member_casual__member__casual.1d2e2220a2": [], "test.data_transform.validate_month_aug_2020_ended_at__8__started_at.3bda851154": [], "test.data_transform.unique_sep_2020_ride_id.691437c7e4": [], "test.data_transform.accepted_values_sep_2020_rideable_type__electric_bike__classic_bike.144c92218b": [], "test.data_transform.accepted_values_sep_2020_member_casual__member__casual.7345a381fb": [], "test.data_transform.validate_month_sep_2020_ended_at__9__started_at.4f7fb6c985": [], "test.data_transform.unique_oct_2020_ride_id.450c9e6451": [], "test.data_transform.accepted_values_oct_2020_rideable_type__electric_bike__classic_bike.6be618cf23": [], "test.data_transform.accepted_values_oct_2020_member_casual__member__casual.3d2830f139": [], "test.data_transform.validate_month_oct_2020_ended_at__10__started_at.36c2f3703c": [], "test.data_transform.unique_nov_2020_ride_id.f410d7ba06": [], "test.data_transform.accepted_values_nov_2020_rideable_type__electric_bike__classic_bike.1a6fd96aee": [], "test.data_transform.accepted_values_nov_2020_member_casual__member__casual.17e252714c": [], "test.data_transform.validate_month_nov_2020_ended_at__11__started_at.4a83d36de2": [], "test.data_transform.unique_dec_2020_ride_id.865a6e795e": [], "test.data_transform.accepted_values_dec_2020_rideable_type__electric_bike__classic_bike.8bd26e5ce0": [], "test.data_transform.accepted_values_dec_2020_member_casual__member__casual.fdc66d6744": [], "test.data_transform.validate_month_dec_2020_ended_at__12__started_at.5b5f2a4319": [], "test.data_transform.unique_yr_2020_ride_id.a710725493": [], "test.data_transform.accepted_values_yr_2020_rideable_type__electric_bike__classic_bike.5a0f9a6a7d": [], "test.data_transform.accepted_values_yr_2020_member_casual__member__casual.5fad00c049": [], "test.data_transform.source_unique_staging_2025_202501_citibike_tripdata_1_ride_id.502692c8d3": [], "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.06fcb921da": [], "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_1_member_casual__member__casual.4b04a3b2e7": [], "test.data_transform.source_unique_staging_2025_202501_citibike_tripdata_2_ride_id.d21916b874": [], "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.f04d434699": [], "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_2_member_casual__member__casual.8b1c00fe8f": [], "test.data_transform.source_unique_staging_2025_202501_citibike_tripdata_3_ride_id.1f172a8402": [], "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.f408147714": [], "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_3_member_casual__member__casual.6763462471": [], "test.data_transform.source_unique_staging_2025_202502_citibike_tripdata_1_ride_id.66660cfd87": [], "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.46e3622553": [], "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_1_member_casual__member__casual.82baa149df": [], "test.data_transform.source_unique_staging_2025_202502_citibike_tripdata_2_ride_id.8a4aa8ae70": [], "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.488ee4d35e": [], "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_2_member_casual__member__casual.37e4db948e": [], "test.data_transform.source_unique_staging_2025_202502_citibike_tripdata_3_ride_id.ba289fa730": [], "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.1a98be6ed9": [], "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_3_member_casual__member__casual.e1d0807522": [], "test.data_transform.source_unique_staging_2022_202201_citibike_tripdata_1_ride_id.d25afd57f4": [], "test.data_transform.source_accepted_values_staging_2022_202201_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.9d1231d982": [], "test.data_transform.source_accepted_values_staging_2022_202201_citibike_tripdata_1_member_casual__member__casual.38003786b6": [], "test.data_transform.source_unique_staging_2022_202201_citibike_tripdata_2_ride_id.5c612b1128": [], "test.data_transform.source_accepted_values_staging_2022_202201_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.cd32aaa5e2": [], "test.data_transform.source_accepted_values_staging_2022_202201_citibike_tripdata_2_member_casual__member__casual.251dfae6f2": [], "test.data_transform.source_unique_staging_2022_202202_citibike_tripdata_1_ride_id.60a5bcaf27": [], "test.data_transform.source_accepted_values_staging_2022_202202_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.33fc30ea6e": [], "test.data_transform.source_accepted_values_staging_2022_202202_citibike_tripdata_1_member_casual__member__casual.8d8ffa16f7": [], "test.data_transform.source_unique_staging_2022_202202_citibike_tripdata_2_ride_id.c374198f51": [], "test.data_transform.source_accepted_values_staging_2022_202202_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.3bd607ceac": [], "test.data_transform.source_accepted_values_staging_2022_202202_citibike_tripdata_2_member_casual__member__casual.d4b5d2e16b": [], "test.data_transform.source_unique_staging_2022_202203_citibike_tripdata_1_ride_id.856d20e9d1": [], "test.data_transform.source_accepted_values_staging_2022_202203_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.c4f4772db3": [], "test.data_transform.source_accepted_values_staging_2022_202203_citibike_tripdata_1_member_casual__member__casual.7d2ed3271a": [], "test.data_transform.source_unique_staging_2022_202203_citibike_tripdata_2_ride_id.bd6eb8c903": [], "test.data_transform.source_accepted_values_staging_2022_202203_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.91a306b283": [], "test.data_transform.source_accepted_values_staging_2022_202203_citibike_tripdata_2_member_casual__member__casual.39468999fe": [], "test.data_transform.source_unique_staging_2022_202204_citibike_tripdata_1_ride_id.89f4d6a012": [], "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.02a4709ece": [], "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_1_member_casual__member__casual.cd7e1bd1e2": [], "test.data_transform.source_unique_staging_2022_202204_citibike_tripdata_2_ride_id.586f76883d": [], "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.5d370d37ba": [], "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_2_member_casual__member__casual.42dc017c46": [], "test.data_transform.source_unique_staging_2022_202204_citibike_tripdata_3_ride_id.f72aeee1bf": [], "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.93b6b9e659": [], "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_3_member_casual__member__casual.6822ad17cd": [], "test.data_transform.source_unique_staging_2022_202205_citibike_tripdata_1_ride_id.1771e82765": [], "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.2d139f2946": [], "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_1_member_casual__member__casual.8a5f161f56": [], "test.data_transform.source_unique_staging_2022_202205_citibike_tripdata_2_ride_id.f653abb820": [], "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.5e23347676": [], "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_2_member_casual__member__casual.1c6fdb96bb": [], "test.data_transform.source_unique_staging_2022_202205_citibike_tripdata_3_ride_id.50fd76340d": [], "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.a1fe18b141": [], "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_3_member_casual__member__casual.dcf8cb1303": [], "test.data_transform.source_unique_staging_2022_202206_citibike_tripdata_1_ride_id.cb4b6f5043": [], "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.10f0df21fe": [], "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_1_member_casual__member__casual.83d5d596ec": [], "test.data_transform.source_unique_staging_2022_202206_citibike_tripdata_2_ride_id.77fe307ee0": [], "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.33b66fd674": [], "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_2_member_casual__member__casual.951189a091": [], "test.data_transform.source_unique_staging_2022_202206_citibike_tripdata_3_ride_id.5ce40a289c": [], "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.1182f213d1": [], "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_3_member_casual__member__casual.06fcfc06d7": [], "test.data_transform.source_unique_staging_2022_202206_citibike_tripdata_4_ride_id.ce011569c2": [], "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.b17562a472": [], "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_4_member_casual__member__casual.b1c8bf49ab": [], "test.data_transform.source_unique_staging_2022_202207_citibike_tripdata_1_ride_id.f6b6f7ff7b": [], "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.f870f4039e": [], "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_1_member_casual__member__casual.3b7c53faa3": [], "test.data_transform.source_unique_staging_2022_202207_citibike_tripdata_2_ride_id.aaa4597238": [], "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.eea05106cf": [], "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_2_member_casual__member__casual.b148011e32": [], "test.data_transform.source_unique_staging_2022_202207_citibike_tripdata_3_ride_id.d461a621eb": [], "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c984fd71be": [], "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_3_member_casual__member__casual.ef85dd4d4a": [], "test.data_transform.source_unique_staging_2022_202207_citibike_tripdata_4_ride_id.7b47674811": [], "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.12a2797dd4": [], "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_4_member_casual__member__casual.4200d34dda": [], "test.data_transform.source_unique_staging_2022_202208_citibike_tripdata_1_ride_id.b752128bb3": [], "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d7f71ab3cc": [], "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_1_member_casual__member__casual.5f78276b13": [], "test.data_transform.source_unique_staging_2022_202208_citibike_tripdata_2_ride_id.84bf2fab34": [], "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.c4a6ef76ec": [], "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_2_member_casual__member__casual.b2e3f7eb36": [], "test.data_transform.source_unique_staging_2022_202208_citibike_tripdata_3_ride_id.229050d32c": [], "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.a8055c5073": [], "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_3_member_casual__member__casual.064c792ee9": [], "test.data_transform.source_unique_staging_2022_202208_citibike_tripdata_4_ride_id.bd71130699": [], "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.b96136fef3": [], "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_4_member_casual__member__casual.7cabd0aaef": [], "test.data_transform.source_unique_staging_2022_202209_citibike_tripdata_1_ride_id.69b513376c": [], "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.1950bfa65e": [], "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_1_member_casual__member__casual.43be26805b": [], "test.data_transform.source_unique_staging_2022_202209_citibike_tripdata_2_ride_id.9287eb310b": [], "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.b2eab29d1c": [], "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_2_member_casual__member__casual.b4eca9e866": [], "test.data_transform.source_unique_staging_2022_202209_citibike_tripdata_3_ride_id.fe4877006a": [], "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.16d81435fa": [], "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_3_member_casual__member__casual.e57a1e3dfb": [], "test.data_transform.source_unique_staging_2022_202209_citibike_tripdata_4_ride_id.c27fc508ca": [], "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.33dede432e": [], "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_4_member_casual__member__casual.b06eb06e1d": [], "test.data_transform.source_unique_staging_2022_202210_citibike_tripdata_1_ride_id.390d32fb45": [], "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d71e555f91": [], "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_1_member_casual__member__casual.b679530ffa": [], "test.data_transform.source_unique_staging_2022_202210_citibike_tripdata_2_ride_id.a356515f4c": [], "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.3b148e382e": [], "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_2_member_casual__member__casual.458e088372": [], "test.data_transform.source_unique_staging_2022_202210_citibike_tripdata_3_ride_id.d290fa3436": [], "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b895dcd5af": [], "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_3_member_casual__member__casual.83cf73a779": [], "test.data_transform.source_unique_staging_2022_202211_citibike_tripdata_1_ride_id.901ff58b5d": [], "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.e7ec80ec4a": [], "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_1_member_casual__member__casual.de35c257d2": [], "test.data_transform.source_unique_staging_2022_202211_citibike_tripdata_2_ride_id.642d1a610f": [], "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.7b9d6ccb68": [], "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_2_member_casual__member__casual.b8a04e5f28": [], "test.data_transform.source_unique_staging_2022_202211_citibike_tripdata_3_ride_id.71487f10cd": [], "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b865047467": [], "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_3_member_casual__member__casual.10a72da3a3": [], "test.data_transform.source_unique_staging_2022_202212_citibike_tripdata_1_ride_id.822e662f10": [], "test.data_transform.source_accepted_values_staging_2022_202212_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.12325c9469": [], "test.data_transform.source_accepted_values_staging_2022_202212_citibike_tripdata_1_member_casual__member__casual.6fab7bc4be": [], "test.data_transform.source_unique_staging_2022_202212_citibike_tripdata_2_ride_id.10f061f8b1": [], "test.data_transform.source_accepted_values_staging_2022_202212_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.44c741a425": [], "test.data_transform.source_accepted_values_staging_2022_202212_citibike_tripdata_2_member_casual__member__casual.f83be4c4ba": [], "test.data_transform.source_unique_staging_2023_202301_citibike_tripdata_1_ride_id.81bc5c6565": [], "test.data_transform.source_accepted_values_staging_2023_202301_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.24bd699579": [], "test.data_transform.source_accepted_values_staging_2023_202301_citibike_tripdata_1_member_casual__member__casual.e67c36625a": [], "test.data_transform.source_unique_staging_2023_202301_citibike_tripdata_2_ride_id.95144646f2": [], "test.data_transform.source_accepted_values_staging_2023_202301_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.57f725ca6e": [], "test.data_transform.source_accepted_values_staging_2023_202301_citibike_tripdata_2_member_casual__member__casual.541abf690c": [], "test.data_transform.source_unique_staging_2023_202302_citibike_tripdata_1_ride_id.df77abeebf": [], "test.data_transform.source_accepted_values_staging_2023_202302_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.7b510489df": [], "test.data_transform.source_accepted_values_staging_2023_202302_citibike_tripdata_1_member_casual__member__casual.aa74171390": [], "test.data_transform.source_unique_staging_2023_202302_citibike_tripdata_2_ride_id.49849a05ab": [], "test.data_transform.source_accepted_values_staging_2023_202302_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.58988dbe96": [], "test.data_transform.source_accepted_values_staging_2023_202302_citibike_tripdata_2_member_casual__member__casual.e6f6833cdf": [], "test.data_transform.source_unique_staging_2023_202303_citibike_tripdata_1_ride_id.5a9ff50cc0": [], "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.f9be5d298d": [], "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_1_member_casual__member__casual.e0ac68a4ae": [], "test.data_transform.source_unique_staging_2023_202303_citibike_tripdata_2_ride_id.3a0b9d32bd": [], "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.66c6843a33": [], "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_2_member_casual__member__casual.34c0460743": [], "test.data_transform.source_unique_staging_2023_202303_citibike_tripdata_3_ride_id.c3932d809c": [], "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.be6459a9a1": [], "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_3_member_casual__member__casual.d4b1ad962f": [], "test.data_transform.source_unique_staging_2023_202304_citibike_tripdata_1_ride_id.e44aabb9e0": [], "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.970647df40": [], "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_1_member_casual__member__casual.071818cc29": [], "test.data_transform.source_unique_staging_2023_202304_citibike_tripdata_2_ride_id.2495989b65": [], "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.2bb8e80167": [], "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_2_member_casual__member__casual.9bf18b0893": [], "test.data_transform.source_unique_staging_2023_202304_citibike_tripdata_3_ride_id.669f8ac7db": [], "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.cd9ebd1819": [], "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_3_member_casual__member__casual.19da833df1": [], "test.data_transform.source_unique_staging_2023_202305_citibike_tripdata_1_ride_id.990d64de35": [], "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.c7b0de21f7": [], "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_1_member_casual__member__casual.512fe17c3c": [], "test.data_transform.source_unique_staging_2023_202305_citibike_tripdata_2_ride_id.a660f8f7ed": [], "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.8ceb74d6e9": [], "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_2_member_casual__member__casual.645b5b6596": [], "test.data_transform.source_unique_staging_2023_202305_citibike_tripdata_3_ride_id.beb699afce": [], "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.9ccd327201": [], "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_3_member_casual__member__casual.f8f8e1dba2": [], "test.data_transform.source_unique_staging_2023_202305_citibike_tripdata_4_ride_id.13182399ce": [], "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.f392354653": [], "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_4_member_casual__member__casual.b023b511ed": [], "test.data_transform.source_unique_staging_2023_202306_citibike_tripdata_1_ride_id.548908d88b": [], "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.77a007c156": [], "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_1_member_casual__member__casual.27439f1a8d": [], "test.data_transform.source_unique_staging_2023_202306_citibike_tripdata_2_ride_id.aa62dd10cd": [], "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.c4d4c174b3": [], "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_2_member_casual__member__casual.1e94854976": [], "test.data_transform.source_unique_staging_2023_202306_citibike_tripdata_3_ride_id.23bf24d291": [], "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.6e51086472": [], "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_3_member_casual__member__casual.2dca2126ea": [], "test.data_transform.source_unique_staging_2023_202306_citibike_tripdata_4_ride_id.7ee4dba58b": [], "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.04ba57f9be": [], "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_4_member_casual__member__casual.46183437f7": [], "test.data_transform.source_unique_staging_2023_202307_citibike_tripdata_1_ride_id.5ed083175c": [], "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.befb9dc7fc": [], "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_1_member_casual__member__casual.0f040b0db8": [], "test.data_transform.source_unique_staging_2023_202307_citibike_tripdata_2_ride_id.68c1a44ec1": [], "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.e967ac1960": [], "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_2_member_casual__member__casual.f1ed4abb5d": [], "test.data_transform.source_unique_staging_2023_202307_citibike_tripdata_3_ride_id.d24badf4df": [], "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c3e53cedb4": [], "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_3_member_casual__member__casual.2fbb9c7047": [], "test.data_transform.source_unique_staging_2023_202307_citibike_tripdata_4_ride_id.5d03214987": [], "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.a989a7c7ed": [], "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_4_member_casual__member__casual.c18da0a869": [], "test.data_transform.source_unique_staging_2023_202308_citibike_tripdata_1_ride_id.1a79714889": [], "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.83dd22a73f": [], "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_1_member_casual__member__casual.b54c1072f8": [], "test.data_transform.source_unique_staging_2023_202308_citibike_tripdata_2_ride_id.952717e3e1": [], "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.797ac00c56": [], "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_2_member_casual__member__casual.ba3056da09": [], "test.data_transform.source_unique_staging_2023_202308_citibike_tripdata_3_ride_id.af9f395666": [], "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.279ec126a7": [], "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_3_member_casual__member__casual.f7fbdf8255": [], "test.data_transform.source_unique_staging_2023_202308_citibike_tripdata_4_ride_id.275fe7ce2a": [], "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.a251739d4d": [], "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_4_member_casual__member__casual.b771418036": [], "test.data_transform.source_unique_staging_2023_202309_citibike_tripdata_1_ride_id.230aeb3b4b": [], "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.86306e4c75": [], "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_1_member_casual__member__casual.9162740ebf": [], "test.data_transform.source_unique_staging_2023_202309_citibike_tripdata_2_ride_id.a703cfc9fc": [], "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.77dc74e850": [], "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_2_member_casual__member__casual.c8eaa2ed28": [], "test.data_transform.source_unique_staging_2023_202309_citibike_tripdata_3_ride_id.d01f717cf2": [], "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.1a8d556210": [], "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_3_member_casual__member__casual.b14b1303bf": [], "test.data_transform.source_unique_staging_2023_202309_citibike_tripdata_4_ride_id.444ada612f": [], "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.923d5ae346": [], "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_4_member_casual__member__casual.cfa900e5cf": [], "test.data_transform.source_unique_staging_2023_202310_citibike_tripdata_1_ride_id.590853bc7c": [], "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.82886257cb": [], "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_1_member_casual__member__casual.60b188b02a": [], "test.data_transform.source_unique_staging_2023_202310_citibike_tripdata_2_ride_id.0e9c742b01": [], "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d824a977e6": [], "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_2_member_casual__member__casual.6caea0aea6": [], "test.data_transform.source_unique_staging_2023_202310_citibike_tripdata_3_ride_id.c6726ceeef": [], "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.bcb96aff07": [], "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_3_member_casual__member__casual.0ba5e64a3e": [], "test.data_transform.source_unique_staging_2023_202310_citibike_tripdata_4_ride_id.f455889270": [], "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.519a2908a6": [], "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_4_member_casual__member__casual.76e7653260": [], "test.data_transform.source_unique_staging_2023_202311_citibike_tripdata_1_ride_id.c537ed70bc": [], "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.804b475b49": [], "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_1_member_casual__member__casual.72f204fd38": [], "test.data_transform.source_unique_staging_2023_202311_citibike_tripdata_2_ride_id.c4ca9d9146": [], "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.bccf307e18": [], "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_2_member_casual__member__casual.2d177c4282": [], "test.data_transform.source_unique_staging_2023_202311_citibike_tripdata_3_ride_id.a01b8419df": [], "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.171ea52344": [], "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_3_member_casual__member__casual.e80c12b3aa": [], "test.data_transform.source_unique_staging_2023_202312_citibike_tripdata_1_ride_id.1572033f07": [], "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.176e483354": [], "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_1_member_casual__member__casual.3589b387d1": [], "test.data_transform.source_unique_staging_2023_202312_citibike_tripdata_2_ride_id.5a0bb8a281": [], "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.e8a6e3b4c1": [], "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_2_member_casual__member__casual.3c634055ce": [], "test.data_transform.source_unique_staging_2023_202312_citibike_tripdata_3_ride_id.bc8b30cd14": [], "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b15f4b9e5e": [], "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_3_member_casual__member__casual.04c6a2e0c6": [], "test.data_transform.source_unique_staging_2024_202401_citibike_tripdata_ride_id.9c1bfdd0e8": [], "test.data_transform.source_accepted_values_staging_2024_202401_citibike_tripdata_rideable_type__electric_bike__classic_bike.9e5955f373": [], "test.data_transform.source_accepted_values_staging_2024_202401_citibike_tripdata_member_casual__member__casual.2af7a66c89": [], "test.data_transform.source_unique_staging_2024_202402_citibike_tripdata_ride_id.e0a561b57b": [], "test.data_transform.source_accepted_values_staging_2024_202402_citibike_tripdata_rideable_type__electric_bike__classic_bike.ab211f12fb": [], "test.data_transform.source_accepted_values_staging_2024_202402_citibike_tripdata_member_casual__member__casual.90a16e8e8c": [], "test.data_transform.source_unique_staging_2024_202403_citibike_tripdata_ride_id.1e9a4f4be0": [], "test.data_transform.source_accepted_values_staging_2024_202403_citibike_tripdata_rideable_type__electric_bike__classic_bike.14f7f02bd0": [], "test.data_transform.source_accepted_values_staging_2024_202403_citibike_tripdata_member_casual__member__casual.80a7467e2a": [], "test.data_transform.source_unique_staging_2024_202404_citibike_tripdata_ride_id.be41092873": [], "test.data_transform.source_accepted_values_staging_2024_202404_citibike_tripdata_rideable_type__electric_bike__classic_bike.225cddb476": [], "test.data_transform.source_accepted_values_staging_2024_202404_citibike_tripdata_member_casual__member__casual.68e71aefc6": [], "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_1_ride_id.10fd576521": [], "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.25bfb8f006": [], "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_1_member_casual__member__casual.c0c9491f38": [], "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_2_ride_id.8bfedf735d": [], "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d5236d44c7": [], "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_2_member_casual__member__casual.e4b553fe91": [], "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_3_ride_id.2810e73c6b": [], "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b36b453c0f": [], "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_3_member_casual__member__casual.be7f170068": [], "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_4_ride_id.ec6c9bdb3e": [], "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.e3a0fb0e40": [], "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_4_member_casual__member__casual.4da875273a": [], "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_5_ride_id.f36781f59f": [], "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.e869852efc": [], "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_5_member_casual__member__casual.3d02d47b38": [], "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_1_ride_id.66cd4f56c6": [], "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.a7f19a61cc": [], "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_1_member_casual__member__casual.a2d6a2f7e5": [], "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_2_ride_id.6c23a63cd1": [], "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.c05219e414": [], "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_2_member_casual__member__casual.c00b5997cd": [], "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_3_ride_id.50c2f7a482": [], "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c2b1cfeaa7": [], "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_3_member_casual__member__casual.c8fc9a2b8f": [], "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_4_ride_id.1d0b9a609e": [], "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.8724801970": [], "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_4_member_casual__member__casual.30119db7e3": [], "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_5_ride_id.a3ecbc5671": [], "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.40c37bad28": [], "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_5_member_casual__member__casual.b4a3bc4a76": [], "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_1_ride_id.91f4690f74": [], "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.b719633391": [], "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_1_member_casual__member__casual.0b63ff5aa0": [], "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_2_ride_id.1b35ecc34e": [], "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.558cc529bf": [], "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_2_member_casual__member__casual.bf43addef2": [], "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_3_ride_id.d7eaa3af7a": [], "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.9084d80750": [], "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_3_member_casual__member__casual.5eb64c744d": [], "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_4_ride_id.5540e8ef36": [], "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.d0efba79e4": [], "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_4_member_casual__member__casual.20e2125326": [], "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_5_ride_id.ea3d1effd5": [], "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.8510e1eef5": [], "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_5_member_casual__member__casual.e45ae9c1fe": [], "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_1_ride_id.27471140bb": [], "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.af7a2b0803": [], "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_1_member_casual__member__casual.90645fffc2": [], "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_2_ride_id.dc8e6c1013": [], "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.53021c667f": [], "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_2_member_casual__member__casual.3343eecc89": [], "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_3_ride_id.ee75cd89ba": [], "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.045af9f6fc": [], "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_3_member_casual__member__casual.9dd3cae333": [], "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_4_ride_id.c5f8fe150d": [], "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.0d31aa1b38": [], "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_4_member_casual__member__casual.65e3e95e00": [], "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_5_ride_id.b843752ea0": [], "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.19a1b069c2": [], "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_5_member_casual__member__casual.71886dec1c": [], "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_1_ride_id.9af5c69b56": [], "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.6f3eec580a": [], "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_1_member_casual__member__casual.bae5aeff15": [], "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_2_ride_id.7f34812d51": [], "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.90bfc78098": [], "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_2_member_casual__member__casual.2b24d49fdd": [], "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_3_ride_id.c63f75eb36": [], "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.df8da18287": [], "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_3_member_casual__member__casual.c4d49e5e42": [], "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_4_ride_id.4a94a1150e": [], "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.aadd0d6f82": [], "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_4_member_casual__member__casual.1e96cecca5": [], "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_5_ride_id.144de7852e": [], "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.e1dc23b9e9": [], "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_5_member_casual__member__casual.95628007c5": [], "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_1_ride_id.5d27bcfc2f": [], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.1b27054fdb": [], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_1_member_casual__member__casual.69a66b1b7b": [], "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_2_ride_id.c07c200646": [], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.c978b1fe85": [], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_2_member_casual__member__casual.94b5d6f1d8": [], "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_3_ride_id.da299a20e2": [], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c2b9dbe50a": [], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_3_member_casual__member__casual.b52b8e1f5f": [], "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_4_ride_id.86ee5ee7f7": [], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.c76da46d7e": [], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_4_member_casual__member__casual.1380e42b22": [], "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_5_ride_id.0e19fb8ad7": [], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.c41c9a5044": [], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_5_member_casual__member__casual.53205d918a": [], "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_6_ride_id.77681bc510": [], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_6_rideable_type__electric_bike__classic_bike.a0e21ac7c4": [], "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_6_member_casual__member__casual.8b9a7fc94c": [], "test.data_transform.source_unique_staging_2024_202411_citibike_tripdata_1_ride_id.a8bd390113": [], "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.10b749caa9": [], "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_1_member_casual__member__casual.83bcc975c4": [], "test.data_transform.source_unique_staging_2024_202411_citibike_tripdata_2_ride_id.26a4253341": [], "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.ba3e2e4179": [], "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_2_member_casual__member__casual.32388c500a": [], "test.data_transform.source_unique_staging_2024_202411_citibike_tripdata_3_ride_id.df7b29eb96": [], "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c7906c8cfc": [], "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_3_member_casual__member__casual.bb2640d8bc": [], "test.data_transform.source_unique_staging_2024_202411_citibike_tripdata_4_ride_id.5450ec8fc8": [], "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.9181ad6fc0": [], "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_4_member_casual__member__casual.48ae52f5c6": [], "test.data_transform.source_unique_staging_2024_202412_citibike_tripdata_1_ride_id.c11d9c9414": [], "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.602815d31b": [], "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_1_member_casual__member__casual.1288197709": [], "test.data_transform.source_unique_staging_2024_202412_citibike_tripdata_2_ride_id.9f7c6b6835": [], "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.31fba28628": [], "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_2_member_casual__member__casual.2b7c7ec75c": [], "test.data_transform.source_unique_staging_2024_202412_citibike_tripdata_3_ride_id.3f60f32258": [], "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.847a432211": [], "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_3_member_casual__member__casual.c479cdfd39": [], "test.data_transform.source_unique_staging_2021_202101_citibike_tripdata_1_ride_id.c54fc2a035": [], "test.data_transform.source_accepted_values_staging_2021_202101_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.24a0988e0d": [], "test.data_transform.source_accepted_values_staging_2021_202101_citibike_tripdata_1_member_casual__member__casual.2b431faf6f": [], "test.data_transform.source_unique_staging_2021_202101_citibike_tripdata_2_ride_id.5e6d30062a": [], "test.data_transform.source_accepted_values_staging_2021_202101_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.8a205bad62": [], "test.data_transform.source_accepted_values_staging_2021_202101_citibike_tripdata_2_member_casual__member__casual.84821b042c": [], "test.data_transform.source_unique_staging_2021_202102_citibike_tripdata_1_ride_id.cb09fc8f90": [], "test.data_transform.source_accepted_values_staging_2021_202102_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.a9d8406edf": [], "test.data_transform.source_accepted_values_staging_2021_202102_citibike_tripdata_1_member_casual__member__casual.c311912a3a": [], "test.data_transform.source_unique_staging_2021_202103_citibike_tripdata_1_ride_id.77c231fd86": [], "test.data_transform.source_accepted_values_staging_2021_202103_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.21fcf28c86": [], "test.data_transform.source_accepted_values_staging_2021_202103_citibike_tripdata_1_member_casual__member__casual.b7b9f1a1c9": [], "test.data_transform.source_unique_staging_2021_202103_citibike_tripdata_2_ride_id.cb02d768fb": [], "test.data_transform.source_accepted_values_staging_2021_202103_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.748b88414d": [], "test.data_transform.source_accepted_values_staging_2021_202103_citibike_tripdata_2_member_casual__member__casual.13df90702e": [], "test.data_transform.source_unique_staging_2021_202104_citibike_tripdata_1_ride_id.f765fb12c6": [], "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.67171bd77f": [], "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_1_member_casual__member__casual.eaf5b0b2d8": [], "test.data_transform.source_unique_staging_2021_202104_citibike_tripdata_2_ride_id.8aecd28751": [], "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.10a807266a": [], "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_2_member_casual__member__casual.91b27674a1": [], "test.data_transform.source_unique_staging_2021_202104_citibike_tripdata_3_ride_id.b197dd7c4c": [], "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.bcc1600a5a": [], "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_3_member_casual__member__casual.66f974b607": [], "test.data_transform.source_unique_staging_2021_202105_citibike_tripdata_1_ride_id.258b56e8d5": [], "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.5289fd62fb": [], "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_1_member_casual__member__casual.4fb310fbfd": [], "test.data_transform.source_unique_staging_2021_202105_citibike_tripdata_2_ride_id.18eada12b7": [], "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.98921971ef": [], "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_2_member_casual__member__casual.bea25ded95": [], "test.data_transform.source_unique_staging_2021_202105_citibike_tripdata_3_ride_id.ffe5f18f26": [], "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.739b51f382": [], "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_3_member_casual__member__casual.83a551dd7a": [], "test.data_transform.source_unique_staging_2021_202106_citibike_tripdata_1_ride_id.40ab30ec21": [], "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.cf44063f90": [], "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_1_member_casual__member__casual.0374989de7": [], "test.data_transform.source_unique_staging_2021_202106_citibike_tripdata_2_ride_id.45c70ca55a": [], "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d247f397da": [], "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_2_member_casual__member__casual.7f7733a1f3": [], "test.data_transform.source_unique_staging_2021_202106_citibike_tripdata_3_ride_id.f87b8dd150": [], "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.6a590a79b8": [], "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_3_member_casual__member__casual.0b8a955605": [], "test.data_transform.source_unique_staging_2021_202106_citibike_tripdata_4_ride_id.14065d7a65": [], "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.cb6cdd1270": [], "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_4_member_casual__member__casual.060131e290": [], "test.data_transform.source_unique_staging_2021_202107_citibike_tripdata_1_ride_id.4a24d94602": [], "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.e5eec0cb2a": [], "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_1_member_casual__member__casual.8bc6a43143": [], "test.data_transform.source_unique_staging_2021_202107_citibike_tripdata_2_ride_id.a27fc40e13": [], "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d17df087bd": [], "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_2_member_casual__member__casual.9bfcb30451": [], "test.data_transform.source_unique_staging_2021_202107_citibike_tripdata_3_ride_id.dfeb4d67da": [], "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.506404c0c7": [], "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_3_member_casual__member__casual.7d30beb88d": [], "test.data_transform.source_unique_staging_2021_202107_citibike_tripdata_4_ride_id.8a373eccf2": [], "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.87de44504b": [], "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_4_member_casual__member__casual.c76d5158e0": [], "test.data_transform.source_unique_staging_2021_202108_citibike_tripdata_1_ride_id.fccd7246ad": [], "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d1bdd31477": [], "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_1_member_casual__member__casual.cc08f301ce": [], "test.data_transform.source_unique_staging_2021_202108_citibike_tripdata_2_ride_id.1213a78a85": [], "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.4a120cef16": [], "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_2_member_casual__member__casual.30aaba5086": [], "test.data_transform.source_unique_staging_2021_202108_citibike_tripdata_3_ride_id.8851d96b04": [], "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.e952f53885": [], "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_3_member_casual__member__casual.abe085f3c5": [], "test.data_transform.source_unique_staging_2021_202108_citibike_tripdata_4_ride_id.e317ef0e40": [], "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.2b6464adab": [], "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_4_member_casual__member__casual.860266a4b9": [], "test.data_transform.source_unique_staging_2021_202109_citibike_tripdata_1_ride_id.a26d2aedeb": [], "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.14d685dbfb": [], "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_1_member_casual__member__casual.cd66eb2de2": [], "test.data_transform.source_unique_staging_2021_202109_citibike_tripdata_2_ride_id.8b61779d71": [], "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d5429f412b": [], "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_2_member_casual__member__casual.5b52d33ab6": [], "test.data_transform.source_unique_staging_2021_202109_citibike_tripdata_3_ride_id.fcba893a9a": [], "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.a327bf3797": [], "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_3_member_casual__member__casual.f088e7ad5a": [], "test.data_transform.source_unique_staging_2021_202109_citibike_tripdata_4_ride_id.c8d278b17e": [], "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.2d013538ac": [], "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_4_member_casual__member__casual.1bca846f67": [], "test.data_transform.source_unique_staging_2021_202110_citibike_tripdata_1_ride_id.6bd06769a9": [], "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.c229074449": [], "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_1_member_casual__member__casual.8f3a45ba98": [], "test.data_transform.source_unique_staging_2021_202110_citibike_tripdata_2_ride_id.32c6ee955d": [], "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.a401e5db20": [], "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_2_member_casual__member__casual.8944c18c5f": [], "test.data_transform.source_unique_staging_2021_202110_citibike_tripdata_3_ride_id.ffe71673fd": [], "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b94eb150fa": [], "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_3_member_casual__member__casual.b509ddd8d4": [], "test.data_transform.source_unique_staging_2021_202110_citibike_tripdata_4_ride_id.f72b7ed84b": [], "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.c899723d08": [], "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_4_member_casual__member__casual.b315cea45a": [], "test.data_transform.source_unique_staging_2021_202111_citibike_tripdata_1_ride_id.ef6d9c0518": [], "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.e09e5b3640": [], "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_1_member_casual__member__casual.4da73b0077": [], "test.data_transform.source_unique_staging_2021_202111_citibike_tripdata_2_ride_id.6551fc2143": [], "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.480f8285ce": [], "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_2_member_casual__member__casual.715afd4fbd": [], "test.data_transform.source_unique_staging_2021_202111_citibike_tripdata_3_ride_id.cf8b52b071": [], "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c340f0742d": [], "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_3_member_casual__member__casual.c606d0b9a5": [], "test.data_transform.source_unique_staging_2021_202112_citibike_tripdata_1_ride_id.4da4b782ec": [], "test.data_transform.source_accepted_values_staging_2021_202112_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.380ecfe5ef": [], "test.data_transform.source_accepted_values_staging_2021_202112_citibike_tripdata_1_member_casual__member__casual.868a8816ca": [], "test.data_transform.source_unique_staging_2021_202112_citibike_tripdata_2_ride_id.408522cf2b": [], "test.data_transform.source_accepted_values_staging_2021_202112_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.42a6584623": [], "test.data_transform.source_accepted_values_staging_2021_202112_citibike_tripdata_2_member_casual__member__casual.d2a15a3818": [], "test.data_transform.source_unique_staging_2020_202001_citibike_tripdata_1_ride_id.4261206b1a": [], "test.data_transform.source_accepted_values_staging_2020_202001_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d00ba7dbb3": [], "test.data_transform.source_accepted_values_staging_2020_202001_citibike_tripdata_1_member_casual__member__casual.44cc8596cf": [], "test.data_transform.source_unique_staging_2020_202001_citibike_tripdata_2_ride_id.409cf6d4d5": [], "test.data_transform.source_accepted_values_staging_2020_202001_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.14124ed531": [], "test.data_transform.source_accepted_values_staging_2020_202001_citibike_tripdata_2_member_casual__member__casual.105c3d285a": [], "test.data_transform.source_unique_staging_2020_202002_citibike_tripdata_1_ride_id.8601ab65ec": [], "test.data_transform.source_accepted_values_staging_2020_202002_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.f3e8709109": [], "test.data_transform.source_accepted_values_staging_2020_202002_citibike_tripdata_1_member_casual__member__casual.9068fac9df": [], "test.data_transform.source_unique_staging_2020_202002_citibike_tripdata_2_ride_id.49ab7c2eb0": [], "test.data_transform.source_accepted_values_staging_2020_202002_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.b654b93119": [], "test.data_transform.source_accepted_values_staging_2020_202002_citibike_tripdata_2_member_casual__member__casual.93543152ed": [], "test.data_transform.source_unique_staging_2020_202003_citibike_tripdata_1_ride_id.affd78e3c1": [], "test.data_transform.source_accepted_values_staging_2020_202003_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.ade85bb3b7": [], "test.data_transform.source_accepted_values_staging_2020_202003_citibike_tripdata_1_member_casual__member__casual.adc7f375b2": [], "test.data_transform.source_unique_staging_2020_202003_citibike_tripdata_2_ride_id.7948dcbf8c": [], "test.data_transform.source_accepted_values_staging_2020_202003_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.ce1e7a6683": [], "test.data_transform.source_accepted_values_staging_2020_202003_citibike_tripdata_2_member_casual__member__casual.fc383b9e6a": [], "test.data_transform.source_unique_staging_2020_202004_citibike_tripdata_1_ride_id.6e99a3dacc": [], "test.data_transform.source_accepted_values_staging_2020_202004_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.e97ec4c3d5": [], "test.data_transform.source_accepted_values_staging_2020_202004_citibike_tripdata_1_member_casual__member__casual.4b69881c15": [], "test.data_transform.source_unique_staging_2020_202005_citibike_tripdata_1_ride_id.e127959e40": [], "test.data_transform.source_accepted_values_staging_2020_202005_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d893005ba2": [], "test.data_transform.source_accepted_values_staging_2020_202005_citibike_tripdata_1_member_casual__member__casual.2325ca6095": [], "test.data_transform.source_unique_staging_2020_202005_citibike_tripdata_2_ride_id.8109c8f605": [], "test.data_transform.source_accepted_values_staging_2020_202005_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.e6a49616c5": [], "test.data_transform.source_accepted_values_staging_2020_202005_citibike_tripdata_2_member_casual__member__casual.762faaeb56": [], "test.data_transform.source_unique_staging_2020_202006_citibike_tripdata_1_ride_id.a2790e72d3": [], "test.data_transform.source_accepted_values_staging_2020_202006_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.6e273b7d21": [], "test.data_transform.source_accepted_values_staging_2020_202006_citibike_tripdata_1_member_casual__member__casual.81ebfbb8a6": [], "test.data_transform.source_unique_staging_2020_202006_citibike_tripdata_2_ride_id.6c635769aa": [], "test.data_transform.source_accepted_values_staging_2020_202006_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.cbd326cee8": [], "test.data_transform.source_accepted_values_staging_2020_202006_citibike_tripdata_2_member_casual__member__casual.281045dad3": [], "test.data_transform.source_unique_staging_2020_202007_citibike_tripdata_1_ride_id.b185028041": [], "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.fc0b2e3e77": [], "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_1_member_casual__member__casual.c29dfcd473": [], "test.data_transform.source_unique_staging_2020_202007_citibike_tripdata_2_ride_id.cacf5d17c2": [], "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.048f185030": [], "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_2_member_casual__member__casual.9067daae8b": [], "test.data_transform.source_unique_staging_2020_202007_citibike_tripdata_3_ride_id.ba55dee410": [], "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.1463226fa0": [], "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_3_member_casual__member__casual.7b4d3cbacc": [], "test.data_transform.source_unique_staging_2020_202008_citibike_tripdata_1_ride_id.86c7faaf1f": [], "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.3669cd2eeb": [], "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_1_member_casual__member__casual.9e70548609": [], "test.data_transform.source_unique_staging_2020_202008_citibike_tripdata_2_ride_id.669577147b": [], "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.35791b39a0": [], "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_2_member_casual__member__casual.8a344840dd": [], "test.data_transform.source_unique_staging_2020_202008_citibike_tripdata_3_ride_id.71862e4439": [], "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.dc33adc6aa": [], "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_3_member_casual__member__casual.4536657f3e": [], "test.data_transform.source_unique_staging_2020_202009_citibike_tripdata_1_ride_id.f0fb99328b": [], "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.fe0035d52e": [], "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_1_member_casual__member__casual.f853b35dfd": [], "test.data_transform.source_unique_staging_2020_202009_citibike_tripdata_2_ride_id.e4d1d77c74": [], "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.f75167f70f": [], "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_2_member_casual__member__casual.42b16aa931": [], "test.data_transform.source_unique_staging_2020_202009_citibike_tripdata_3_ride_id.17555a51e0": [], "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.89137c2f23": [], "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_3_member_casual__member__casual.06e4cc1a66": [], "test.data_transform.source_unique_staging_2020_202010_citibike_tripdata_1_ride_id.6b5fc4748b": [], "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.a1db329b10": [], "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_1_member_casual__member__casual.c369b4ae5e": [], "test.data_transform.source_unique_staging_2020_202010_citibike_tripdata_2_ride_id.dd128b141b": [], "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.393d064471": [], "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_2_member_casual__member__casual.a6fe045335": [], "test.data_transform.source_unique_staging_2020_202010_citibike_tripdata_3_ride_id.f9aed44f07": [], "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.5b0cc5a5fb": [], "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_3_member_casual__member__casual.6887ca0f19": [], "test.data_transform.source_unique_staging_2020_202011_citibike_tripdata_1_ride_id.977b9f4133": [], "test.data_transform.source_accepted_values_staging_2020_202011_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.144abdec5e": [], "test.data_transform.source_accepted_values_staging_2020_202011_citibike_tripdata_1_member_casual__member__casual.d078de3826": [], "test.data_transform.source_unique_staging_2020_202011_citibike_tripdata_2_ride_id.bcd9c01318": [], "test.data_transform.source_accepted_values_staging_2020_202011_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.582d3de83d": [], "test.data_transform.source_accepted_values_staging_2020_202011_citibike_tripdata_2_member_casual__member__casual.76b0cbdd09": [], "test.data_transform.source_unique_staging_2020_202012_citibike_tripdata_1_ride_id.07247252f8": [], "test.data_transform.source_accepted_values_staging_2020_202012_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.081d8e1411": [], "test.data_transform.source_accepted_values_staging_2020_202012_citibike_tripdata_1_member_casual__member__casual.a43499a4ec": [], "test.data_transform.source_unique_staging_2020_202012_citibike_tripdata_2_ride_id.995b0180fc": [], "test.data_transform.source_accepted_values_staging_2020_202012_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.3e6163dc4d": [], "test.data_transform.source_accepted_values_staging_2020_202012_citibike_tripdata_2_member_casual__member__casual.6cfabc4395": [], "source.data_transform.staging_2025.202501_citibike_tripdata_1": ["model.data_transform.jan_2025", "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_1_member_casual__member__casual.4b04a3b2e7", "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.06fcb921da", "test.data_transform.source_unique_staging_2025_202501_citibike_tripdata_1_ride_id.502692c8d3"], "source.data_transform.staging_2025.202501_citibike_tripdata_2": ["model.data_transform.jan_2025", "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_2_member_casual__member__casual.8b1c00fe8f", "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.f04d434699", "test.data_transform.source_unique_staging_2025_202501_citibike_tripdata_2_ride_id.d21916b874"], "source.data_transform.staging_2025.202501_citibike_tripdata_3": ["model.data_transform.jan_2025", "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_3_member_casual__member__casual.6763462471", "test.data_transform.source_accepted_values_staging_2025_202501_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.f408147714", "test.data_transform.source_unique_staging_2025_202501_citibike_tripdata_3_ride_id.1f172a8402"], "source.data_transform.staging_2025.202502_citibike_tripdata_1": ["model.data_transform.feb_2025", "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_1_member_casual__member__casual.82baa149df", "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.46e3622553", "test.data_transform.source_unique_staging_2025_202502_citibike_tripdata_1_ride_id.66660cfd87"], "source.data_transform.staging_2025.202502_citibike_tripdata_2": ["model.data_transform.feb_2025", "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_2_member_casual__member__casual.37e4db948e", "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.488ee4d35e", "test.data_transform.source_unique_staging_2025_202502_citibike_tripdata_2_ride_id.8a4aa8ae70"], "source.data_transform.staging_2025.202502_citibike_tripdata_3": ["model.data_transform.feb_2025", "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_3_member_casual__member__casual.e1d0807522", "test.data_transform.source_accepted_values_staging_2025_202502_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.1a98be6ed9", "test.data_transform.source_unique_staging_2025_202502_citibike_tripdata_3_ride_id.ba289fa730"], "source.data_transform.staging_2022.202201_citibike_tripdata_1": ["model.data_transform.jan_2022", "test.data_transform.source_accepted_values_staging_2022_202201_citibike_tripdata_1_member_casual__member__casual.38003786b6", "test.data_transform.source_accepted_values_staging_2022_202201_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.9d1231d982", "test.data_transform.source_unique_staging_2022_202201_citibike_tripdata_1_ride_id.d25afd57f4"], "source.data_transform.staging_2022.202201_citibike_tripdata_2": ["model.data_transform.jan_2022", "test.data_transform.source_accepted_values_staging_2022_202201_citibike_tripdata_2_member_casual__member__casual.251dfae6f2", "test.data_transform.source_accepted_values_staging_2022_202201_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.cd32aaa5e2", "test.data_transform.source_unique_staging_2022_202201_citibike_tripdata_2_ride_id.5c612b1128"], "source.data_transform.staging_2022.202202_citibike_tripdata_1": ["model.data_transform.feb_2022", "test.data_transform.source_accepted_values_staging_2022_202202_citibike_tripdata_1_member_casual__member__casual.8d8ffa16f7", "test.data_transform.source_accepted_values_staging_2022_202202_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.33fc30ea6e", "test.data_transform.source_unique_staging_2022_202202_citibike_tripdata_1_ride_id.60a5bcaf27"], "source.data_transform.staging_2022.202202_citibike_tripdata_2": ["model.data_transform.feb_2022", "test.data_transform.source_accepted_values_staging_2022_202202_citibike_tripdata_2_member_casual__member__casual.d4b5d2e16b", "test.data_transform.source_accepted_values_staging_2022_202202_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.3bd607ceac", "test.data_transform.source_unique_staging_2022_202202_citibike_tripdata_2_ride_id.c374198f51"], "source.data_transform.staging_2022.202203_citibike_tripdata_1": ["model.data_transform.mar_2022", "test.data_transform.source_accepted_values_staging_2022_202203_citibike_tripdata_1_member_casual__member__casual.7d2ed3271a", "test.data_transform.source_accepted_values_staging_2022_202203_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.c4f4772db3", "test.data_transform.source_unique_staging_2022_202203_citibike_tripdata_1_ride_id.856d20e9d1"], "source.data_transform.staging_2022.202203_citibike_tripdata_2": ["model.data_transform.mar_2022", "test.data_transform.source_accepted_values_staging_2022_202203_citibike_tripdata_2_member_casual__member__casual.39468999fe", "test.data_transform.source_accepted_values_staging_2022_202203_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.91a306b283", "test.data_transform.source_unique_staging_2022_202203_citibike_tripdata_2_ride_id.bd6eb8c903"], "source.data_transform.staging_2022.202204_citibike_tripdata_1": ["model.data_transform.apr_2022", "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_1_member_casual__member__casual.cd7e1bd1e2", "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.02a4709ece", "test.data_transform.source_unique_staging_2022_202204_citibike_tripdata_1_ride_id.89f4d6a012"], "source.data_transform.staging_2022.202204_citibike_tripdata_2": ["model.data_transform.apr_2022", "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_2_member_casual__member__casual.42dc017c46", "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.5d370d37ba", "test.data_transform.source_unique_staging_2022_202204_citibike_tripdata_2_ride_id.586f76883d"], "source.data_transform.staging_2022.202204_citibike_tripdata_3": ["model.data_transform.apr_2022", "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_3_member_casual__member__casual.6822ad17cd", "test.data_transform.source_accepted_values_staging_2022_202204_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.93b6b9e659", "test.data_transform.source_unique_staging_2022_202204_citibike_tripdata_3_ride_id.f72aeee1bf"], "source.data_transform.staging_2022.202205_citibike_tripdata_1": ["model.data_transform.may_2022", "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_1_member_casual__member__casual.8a5f161f56", "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.2d139f2946", "test.data_transform.source_unique_staging_2022_202205_citibike_tripdata_1_ride_id.1771e82765"], "source.data_transform.staging_2022.202205_citibike_tripdata_2": ["model.data_transform.may_2022", "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_2_member_casual__member__casual.1c6fdb96bb", "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.5e23347676", "test.data_transform.source_unique_staging_2022_202205_citibike_tripdata_2_ride_id.f653abb820"], "source.data_transform.staging_2022.202205_citibike_tripdata_3": ["model.data_transform.may_2022", "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_3_member_casual__member__casual.dcf8cb1303", "test.data_transform.source_accepted_values_staging_2022_202205_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.a1fe18b141", "test.data_transform.source_unique_staging_2022_202205_citibike_tripdata_3_ride_id.50fd76340d"], "source.data_transform.staging_2022.202206_citibike_tripdata_1": ["model.data_transform.jun_2022", "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_1_member_casual__member__casual.83d5d596ec", "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.10f0df21fe", "test.data_transform.source_unique_staging_2022_202206_citibike_tripdata_1_ride_id.cb4b6f5043"], "source.data_transform.staging_2022.202206_citibike_tripdata_2": ["model.data_transform.jun_2022", "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_2_member_casual__member__casual.951189a091", "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.33b66fd674", "test.data_transform.source_unique_staging_2022_202206_citibike_tripdata_2_ride_id.77fe307ee0"], "source.data_transform.staging_2022.202206_citibike_tripdata_3": ["model.data_transform.jun_2022", "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_3_member_casual__member__casual.06fcfc06d7", "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.1182f213d1", "test.data_transform.source_unique_staging_2022_202206_citibike_tripdata_3_ride_id.5ce40a289c"], "source.data_transform.staging_2022.202206_citibike_tripdata_4": ["model.data_transform.jun_2022", "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_4_member_casual__member__casual.b1c8bf49ab", "test.data_transform.source_accepted_values_staging_2022_202206_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.b17562a472", "test.data_transform.source_unique_staging_2022_202206_citibike_tripdata_4_ride_id.ce011569c2"], "source.data_transform.staging_2022.202207_citibike_tripdata_1": ["model.data_transform.jul_2022", "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_1_member_casual__member__casual.3b7c53faa3", "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.f870f4039e", "test.data_transform.source_unique_staging_2022_202207_citibike_tripdata_1_ride_id.f6b6f7ff7b"], "source.data_transform.staging_2022.202207_citibike_tripdata_2": ["model.data_transform.jul_2022", "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_2_member_casual__member__casual.b148011e32", "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.eea05106cf", "test.data_transform.source_unique_staging_2022_202207_citibike_tripdata_2_ride_id.aaa4597238"], "source.data_transform.staging_2022.202207_citibike_tripdata_3": ["model.data_transform.jul_2022", "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_3_member_casual__member__casual.ef85dd4d4a", "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c984fd71be", "test.data_transform.source_unique_staging_2022_202207_citibike_tripdata_3_ride_id.d461a621eb"], "source.data_transform.staging_2022.202207_citibike_tripdata_4": ["model.data_transform.jul_2022", "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_4_member_casual__member__casual.4200d34dda", "test.data_transform.source_accepted_values_staging_2022_202207_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.12a2797dd4", "test.data_transform.source_unique_staging_2022_202207_citibike_tripdata_4_ride_id.7b47674811"], "source.data_transform.staging_2022.202208_citibike_tripdata_1": ["model.data_transform.aug_2022", "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_1_member_casual__member__casual.5f78276b13", "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d7f71ab3cc", "test.data_transform.source_unique_staging_2022_202208_citibike_tripdata_1_ride_id.b752128bb3"], "source.data_transform.staging_2022.202208_citibike_tripdata_2": ["model.data_transform.aug_2022", "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_2_member_casual__member__casual.b2e3f7eb36", "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.c4a6ef76ec", "test.data_transform.source_unique_staging_2022_202208_citibike_tripdata_2_ride_id.84bf2fab34"], "source.data_transform.staging_2022.202208_citibike_tripdata_3": ["model.data_transform.aug_2022", "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_3_member_casual__member__casual.064c792ee9", "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.a8055c5073", "test.data_transform.source_unique_staging_2022_202208_citibike_tripdata_3_ride_id.229050d32c"], "source.data_transform.staging_2022.202208_citibike_tripdata_4": ["model.data_transform.aug_2022", "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_4_member_casual__member__casual.7cabd0aaef", "test.data_transform.source_accepted_values_staging_2022_202208_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.b96136fef3", "test.data_transform.source_unique_staging_2022_202208_citibike_tripdata_4_ride_id.bd71130699"], "source.data_transform.staging_2022.202209_citibike_tripdata_1": ["model.data_transform.sep_2022", "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_1_member_casual__member__casual.43be26805b", "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.1950bfa65e", "test.data_transform.source_unique_staging_2022_202209_citibike_tripdata_1_ride_id.69b513376c"], "source.data_transform.staging_2022.202209_citibike_tripdata_2": ["model.data_transform.sep_2022", "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_2_member_casual__member__casual.b4eca9e866", "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.b2eab29d1c", "test.data_transform.source_unique_staging_2022_202209_citibike_tripdata_2_ride_id.9287eb310b"], "source.data_transform.staging_2022.202209_citibike_tripdata_3": ["model.data_transform.sep_2022", "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_3_member_casual__member__casual.e57a1e3dfb", "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.16d81435fa", "test.data_transform.source_unique_staging_2022_202209_citibike_tripdata_3_ride_id.fe4877006a"], "source.data_transform.staging_2022.202209_citibike_tripdata_4": ["model.data_transform.sep_2022", "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_4_member_casual__member__casual.b06eb06e1d", "test.data_transform.source_accepted_values_staging_2022_202209_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.33dede432e", "test.data_transform.source_unique_staging_2022_202209_citibike_tripdata_4_ride_id.c27fc508ca"], "source.data_transform.staging_2022.202210_citibike_tripdata_1": ["model.data_transform.oct_2022", "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_1_member_casual__member__casual.b679530ffa", "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d71e555f91", "test.data_transform.source_unique_staging_2022_202210_citibike_tripdata_1_ride_id.390d32fb45"], "source.data_transform.staging_2022.202210_citibike_tripdata_2": ["model.data_transform.oct_2022", "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_2_member_casual__member__casual.458e088372", "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.3b148e382e", "test.data_transform.source_unique_staging_2022_202210_citibike_tripdata_2_ride_id.a356515f4c"], "source.data_transform.staging_2022.202210_citibike_tripdata_3": ["model.data_transform.oct_2022", "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_3_member_casual__member__casual.83cf73a779", "test.data_transform.source_accepted_values_staging_2022_202210_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b895dcd5af", "test.data_transform.source_unique_staging_2022_202210_citibike_tripdata_3_ride_id.d290fa3436"], "source.data_transform.staging_2022.202211_citibike_tripdata_1": ["model.data_transform.nov_2022", "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_1_member_casual__member__casual.de35c257d2", "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.e7ec80ec4a", "test.data_transform.source_unique_staging_2022_202211_citibike_tripdata_1_ride_id.901ff58b5d"], "source.data_transform.staging_2022.202211_citibike_tripdata_2": ["model.data_transform.nov_2022", "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_2_member_casual__member__casual.b8a04e5f28", "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.7b9d6ccb68", "test.data_transform.source_unique_staging_2022_202211_citibike_tripdata_2_ride_id.642d1a610f"], "source.data_transform.staging_2022.202211_citibike_tripdata_3": ["model.data_transform.nov_2022", "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_3_member_casual__member__casual.10a72da3a3", "test.data_transform.source_accepted_values_staging_2022_202211_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b865047467", "test.data_transform.source_unique_staging_2022_202211_citibike_tripdata_3_ride_id.71487f10cd"], "source.data_transform.staging_2022.202212_citibike_tripdata_1": ["model.data_transform.dec_2022", "test.data_transform.source_accepted_values_staging_2022_202212_citibike_tripdata_1_member_casual__member__casual.6fab7bc4be", "test.data_transform.source_accepted_values_staging_2022_202212_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.12325c9469", "test.data_transform.source_unique_staging_2022_202212_citibike_tripdata_1_ride_id.822e662f10"], "source.data_transform.staging_2022.202212_citibike_tripdata_2": ["model.data_transform.dec_2022", "test.data_transform.source_accepted_values_staging_2022_202212_citibike_tripdata_2_member_casual__member__casual.f83be4c4ba", "test.data_transform.source_accepted_values_staging_2022_202212_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.44c741a425", "test.data_transform.source_unique_staging_2022_202212_citibike_tripdata_2_ride_id.10f061f8b1"], "source.data_transform.staging_2023.202301_citibike_tripdata_1": ["model.data_transform.jan_2023", "test.data_transform.source_accepted_values_staging_2023_202301_citibike_tripdata_1_member_casual__member__casual.e67c36625a", "test.data_transform.source_accepted_values_staging_2023_202301_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.24bd699579", "test.data_transform.source_unique_staging_2023_202301_citibike_tripdata_1_ride_id.81bc5c6565"], "source.data_transform.staging_2023.202301_citibike_tripdata_2": ["model.data_transform.jan_2023", "test.data_transform.source_accepted_values_staging_2023_202301_citibike_tripdata_2_member_casual__member__casual.541abf690c", "test.data_transform.source_accepted_values_staging_2023_202301_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.57f725ca6e", "test.data_transform.source_unique_staging_2023_202301_citibike_tripdata_2_ride_id.95144646f2"], "source.data_transform.staging_2023.202302_citibike_tripdata_1": ["model.data_transform.feb_2023", "test.data_transform.source_accepted_values_staging_2023_202302_citibike_tripdata_1_member_casual__member__casual.aa74171390", "test.data_transform.source_accepted_values_staging_2023_202302_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.7b510489df", "test.data_transform.source_unique_staging_2023_202302_citibike_tripdata_1_ride_id.df77abeebf"], "source.data_transform.staging_2023.202302_citibike_tripdata_2": ["model.data_transform.feb_2023", "test.data_transform.source_accepted_values_staging_2023_202302_citibike_tripdata_2_member_casual__member__casual.e6f6833cdf", "test.data_transform.source_accepted_values_staging_2023_202302_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.58988dbe96", "test.data_transform.source_unique_staging_2023_202302_citibike_tripdata_2_ride_id.49849a05ab"], "source.data_transform.staging_2023.202303_citibike_tripdata_1": ["model.data_transform.mar_2023", "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_1_member_casual__member__casual.e0ac68a4ae", "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.f9be5d298d", "test.data_transform.source_unique_staging_2023_202303_citibike_tripdata_1_ride_id.5a9ff50cc0"], "source.data_transform.staging_2023.202303_citibike_tripdata_2": ["model.data_transform.mar_2023", "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_2_member_casual__member__casual.34c0460743", "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.66c6843a33", "test.data_transform.source_unique_staging_2023_202303_citibike_tripdata_2_ride_id.3a0b9d32bd"], "source.data_transform.staging_2023.202303_citibike_tripdata_3": ["model.data_transform.mar_2023", "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_3_member_casual__member__casual.d4b1ad962f", "test.data_transform.source_accepted_values_staging_2023_202303_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.be6459a9a1", "test.data_transform.source_unique_staging_2023_202303_citibike_tripdata_3_ride_id.c3932d809c"], "source.data_transform.staging_2023.202304_citibike_tripdata_1": ["model.data_transform.apr_2023", "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_1_member_casual__member__casual.071818cc29", "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.970647df40", "test.data_transform.source_unique_staging_2023_202304_citibike_tripdata_1_ride_id.e44aabb9e0"], "source.data_transform.staging_2023.202304_citibike_tripdata_2": ["model.data_transform.apr_2023", "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_2_member_casual__member__casual.9bf18b0893", "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.2bb8e80167", "test.data_transform.source_unique_staging_2023_202304_citibike_tripdata_2_ride_id.2495989b65"], "source.data_transform.staging_2023.202304_citibike_tripdata_3": ["model.data_transform.apr_2023", "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_3_member_casual__member__casual.19da833df1", "test.data_transform.source_accepted_values_staging_2023_202304_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.cd9ebd1819", "test.data_transform.source_unique_staging_2023_202304_citibike_tripdata_3_ride_id.669f8ac7db"], "source.data_transform.staging_2023.202305_citibike_tripdata_1": ["model.data_transform.may_2023", "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_1_member_casual__member__casual.512fe17c3c", "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.c7b0de21f7", "test.data_transform.source_unique_staging_2023_202305_citibike_tripdata_1_ride_id.990d64de35"], "source.data_transform.staging_2023.202305_citibike_tripdata_2": ["model.data_transform.may_2023", "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_2_member_casual__member__casual.645b5b6596", "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.8ceb74d6e9", "test.data_transform.source_unique_staging_2023_202305_citibike_tripdata_2_ride_id.a660f8f7ed"], "source.data_transform.staging_2023.202305_citibike_tripdata_3": ["model.data_transform.may_2023", "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_3_member_casual__member__casual.f8f8e1dba2", "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.9ccd327201", "test.data_transform.source_unique_staging_2023_202305_citibike_tripdata_3_ride_id.beb699afce"], "source.data_transform.staging_2023.202305_citibike_tripdata_4": ["model.data_transform.may_2023", "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_4_member_casual__member__casual.b023b511ed", "test.data_transform.source_accepted_values_staging_2023_202305_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.f392354653", "test.data_transform.source_unique_staging_2023_202305_citibike_tripdata_4_ride_id.13182399ce"], "source.data_transform.staging_2023.202306_citibike_tripdata_1": ["model.data_transform.jun_2023", "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_1_member_casual__member__casual.27439f1a8d", "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.77a007c156", "test.data_transform.source_unique_staging_2023_202306_citibike_tripdata_1_ride_id.548908d88b"], "source.data_transform.staging_2023.202306_citibike_tripdata_2": ["model.data_transform.jun_2023", "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_2_member_casual__member__casual.1e94854976", "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.c4d4c174b3", "test.data_transform.source_unique_staging_2023_202306_citibike_tripdata_2_ride_id.aa62dd10cd"], "source.data_transform.staging_2023.202306_citibike_tripdata_3": ["model.data_transform.jun_2023", "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_3_member_casual__member__casual.2dca2126ea", "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.6e51086472", "test.data_transform.source_unique_staging_2023_202306_citibike_tripdata_3_ride_id.23bf24d291"], "source.data_transform.staging_2023.202306_citibike_tripdata_4": ["model.data_transform.jun_2023", "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_4_member_casual__member__casual.46183437f7", "test.data_transform.source_accepted_values_staging_2023_202306_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.04ba57f9be", "test.data_transform.source_unique_staging_2023_202306_citibike_tripdata_4_ride_id.7ee4dba58b"], "source.data_transform.staging_2023.202307_citibike_tripdata_1": ["model.data_transform.jul_2023", "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_1_member_casual__member__casual.0f040b0db8", "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.befb9dc7fc", "test.data_transform.source_unique_staging_2023_202307_citibike_tripdata_1_ride_id.5ed083175c"], "source.data_transform.staging_2023.202307_citibike_tripdata_2": ["model.data_transform.jul_2023", "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_2_member_casual__member__casual.f1ed4abb5d", "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.e967ac1960", "test.data_transform.source_unique_staging_2023_202307_citibike_tripdata_2_ride_id.68c1a44ec1"], "source.data_transform.staging_2023.202307_citibike_tripdata_3": ["model.data_transform.jul_2023", "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_3_member_casual__member__casual.2fbb9c7047", "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c3e53cedb4", "test.data_transform.source_unique_staging_2023_202307_citibike_tripdata_3_ride_id.d24badf4df"], "source.data_transform.staging_2023.202307_citibike_tripdata_4": ["model.data_transform.jul_2023", "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_4_member_casual__member__casual.c18da0a869", "test.data_transform.source_accepted_values_staging_2023_202307_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.a989a7c7ed", "test.data_transform.source_unique_staging_2023_202307_citibike_tripdata_4_ride_id.5d03214987"], "source.data_transform.staging_2023.202308_citibike_tripdata_1": ["model.data_transform.aug_2023", "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_1_member_casual__member__casual.b54c1072f8", "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.83dd22a73f", "test.data_transform.source_unique_staging_2023_202308_citibike_tripdata_1_ride_id.1a79714889"], "source.data_transform.staging_2023.202308_citibike_tripdata_2": ["model.data_transform.aug_2023", "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_2_member_casual__member__casual.ba3056da09", "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.797ac00c56", "test.data_transform.source_unique_staging_2023_202308_citibike_tripdata_2_ride_id.952717e3e1"], "source.data_transform.staging_2023.202308_citibike_tripdata_3": ["model.data_transform.aug_2023", "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_3_member_casual__member__casual.f7fbdf8255", "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.279ec126a7", "test.data_transform.source_unique_staging_2023_202308_citibike_tripdata_3_ride_id.af9f395666"], "source.data_transform.staging_2023.202308_citibike_tripdata_4": ["model.data_transform.aug_2023", "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_4_member_casual__member__casual.b771418036", "test.data_transform.source_accepted_values_staging_2023_202308_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.a251739d4d", "test.data_transform.source_unique_staging_2023_202308_citibike_tripdata_4_ride_id.275fe7ce2a"], "source.data_transform.staging_2023.202309_citibike_tripdata_1": ["model.data_transform.sep_2023", "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_1_member_casual__member__casual.9162740ebf", "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.86306e4c75", "test.data_transform.source_unique_staging_2023_202309_citibike_tripdata_1_ride_id.230aeb3b4b"], "source.data_transform.staging_2023.202309_citibike_tripdata_2": ["model.data_transform.sep_2023", "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_2_member_casual__member__casual.c8eaa2ed28", "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.77dc74e850", "test.data_transform.source_unique_staging_2023_202309_citibike_tripdata_2_ride_id.a703cfc9fc"], "source.data_transform.staging_2023.202309_citibike_tripdata_3": ["model.data_transform.sep_2023", "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_3_member_casual__member__casual.b14b1303bf", "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.1a8d556210", "test.data_transform.source_unique_staging_2023_202309_citibike_tripdata_3_ride_id.d01f717cf2"], "source.data_transform.staging_2023.202309_citibike_tripdata_4": ["model.data_transform.sep_2023", "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_4_member_casual__member__casual.cfa900e5cf", "test.data_transform.source_accepted_values_staging_2023_202309_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.923d5ae346", "test.data_transform.source_unique_staging_2023_202309_citibike_tripdata_4_ride_id.444ada612f"], "source.data_transform.staging_2023.202310_citibike_tripdata_1": ["model.data_transform.oct_2023", "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_1_member_casual__member__casual.60b188b02a", "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.82886257cb", "test.data_transform.source_unique_staging_2023_202310_citibike_tripdata_1_ride_id.590853bc7c"], "source.data_transform.staging_2023.202310_citibike_tripdata_2": ["model.data_transform.oct_2023", "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_2_member_casual__member__casual.6caea0aea6", "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d824a977e6", "test.data_transform.source_unique_staging_2023_202310_citibike_tripdata_2_ride_id.0e9c742b01"], "source.data_transform.staging_2023.202310_citibike_tripdata_3": ["model.data_transform.oct_2023", "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_3_member_casual__member__casual.0ba5e64a3e", "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.bcb96aff07", "test.data_transform.source_unique_staging_2023_202310_citibike_tripdata_3_ride_id.c6726ceeef"], "source.data_transform.staging_2023.202310_citibike_tripdata_4": ["model.data_transform.oct_2023", "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_4_member_casual__member__casual.76e7653260", "test.data_transform.source_accepted_values_staging_2023_202310_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.519a2908a6", "test.data_transform.source_unique_staging_2023_202310_citibike_tripdata_4_ride_id.f455889270"], "source.data_transform.staging_2023.202311_citibike_tripdata_1": ["model.data_transform.nov_2023", "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_1_member_casual__member__casual.72f204fd38", "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.804b475b49", "test.data_transform.source_unique_staging_2023_202311_citibike_tripdata_1_ride_id.c537ed70bc"], "source.data_transform.staging_2023.202311_citibike_tripdata_2": ["model.data_transform.nov_2023", "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_2_member_casual__member__casual.2d177c4282", "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.bccf307e18", "test.data_transform.source_unique_staging_2023_202311_citibike_tripdata_2_ride_id.c4ca9d9146"], "source.data_transform.staging_2023.202311_citibike_tripdata_3": ["model.data_transform.nov_2023", "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_3_member_casual__member__casual.e80c12b3aa", "test.data_transform.source_accepted_values_staging_2023_202311_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.171ea52344", "test.data_transform.source_unique_staging_2023_202311_citibike_tripdata_3_ride_id.a01b8419df"], "source.data_transform.staging_2023.202312_citibike_tripdata_1": ["model.data_transform.dec_2023", "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_1_member_casual__member__casual.3589b387d1", "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.176e483354", "test.data_transform.source_unique_staging_2023_202312_citibike_tripdata_1_ride_id.1572033f07"], "source.data_transform.staging_2023.202312_citibike_tripdata_2": ["model.data_transform.dec_2023", "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_2_member_casual__member__casual.3c634055ce", "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.e8a6e3b4c1", "test.data_transform.source_unique_staging_2023_202312_citibike_tripdata_2_ride_id.5a0bb8a281"], "source.data_transform.staging_2023.202312_citibike_tripdata_3": ["model.data_transform.dec_2023", "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_3_member_casual__member__casual.04c6a2e0c6", "test.data_transform.source_accepted_values_staging_2023_202312_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b15f4b9e5e", "test.data_transform.source_unique_staging_2023_202312_citibike_tripdata_3_ride_id.bc8b30cd14"], "source.data_transform.staging_2024.202401_citibike_tripdata": ["model.data_transform.jan_2024", "test.data_transform.source_accepted_values_staging_2024_202401_citibike_tripdata_member_casual__member__casual.2af7a66c89", "test.data_transform.source_accepted_values_staging_2024_202401_citibike_tripdata_rideable_type__electric_bike__classic_bike.9e5955f373", "test.data_transform.source_unique_staging_2024_202401_citibike_tripdata_ride_id.9c1bfdd0e8"], "source.data_transform.staging_2024.202402_citibike_tripdata": ["model.data_transform.feb_2024", "test.data_transform.source_accepted_values_staging_2024_202402_citibike_tripdata_member_casual__member__casual.90a16e8e8c", "test.data_transform.source_accepted_values_staging_2024_202402_citibike_tripdata_rideable_type__electric_bike__classic_bike.ab211f12fb", "test.data_transform.source_unique_staging_2024_202402_citibike_tripdata_ride_id.e0a561b57b"], "source.data_transform.staging_2024.202403_citibike_tripdata": ["model.data_transform.mar_2024", "test.data_transform.source_accepted_values_staging_2024_202403_citibike_tripdata_member_casual__member__casual.80a7467e2a", "test.data_transform.source_accepted_values_staging_2024_202403_citibike_tripdata_rideable_type__electric_bike__classic_bike.14f7f02bd0", "test.data_transform.source_unique_staging_2024_202403_citibike_tripdata_ride_id.1e9a4f4be0"], "source.data_transform.staging_2024.202404_citibike_tripdata": ["model.data_transform.apr_2024", "test.data_transform.source_accepted_values_staging_2024_202404_citibike_tripdata_member_casual__member__casual.68e71aefc6", "test.data_transform.source_accepted_values_staging_2024_202404_citibike_tripdata_rideable_type__electric_bike__classic_bike.225cddb476", "test.data_transform.source_unique_staging_2024_202404_citibike_tripdata_ride_id.be41092873"], "source.data_transform.staging_2024.202405_citibike_tripdata_1": ["model.data_transform.may_2024", "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_1_member_casual__member__casual.c0c9491f38", "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.25bfb8f006", "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_1_ride_id.10fd576521"], "source.data_transform.staging_2024.202405_citibike_tripdata_2": ["model.data_transform.may_2024", "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_2_member_casual__member__casual.e4b553fe91", "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d5236d44c7", "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_2_ride_id.8bfedf735d"], "source.data_transform.staging_2024.202405_citibike_tripdata_3": ["model.data_transform.may_2024", "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_3_member_casual__member__casual.be7f170068", "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b36b453c0f", "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_3_ride_id.2810e73c6b"], "source.data_transform.staging_2024.202405_citibike_tripdata_4": ["model.data_transform.may_2024", "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_4_member_casual__member__casual.4da875273a", "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.e3a0fb0e40", "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_4_ride_id.ec6c9bdb3e"], "source.data_transform.staging_2024.202405_citibike_tripdata_5": ["model.data_transform.may_2024", "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_5_member_casual__member__casual.3d02d47b38", "test.data_transform.source_accepted_values_staging_2024_202405_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.e869852efc", "test.data_transform.source_unique_staging_2024_202405_citibike_tripdata_5_ride_id.f36781f59f"], "source.data_transform.staging_2024.202406_citibike_tripdata_1": ["model.data_transform.jun_2024", "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_1_member_casual__member__casual.a2d6a2f7e5", "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.a7f19a61cc", "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_1_ride_id.66cd4f56c6"], "source.data_transform.staging_2024.202406_citibike_tripdata_2": ["model.data_transform.jun_2024", "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_2_member_casual__member__casual.c00b5997cd", "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.c05219e414", "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_2_ride_id.6c23a63cd1"], "source.data_transform.staging_2024.202406_citibike_tripdata_3": ["model.data_transform.jun_2024", "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_3_member_casual__member__casual.c8fc9a2b8f", "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c2b1cfeaa7", "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_3_ride_id.50c2f7a482"], "source.data_transform.staging_2024.202406_citibike_tripdata_4": ["model.data_transform.jun_2024", "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_4_member_casual__member__casual.30119db7e3", "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.8724801970", "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_4_ride_id.1d0b9a609e"], "source.data_transform.staging_2024.202406_citibike_tripdata_5": ["model.data_transform.jun_2024", "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_5_member_casual__member__casual.b4a3bc4a76", "test.data_transform.source_accepted_values_staging_2024_202406_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.40c37bad28", "test.data_transform.source_unique_staging_2024_202406_citibike_tripdata_5_ride_id.a3ecbc5671"], "source.data_transform.staging_2024.202407_citibike_tripdata_1": ["model.data_transform.jul_2024", "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_1_member_casual__member__casual.0b63ff5aa0", "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.b719633391", "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_1_ride_id.91f4690f74"], "source.data_transform.staging_2024.202407_citibike_tripdata_2": ["model.data_transform.jul_2024", "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_2_member_casual__member__casual.bf43addef2", "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.558cc529bf", "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_2_ride_id.1b35ecc34e"], "source.data_transform.staging_2024.202407_citibike_tripdata_3": ["model.data_transform.jul_2024", "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_3_member_casual__member__casual.5eb64c744d", "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.9084d80750", "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_3_ride_id.d7eaa3af7a"], "source.data_transform.staging_2024.202407_citibike_tripdata_4": ["model.data_transform.jul_2024", "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_4_member_casual__member__casual.20e2125326", "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.d0efba79e4", "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_4_ride_id.5540e8ef36"], "source.data_transform.staging_2024.202407_citibike_tripdata_5": ["model.data_transform.jul_2024", "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_5_member_casual__member__casual.e45ae9c1fe", "test.data_transform.source_accepted_values_staging_2024_202407_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.8510e1eef5", "test.data_transform.source_unique_staging_2024_202407_citibike_tripdata_5_ride_id.ea3d1effd5"], "source.data_transform.staging_2024.202408_citibike_tripdata_1": ["model.data_transform.aug_2024", "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_1_member_casual__member__casual.90645fffc2", "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.af7a2b0803", "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_1_ride_id.27471140bb"], "source.data_transform.staging_2024.202408_citibike_tripdata_2": ["model.data_transform.aug_2024", "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_2_member_casual__member__casual.3343eecc89", "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.53021c667f", "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_2_ride_id.dc8e6c1013"], "source.data_transform.staging_2024.202408_citibike_tripdata_3": ["model.data_transform.aug_2024", "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_3_member_casual__member__casual.9dd3cae333", "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.045af9f6fc", "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_3_ride_id.ee75cd89ba"], "source.data_transform.staging_2024.202408_citibike_tripdata_4": ["model.data_transform.aug_2024", "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_4_member_casual__member__casual.65e3e95e00", "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.0d31aa1b38", "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_4_ride_id.c5f8fe150d"], "source.data_transform.staging_2024.202408_citibike_tripdata_5": ["model.data_transform.aug_2024", "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_5_member_casual__member__casual.71886dec1c", "test.data_transform.source_accepted_values_staging_2024_202408_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.19a1b069c2", "test.data_transform.source_unique_staging_2024_202408_citibike_tripdata_5_ride_id.b843752ea0"], "source.data_transform.staging_2024.202409_citibike_tripdata_1": ["model.data_transform.sep_2024", "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_1_member_casual__member__casual.bae5aeff15", "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.6f3eec580a", "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_1_ride_id.9af5c69b56"], "source.data_transform.staging_2024.202409_citibike_tripdata_2": ["model.data_transform.sep_2024", "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_2_member_casual__member__casual.2b24d49fdd", "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.90bfc78098", "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_2_ride_id.7f34812d51"], "source.data_transform.staging_2024.202409_citibike_tripdata_3": ["model.data_transform.sep_2024", "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_3_member_casual__member__casual.c4d49e5e42", "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.df8da18287", "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_3_ride_id.c63f75eb36"], "source.data_transform.staging_2024.202409_citibike_tripdata_4": ["model.data_transform.sep_2024", "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_4_member_casual__member__casual.1e96cecca5", "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.aadd0d6f82", "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_4_ride_id.4a94a1150e"], "source.data_transform.staging_2024.202409_citibike_tripdata_5": ["model.data_transform.sep_2024", "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_5_member_casual__member__casual.95628007c5", "test.data_transform.source_accepted_values_staging_2024_202409_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.e1dc23b9e9", "test.data_transform.source_unique_staging_2024_202409_citibike_tripdata_5_ride_id.144de7852e"], "source.data_transform.staging_2024.202410_citibike_tripdata_1": ["model.data_transform.oct_2024", "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_1_member_casual__member__casual.69a66b1b7b", "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.1b27054fdb", "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_1_ride_id.5d27bcfc2f"], "source.data_transform.staging_2024.202410_citibike_tripdata_2": ["model.data_transform.oct_2024", "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_2_member_casual__member__casual.94b5d6f1d8", "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.c978b1fe85", "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_2_ride_id.c07c200646"], "source.data_transform.staging_2024.202410_citibike_tripdata_3": ["model.data_transform.oct_2024", "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_3_member_casual__member__casual.b52b8e1f5f", "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c2b9dbe50a", "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_3_ride_id.da299a20e2"], "source.data_transform.staging_2024.202410_citibike_tripdata_4": ["model.data_transform.oct_2024", "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_4_member_casual__member__casual.1380e42b22", "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.c76da46d7e", "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_4_ride_id.86ee5ee7f7"], "source.data_transform.staging_2024.202410_citibike_tripdata_5": ["model.data_transform.oct_2024", "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_5_member_casual__member__casual.53205d918a", "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_5_rideable_type__electric_bike__classic_bike.c41c9a5044", "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_5_ride_id.0e19fb8ad7"], "source.data_transform.staging_2024.202410_citibike_tripdata_6": ["model.data_transform.oct_2024", "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_6_member_casual__member__casual.8b9a7fc94c", "test.data_transform.source_accepted_values_staging_2024_202410_citibike_tripdata_6_rideable_type__electric_bike__classic_bike.a0e21ac7c4", "test.data_transform.source_unique_staging_2024_202410_citibike_tripdata_6_ride_id.77681bc510"], "source.data_transform.staging_2024.202411_citibike_tripdata_1": ["model.data_transform.nov_2024", "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_1_member_casual__member__casual.83bcc975c4", "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.10b749caa9", "test.data_transform.source_unique_staging_2024_202411_citibike_tripdata_1_ride_id.a8bd390113"], "source.data_transform.staging_2024.202411_citibike_tripdata_2": ["model.data_transform.nov_2024", "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_2_member_casual__member__casual.32388c500a", "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.ba3e2e4179", "test.data_transform.source_unique_staging_2024_202411_citibike_tripdata_2_ride_id.26a4253341"], "source.data_transform.staging_2024.202411_citibike_tripdata_3": ["model.data_transform.nov_2024", "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_3_member_casual__member__casual.bb2640d8bc", "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c7906c8cfc", "test.data_transform.source_unique_staging_2024_202411_citibike_tripdata_3_ride_id.df7b29eb96"], "source.data_transform.staging_2024.202411_citibike_tripdata_4": ["model.data_transform.nov_2024", "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_4_member_casual__member__casual.48ae52f5c6", "test.data_transform.source_accepted_values_staging_2024_202411_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.9181ad6fc0", "test.data_transform.source_unique_staging_2024_202411_citibike_tripdata_4_ride_id.5450ec8fc8"], "source.data_transform.staging_2024.202412_citibike_tripdata_1": ["model.data_transform.dec_2024", "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_1_member_casual__member__casual.1288197709", "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.602815d31b", "test.data_transform.source_unique_staging_2024_202412_citibike_tripdata_1_ride_id.c11d9c9414"], "source.data_transform.staging_2024.202412_citibike_tripdata_2": ["model.data_transform.dec_2024", "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_2_member_casual__member__casual.2b7c7ec75c", "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.31fba28628", "test.data_transform.source_unique_staging_2024_202412_citibike_tripdata_2_ride_id.9f7c6b6835"], "source.data_transform.staging_2024.202412_citibike_tripdata_3": ["model.data_transform.dec_2024", "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_3_member_casual__member__casual.c479cdfd39", "test.data_transform.source_accepted_values_staging_2024_202412_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.847a432211", "test.data_transform.source_unique_staging_2024_202412_citibike_tripdata_3_ride_id.3f60f32258"], "source.data_transform.staging_2021.202101_citibike_tripdata_1": ["model.data_transform.jan_2021", "test.data_transform.source_accepted_values_staging_2021_202101_citibike_tripdata_1_member_casual__member__casual.2b431faf6f", "test.data_transform.source_accepted_values_staging_2021_202101_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.24a0988e0d", "test.data_transform.source_unique_staging_2021_202101_citibike_tripdata_1_ride_id.c54fc2a035"], "source.data_transform.staging_2021.202101_citibike_tripdata_2": ["model.data_transform.jan_2021", "test.data_transform.source_accepted_values_staging_2021_202101_citibike_tripdata_2_member_casual__member__casual.84821b042c", "test.data_transform.source_accepted_values_staging_2021_202101_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.8a205bad62", "test.data_transform.source_unique_staging_2021_202101_citibike_tripdata_2_ride_id.5e6d30062a"], "source.data_transform.staging_2021.202102_citibike_tripdata_1": ["model.data_transform.feb_2021", "test.data_transform.source_accepted_values_staging_2021_202102_citibike_tripdata_1_member_casual__member__casual.c311912a3a", "test.data_transform.source_accepted_values_staging_2021_202102_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.a9d8406edf", "test.data_transform.source_unique_staging_2021_202102_citibike_tripdata_1_ride_id.cb09fc8f90"], "source.data_transform.staging_2021.202103_citibike_tripdata_1": ["model.data_transform.mar_2021", "test.data_transform.source_accepted_values_staging_2021_202103_citibike_tripdata_1_member_casual__member__casual.b7b9f1a1c9", "test.data_transform.source_accepted_values_staging_2021_202103_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.21fcf28c86", "test.data_transform.source_unique_staging_2021_202103_citibike_tripdata_1_ride_id.77c231fd86"], "source.data_transform.staging_2021.202103_citibike_tripdata_2": ["model.data_transform.mar_2021", "test.data_transform.source_accepted_values_staging_2021_202103_citibike_tripdata_2_member_casual__member__casual.13df90702e", "test.data_transform.source_accepted_values_staging_2021_202103_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.748b88414d", "test.data_transform.source_unique_staging_2021_202103_citibike_tripdata_2_ride_id.cb02d768fb"], "source.data_transform.staging_2021.202104_citibike_tripdata_1": ["model.data_transform.apr_2021", "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_1_member_casual__member__casual.eaf5b0b2d8", "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.67171bd77f", "test.data_transform.source_unique_staging_2021_202104_citibike_tripdata_1_ride_id.f765fb12c6"], "source.data_transform.staging_2021.202104_citibike_tripdata_2": ["model.data_transform.apr_2021", "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_2_member_casual__member__casual.91b27674a1", "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.10a807266a", "test.data_transform.source_unique_staging_2021_202104_citibike_tripdata_2_ride_id.8aecd28751"], "source.data_transform.staging_2021.202104_citibike_tripdata_3": ["model.data_transform.apr_2021", "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_3_member_casual__member__casual.66f974b607", "test.data_transform.source_accepted_values_staging_2021_202104_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.bcc1600a5a", "test.data_transform.source_unique_staging_2021_202104_citibike_tripdata_3_ride_id.b197dd7c4c"], "source.data_transform.staging_2021.202105_citibike_tripdata_1": ["model.data_transform.may_2021", "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_1_member_casual__member__casual.4fb310fbfd", "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.5289fd62fb", "test.data_transform.source_unique_staging_2021_202105_citibike_tripdata_1_ride_id.258b56e8d5"], "source.data_transform.staging_2021.202105_citibike_tripdata_2": ["model.data_transform.may_2021", "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_2_member_casual__member__casual.bea25ded95", "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.98921971ef", "test.data_transform.source_unique_staging_2021_202105_citibike_tripdata_2_ride_id.18eada12b7"], "source.data_transform.staging_2021.202105_citibike_tripdata_3": ["model.data_transform.may_2021", "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_3_member_casual__member__casual.83a551dd7a", "test.data_transform.source_accepted_values_staging_2021_202105_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.739b51f382", "test.data_transform.source_unique_staging_2021_202105_citibike_tripdata_3_ride_id.ffe5f18f26"], "source.data_transform.staging_2021.202106_citibike_tripdata_1": ["model.data_transform.jun_2021", "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_1_member_casual__member__casual.0374989de7", "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.cf44063f90", "test.data_transform.source_unique_staging_2021_202106_citibike_tripdata_1_ride_id.40ab30ec21"], "source.data_transform.staging_2021.202106_citibike_tripdata_2": ["model.data_transform.jun_2021", "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_2_member_casual__member__casual.7f7733a1f3", "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d247f397da", "test.data_transform.source_unique_staging_2021_202106_citibike_tripdata_2_ride_id.45c70ca55a"], "source.data_transform.staging_2021.202106_citibike_tripdata_3": ["model.data_transform.jun_2021", "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_3_member_casual__member__casual.0b8a955605", "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.6a590a79b8", "test.data_transform.source_unique_staging_2021_202106_citibike_tripdata_3_ride_id.f87b8dd150"], "source.data_transform.staging_2021.202106_citibike_tripdata_4": ["model.data_transform.jun_2021", "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_4_member_casual__member__casual.060131e290", "test.data_transform.source_accepted_values_staging_2021_202106_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.cb6cdd1270", "test.data_transform.source_unique_staging_2021_202106_citibike_tripdata_4_ride_id.14065d7a65"], "source.data_transform.staging_2021.202107_citibike_tripdata_1": ["model.data_transform.jul_2021", "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_1_member_casual__member__casual.8bc6a43143", "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.e5eec0cb2a", "test.data_transform.source_unique_staging_2021_202107_citibike_tripdata_1_ride_id.4a24d94602"], "source.data_transform.staging_2021.202107_citibike_tripdata_2": ["model.data_transform.jul_2021", "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_2_member_casual__member__casual.9bfcb30451", "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d17df087bd", "test.data_transform.source_unique_staging_2021_202107_citibike_tripdata_2_ride_id.a27fc40e13"], "source.data_transform.staging_2021.202107_citibike_tripdata_3": ["model.data_transform.jul_2021", "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_3_member_casual__member__casual.7d30beb88d", "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.506404c0c7", "test.data_transform.source_unique_staging_2021_202107_citibike_tripdata_3_ride_id.dfeb4d67da"], "source.data_transform.staging_2021.202107_citibike_tripdata_4": ["model.data_transform.jul_2021", "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_4_member_casual__member__casual.c76d5158e0", "test.data_transform.source_accepted_values_staging_2021_202107_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.87de44504b", "test.data_transform.source_unique_staging_2021_202107_citibike_tripdata_4_ride_id.8a373eccf2"], "source.data_transform.staging_2021.202108_citibike_tripdata_1": ["model.data_transform.aug_2021", "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_1_member_casual__member__casual.cc08f301ce", "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d1bdd31477", "test.data_transform.source_unique_staging_2021_202108_citibike_tripdata_1_ride_id.fccd7246ad"], "source.data_transform.staging_2021.202108_citibike_tripdata_2": ["model.data_transform.aug_2021", "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_2_member_casual__member__casual.30aaba5086", "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.4a120cef16", "test.data_transform.source_unique_staging_2021_202108_citibike_tripdata_2_ride_id.1213a78a85"], "source.data_transform.staging_2021.202108_citibike_tripdata_3": ["model.data_transform.aug_2021", "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_3_member_casual__member__casual.abe085f3c5", "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.e952f53885", "test.data_transform.source_unique_staging_2021_202108_citibike_tripdata_3_ride_id.8851d96b04"], "source.data_transform.staging_2021.202108_citibike_tripdata_4": ["model.data_transform.aug_2021", "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_4_member_casual__member__casual.860266a4b9", "test.data_transform.source_accepted_values_staging_2021_202108_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.2b6464adab", "test.data_transform.source_unique_staging_2021_202108_citibike_tripdata_4_ride_id.e317ef0e40"], "source.data_transform.staging_2021.202109_citibike_tripdata_1": ["model.data_transform.sep_2021", "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_1_member_casual__member__casual.cd66eb2de2", "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.14d685dbfb", "test.data_transform.source_unique_staging_2021_202109_citibike_tripdata_1_ride_id.a26d2aedeb"], "source.data_transform.staging_2021.202109_citibike_tripdata_2": ["model.data_transform.sep_2021", "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_2_member_casual__member__casual.5b52d33ab6", "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.d5429f412b", "test.data_transform.source_unique_staging_2021_202109_citibike_tripdata_2_ride_id.8b61779d71"], "source.data_transform.staging_2021.202109_citibike_tripdata_3": ["model.data_transform.sep_2021", "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_3_member_casual__member__casual.f088e7ad5a", "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.a327bf3797", "test.data_transform.source_unique_staging_2021_202109_citibike_tripdata_3_ride_id.fcba893a9a"], "source.data_transform.staging_2021.202109_citibike_tripdata_4": ["model.data_transform.sep_2021", "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_4_member_casual__member__casual.1bca846f67", "test.data_transform.source_accepted_values_staging_2021_202109_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.2d013538ac", "test.data_transform.source_unique_staging_2021_202109_citibike_tripdata_4_ride_id.c8d278b17e"], "source.data_transform.staging_2021.202110_citibike_tripdata_1": ["model.data_transform.oct_2021", "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_1_member_casual__member__casual.8f3a45ba98", "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.c229074449", "test.data_transform.source_unique_staging_2021_202110_citibike_tripdata_1_ride_id.6bd06769a9"], "source.data_transform.staging_2021.202110_citibike_tripdata_2": ["model.data_transform.oct_2021", "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_2_member_casual__member__casual.8944c18c5f", "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.a401e5db20", "test.data_transform.source_unique_staging_2021_202110_citibike_tripdata_2_ride_id.32c6ee955d"], "source.data_transform.staging_2021.202110_citibike_tripdata_3": ["model.data_transform.oct_2021", "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_3_member_casual__member__casual.b509ddd8d4", "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.b94eb150fa", "test.data_transform.source_unique_staging_2021_202110_citibike_tripdata_3_ride_id.ffe71673fd"], "source.data_transform.staging_2021.202110_citibike_tripdata_4": ["model.data_transform.oct_2021", "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_4_member_casual__member__casual.b315cea45a", "test.data_transform.source_accepted_values_staging_2021_202110_citibike_tripdata_4_rideable_type__electric_bike__classic_bike.c899723d08", "test.data_transform.source_unique_staging_2021_202110_citibike_tripdata_4_ride_id.f72b7ed84b"], "source.data_transform.staging_2021.202111_citibike_tripdata_1": ["model.data_transform.nov_2021", "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_1_member_casual__member__casual.4da73b0077", "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.e09e5b3640", "test.data_transform.source_unique_staging_2021_202111_citibike_tripdata_1_ride_id.ef6d9c0518"], "source.data_transform.staging_2021.202111_citibike_tripdata_2": ["model.data_transform.nov_2021", "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_2_member_casual__member__casual.715afd4fbd", "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.480f8285ce", "test.data_transform.source_unique_staging_2021_202111_citibike_tripdata_2_ride_id.6551fc2143"], "source.data_transform.staging_2021.202111_citibike_tripdata_3": ["model.data_transform.nov_2021", "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_3_member_casual__member__casual.c606d0b9a5", "test.data_transform.source_accepted_values_staging_2021_202111_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.c340f0742d", "test.data_transform.source_unique_staging_2021_202111_citibike_tripdata_3_ride_id.cf8b52b071"], "source.data_transform.staging_2021.202112_citibike_tripdata_1": ["model.data_transform.dec_2021", "test.data_transform.source_accepted_values_staging_2021_202112_citibike_tripdata_1_member_casual__member__casual.868a8816ca", "test.data_transform.source_accepted_values_staging_2021_202112_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.380ecfe5ef", "test.data_transform.source_unique_staging_2021_202112_citibike_tripdata_1_ride_id.4da4b782ec"], "source.data_transform.staging_2021.202112_citibike_tripdata_2": ["model.data_transform.dec_2021", "test.data_transform.source_accepted_values_staging_2021_202112_citibike_tripdata_2_member_casual__member__casual.d2a15a3818", "test.data_transform.source_accepted_values_staging_2021_202112_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.42a6584623", "test.data_transform.source_unique_staging_2021_202112_citibike_tripdata_2_ride_id.408522cf2b"], "source.data_transform.staging_2020.202001_citibike_tripdata_1": ["model.data_transform.jan_2020", "test.data_transform.source_accepted_values_staging_2020_202001_citibike_tripdata_1_member_casual__member__casual.44cc8596cf", "test.data_transform.source_accepted_values_staging_2020_202001_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d00ba7dbb3", "test.data_transform.source_unique_staging_2020_202001_citibike_tripdata_1_ride_id.4261206b1a"], "source.data_transform.staging_2020.202001_citibike_tripdata_2": ["model.data_transform.jan_2020", "test.data_transform.source_accepted_values_staging_2020_202001_citibike_tripdata_2_member_casual__member__casual.105c3d285a", "test.data_transform.source_accepted_values_staging_2020_202001_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.14124ed531", "test.data_transform.source_unique_staging_2020_202001_citibike_tripdata_2_ride_id.409cf6d4d5"], "source.data_transform.staging_2020.202002_citibike_tripdata_1": ["model.data_transform.feb_2020", "test.data_transform.source_accepted_values_staging_2020_202002_citibike_tripdata_1_member_casual__member__casual.9068fac9df", "test.data_transform.source_accepted_values_staging_2020_202002_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.f3e8709109", "test.data_transform.source_unique_staging_2020_202002_citibike_tripdata_1_ride_id.8601ab65ec"], "source.data_transform.staging_2020.202002_citibike_tripdata_2": ["model.data_transform.feb_2020", "test.data_transform.source_accepted_values_staging_2020_202002_citibike_tripdata_2_member_casual__member__casual.93543152ed", "test.data_transform.source_accepted_values_staging_2020_202002_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.b654b93119", "test.data_transform.source_unique_staging_2020_202002_citibike_tripdata_2_ride_id.49ab7c2eb0"], "source.data_transform.staging_2020.202003_citibike_tripdata_1": ["model.data_transform.mar_2020", "test.data_transform.source_accepted_values_staging_2020_202003_citibike_tripdata_1_member_casual__member__casual.adc7f375b2", "test.data_transform.source_accepted_values_staging_2020_202003_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.ade85bb3b7", "test.data_transform.source_unique_staging_2020_202003_citibike_tripdata_1_ride_id.affd78e3c1"], "source.data_transform.staging_2020.202003_citibike_tripdata_2": ["model.data_transform.mar_2020", "test.data_transform.source_accepted_values_staging_2020_202003_citibike_tripdata_2_member_casual__member__casual.fc383b9e6a", "test.data_transform.source_accepted_values_staging_2020_202003_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.ce1e7a6683", "test.data_transform.source_unique_staging_2020_202003_citibike_tripdata_2_ride_id.7948dcbf8c"], "source.data_transform.staging_2020.202004_citibike_tripdata_1": ["model.data_transform.apr_2020", "test.data_transform.source_accepted_values_staging_2020_202004_citibike_tripdata_1_member_casual__member__casual.4b69881c15", "test.data_transform.source_accepted_values_staging_2020_202004_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.e97ec4c3d5", "test.data_transform.source_unique_staging_2020_202004_citibike_tripdata_1_ride_id.6e99a3dacc"], "source.data_transform.staging_2020.202005_citibike_tripdata_1": ["model.data_transform.may_2020", "test.data_transform.source_accepted_values_staging_2020_202005_citibike_tripdata_1_member_casual__member__casual.2325ca6095", "test.data_transform.source_accepted_values_staging_2020_202005_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.d893005ba2", "test.data_transform.source_unique_staging_2020_202005_citibike_tripdata_1_ride_id.e127959e40"], "source.data_transform.staging_2020.202005_citibike_tripdata_2": ["model.data_transform.may_2020", "test.data_transform.source_accepted_values_staging_2020_202005_citibike_tripdata_2_member_casual__member__casual.762faaeb56", "test.data_transform.source_accepted_values_staging_2020_202005_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.e6a49616c5", "test.data_transform.source_unique_staging_2020_202005_citibike_tripdata_2_ride_id.8109c8f605"], "source.data_transform.staging_2020.202006_citibike_tripdata_1": ["model.data_transform.jun_2020", "test.data_transform.source_accepted_values_staging_2020_202006_citibike_tripdata_1_member_casual__member__casual.81ebfbb8a6", "test.data_transform.source_accepted_values_staging_2020_202006_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.6e273b7d21", "test.data_transform.source_unique_staging_2020_202006_citibike_tripdata_1_ride_id.a2790e72d3"], "source.data_transform.staging_2020.202006_citibike_tripdata_2": ["model.data_transform.jun_2020", "test.data_transform.source_accepted_values_staging_2020_202006_citibike_tripdata_2_member_casual__member__casual.281045dad3", "test.data_transform.source_accepted_values_staging_2020_202006_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.cbd326cee8", "test.data_transform.source_unique_staging_2020_202006_citibike_tripdata_2_ride_id.6c635769aa"], "source.data_transform.staging_2020.202007_citibike_tripdata_1": ["model.data_transform.jul_2020", "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_1_member_casual__member__casual.c29dfcd473", "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.fc0b2e3e77", "test.data_transform.source_unique_staging_2020_202007_citibike_tripdata_1_ride_id.b185028041"], "source.data_transform.staging_2020.202007_citibike_tripdata_2": ["model.data_transform.jul_2020", "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_2_member_casual__member__casual.9067daae8b", "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.048f185030", "test.data_transform.source_unique_staging_2020_202007_citibike_tripdata_2_ride_id.cacf5d17c2"], "source.data_transform.staging_2020.202007_citibike_tripdata_3": ["model.data_transform.jul_2020", "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_3_member_casual__member__casual.7b4d3cbacc", "test.data_transform.source_accepted_values_staging_2020_202007_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.1463226fa0", "test.data_transform.source_unique_staging_2020_202007_citibike_tripdata_3_ride_id.ba55dee410"], "source.data_transform.staging_2020.202008_citibike_tripdata_1": ["model.data_transform.aug_2020", "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_1_member_casual__member__casual.9e70548609", "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.3669cd2eeb", "test.data_transform.source_unique_staging_2020_202008_citibike_tripdata_1_ride_id.86c7faaf1f"], "source.data_transform.staging_2020.202008_citibike_tripdata_2": ["model.data_transform.aug_2020", "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_2_member_casual__member__casual.8a344840dd", "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.35791b39a0", "test.data_transform.source_unique_staging_2020_202008_citibike_tripdata_2_ride_id.669577147b"], "source.data_transform.staging_2020.202008_citibike_tripdata_3": ["model.data_transform.aug_2020", "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_3_member_casual__member__casual.4536657f3e", "test.data_transform.source_accepted_values_staging_2020_202008_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.dc33adc6aa", "test.data_transform.source_unique_staging_2020_202008_citibike_tripdata_3_ride_id.71862e4439"], "source.data_transform.staging_2020.202009_citibike_tripdata_1": ["model.data_transform.sep_2020", "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_1_member_casual__member__casual.f853b35dfd", "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.fe0035d52e", "test.data_transform.source_unique_staging_2020_202009_citibike_tripdata_1_ride_id.f0fb99328b"], "source.data_transform.staging_2020.202009_citibike_tripdata_2": ["model.data_transform.sep_2020", "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_2_member_casual__member__casual.42b16aa931", "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.f75167f70f", "test.data_transform.source_unique_staging_2020_202009_citibike_tripdata_2_ride_id.e4d1d77c74"], "source.data_transform.staging_2020.202009_citibike_tripdata_3": ["model.data_transform.sep_2020", "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_3_member_casual__member__casual.06e4cc1a66", "test.data_transform.source_accepted_values_staging_2020_202009_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.89137c2f23", "test.data_transform.source_unique_staging_2020_202009_citibike_tripdata_3_ride_id.17555a51e0"], "source.data_transform.staging_2020.202010_citibike_tripdata_1": ["model.data_transform.oct_2020", "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_1_member_casual__member__casual.c369b4ae5e", "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.a1db329b10", "test.data_transform.source_unique_staging_2020_202010_citibike_tripdata_1_ride_id.6b5fc4748b"], "source.data_transform.staging_2020.202010_citibike_tripdata_2": ["model.data_transform.oct_2020", "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_2_member_casual__member__casual.a6fe045335", "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.393d064471", "test.data_transform.source_unique_staging_2020_202010_citibike_tripdata_2_ride_id.dd128b141b"], "source.data_transform.staging_2020.202010_citibike_tripdata_3": ["model.data_transform.oct_2020", "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_3_member_casual__member__casual.6887ca0f19", "test.data_transform.source_accepted_values_staging_2020_202010_citibike_tripdata_3_rideable_type__electric_bike__classic_bike.5b0cc5a5fb", "test.data_transform.source_unique_staging_2020_202010_citibike_tripdata_3_ride_id.f9aed44f07"], "source.data_transform.staging_2020.202011_citibike_tripdata_1": ["model.data_transform.nov_2020", "test.data_transform.source_accepted_values_staging_2020_202011_citibike_tripdata_1_member_casual__member__casual.d078de3826", "test.data_transform.source_accepted_values_staging_2020_202011_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.144abdec5e", "test.data_transform.source_unique_staging_2020_202011_citibike_tripdata_1_ride_id.977b9f4133"], "source.data_transform.staging_2020.202011_citibike_tripdata_2": ["model.data_transform.nov_2020", "test.data_transform.source_accepted_values_staging_2020_202011_citibike_tripdata_2_member_casual__member__casual.76b0cbdd09", "test.data_transform.source_accepted_values_staging_2020_202011_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.582d3de83d", "test.data_transform.source_unique_staging_2020_202011_citibike_tripdata_2_ride_id.bcd9c01318"], "source.data_transform.staging_2020.202012_citibike_tripdata_1": ["model.data_transform.dec_2020", "test.data_transform.source_accepted_values_staging_2020_202012_citibike_tripdata_1_member_casual__member__casual.a43499a4ec", "test.data_transform.source_accepted_values_staging_2020_202012_citibike_tripdata_1_rideable_type__electric_bike__classic_bike.081d8e1411", "test.data_transform.source_unique_staging_2020_202012_citibike_tripdata_1_ride_id.07247252f8"], "source.data_transform.staging_2020.202012_citibike_tripdata_2": ["model.data_transform.dec_2020", "test.data_transform.source_accepted_values_staging_2020_202012_citibike_tripdata_2_member_casual__member__casual.6cfabc4395", "test.data_transform.source_accepted_values_staging_2020_202012_citibike_tripdata_2_rideable_type__electric_bike__classic_bike.3e6163dc4d", "test.data_transform.source_unique_staging_2020_202012_citibike_tripdata_2_ride_id.995b0180fc"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}